
// Copyright 2021 RISC-V International Open Source Laboratory (RIOS Lab). All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.




`ifdef PYGMY_ES1Y
`ifndef STATION_DMA_PKG__SV
`define STATION_DMA_PKG__SV
package station_dma_pkg;
  localparam int STATION_DMA_RING_ADDR_WIDTH = 'h19;
  localparam int STATION_DMA_DATA_WIDTH = 'h40;
  localparam [STATION_DMA_RING_ADDR_WIDTH-1:0] STATION_DMA_MAX_RING_ADDR = 'h1ffffff;
  localparam int STATION_DMA_BLKID = 'h5;
  localparam int STATION_DMA_BLKID_WIDTH = 'h5;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_0 = 64'h0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_1 = 64'h8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_2 = 64'h10;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_3 = 64'h18;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_4 = 64'h20;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_5 = 64'h28;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_6 = 64'h30;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_7 = 64'h38;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_8 = 64'h40;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_9 = 64'h48;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_10 = 64'h50;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_11 = 64'h58;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_12 = 64'h60;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_13 = 64'h68;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_14 = 64'h70;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_15 = 64'h78;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_16 = 64'h80;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_17 = 64'h88;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_18 = 64'h90;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_19 = 64'h98;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_20 = 64'ha0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_21 = 64'ha8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_22 = 64'hb0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_23 = 64'hb8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_24 = 64'hc0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_25 = 64'hc8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_26 = 64'hd0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_27 = 64'hd8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_28 = 64'he0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_29 = 64'he8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_30 = 64'hf0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_31 = 64'hf8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_32 = 64'h100;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_33 = 64'h108;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_34 = 64'h110;
  localparam int STATION_DMA_S2B_PLIC_INTR_EN_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_0 = 64'h500000;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_1 = 64'h500008;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_2 = 64'h500010;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_3 = 64'h500018;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_4 = 64'h500020;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_5 = 64'h500028;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_6 = 64'h500030;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_7 = 64'h500038;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_8 = 64'h500040;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_9 = 64'h500048;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_10 = 64'h500050;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_11 = 64'h500058;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_12 = 64'h500060;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_13 = 64'h500068;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_14 = 64'h500070;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_15 = 64'h500078;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_16 = 64'h500080;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_17 = 64'h500088;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_18 = 64'h500090;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_19 = 64'h500098;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_20 = 64'h5000a0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_21 = 64'h5000a8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_22 = 64'h5000b0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_23 = 64'h5000b8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_24 = 64'h5000c0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_25 = 64'h5000c8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_26 = 64'h5000d0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_27 = 64'h5000d8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_28 = 64'h5000e0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_29 = 64'h5000e8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_30 = 64'h5000f0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_31 = 64'h5000f8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_32 = 64'h500100;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_33 = 64'h500108;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_EN_ADDR__DEPTH_34 = 64'h500110;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_0 = 64'h118;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_1 = 64'h120;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_2 = 64'h128;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_3 = 64'h130;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_4 = 64'h138;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_5 = 64'h140;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_6 = 64'h148;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_7 = 64'h150;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_8 = 64'h158;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_9 = 64'h160;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_10 = 64'h168;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_11 = 64'h170;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_12 = 64'h178;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_13 = 64'h180;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_14 = 64'h188;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_15 = 64'h190;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_16 = 64'h198;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_17 = 64'h1a0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_18 = 64'h1a8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_19 = 64'h1b0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_20 = 64'h1b8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_21 = 64'h1c0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_22 = 64'h1c8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_23 = 64'h1d0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_24 = 64'h1d8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_25 = 64'h1e0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_26 = 64'h1e8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_27 = 64'h1f0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_28 = 64'h1f8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_29 = 64'h200;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_30 = 64'h208;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_31 = 64'h210;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_32 = 64'h218;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_33 = 64'h220;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_34 = 64'h228;
  localparam int STATION_DMA_S2B_PLIC_DBG_EN_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_0 = 64'h500118;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_1 = 64'h500120;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_2 = 64'h500128;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_3 = 64'h500130;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_4 = 64'h500138;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_5 = 64'h500140;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_6 = 64'h500148;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_7 = 64'h500150;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_8 = 64'h500158;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_9 = 64'h500160;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_10 = 64'h500168;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_11 = 64'h500170;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_12 = 64'h500178;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_13 = 64'h500180;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_14 = 64'h500188;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_15 = 64'h500190;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_16 = 64'h500198;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_17 = 64'h5001a0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_18 = 64'h5001a8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_19 = 64'h5001b0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_20 = 64'h5001b8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_21 = 64'h5001c0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_22 = 64'h5001c8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_23 = 64'h5001d0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_24 = 64'h5001d8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_25 = 64'h5001e0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_26 = 64'h5001e8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_27 = 64'h5001f0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_28 = 64'h5001f8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_29 = 64'h500200;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_30 = 64'h500208;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_31 = 64'h500210;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_32 = 64'h500218;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_33 = 64'h500220;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_DBG_EN_ADDR__DEPTH_34 = 64'h500228;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_0 = 64'h230;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_1 = 64'h238;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_2 = 64'h240;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_3 = 64'h248;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_4 = 64'h250;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_5 = 64'h258;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_6 = 64'h260;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_7 = 64'h268;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_8 = 64'h270;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_9 = 64'h278;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_10 = 64'h280;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_11 = 64'h288;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_12 = 64'h290;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_13 = 64'h298;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_14 = 64'h2a0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_15 = 64'h2a8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_16 = 64'h2b0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_17 = 64'h2b8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_18 = 64'h2c0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_19 = 64'h2c8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_20 = 64'h2d0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_21 = 64'h2d8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_22 = 64'h2e0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_23 = 64'h2e8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_24 = 64'h2f0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_25 = 64'h2f8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_26 = 64'h300;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_27 = 64'h308;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_28 = 64'h310;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_29 = 64'h318;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_30 = 64'h320;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_31 = 64'h328;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_32 = 64'h330;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_33 = 64'h338;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_34 = 64'h340;
  localparam int STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_0 = 64'h500230;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_1 = 64'h500238;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_2 = 64'h500240;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_3 = 64'h500248;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_4 = 64'h500250;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_5 = 64'h500258;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_6 = 64'h500260;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_7 = 64'h500268;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_8 = 64'h500270;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_9 = 64'h500278;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_10 = 64'h500280;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_11 = 64'h500288;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_12 = 64'h500290;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_13 = 64'h500298;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_14 = 64'h5002a0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_15 = 64'h5002a8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_16 = 64'h5002b0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_17 = 64'h5002b8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_18 = 64'h5002c0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_19 = 64'h5002c8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_20 = 64'h5002d0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_21 = 64'h5002d8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_22 = 64'h5002e0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_23 = 64'h5002e8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_24 = 64'h5002f0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_25 = 64'h5002f8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_26 = 64'h500300;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_27 = 64'h500308;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_28 = 64'h500310;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_29 = 64'h500318;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_30 = 64'h500320;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_31 = 64'h500328;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_32 = 64'h500330;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_33 = 64'h500338;
  localparam bit [25 - 1:0] STATION_DMA_S2B_PLIC_INTR_CORE_ID_ADDR__DEPTH_34 = 64'h500340;
  localparam bit [25 - 1:0] STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_0 = 64'h348;
  localparam bit [25 - 1:0] STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_1 = 64'h350;
  localparam bit [25 - 1:0] STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_2 = 64'h358;
  localparam bit [25 - 1:0] STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_3 = 64'h360;
  localparam bit [25 - 1:0] STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_4 = 64'h368;
  localparam int STATION_DMA_B2S_PLIC_INTR_SRC_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_B2S_PLIC_INTR_SRC_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_B2S_PLIC_INTR_SRC_ADDR__DEPTH_0 = 64'h500348;
  localparam bit [25 - 1:0] STATION_DMA_B2S_PLIC_INTR_SRC_ADDR__DEPTH_1 = 64'h500350;
  localparam bit [25 - 1:0] STATION_DMA_B2S_PLIC_INTR_SRC_ADDR__DEPTH_2 = 64'h500358;
  localparam bit [25 - 1:0] STATION_DMA_B2S_PLIC_INTR_SRC_ADDR__DEPTH_3 = 64'h500360;
  localparam bit [25 - 1:0] STATION_DMA_B2S_PLIC_INTR_SRC_ADDR__DEPTH_4 = 64'h500368;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_OFFSET__DEPTH_0 = 64'h370;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_OFFSET__DEPTH_1 = 64'h378;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_OFFSET__DEPTH_2 = 64'h380;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_OFFSET__DEPTH_3 = 64'h388;
  localparam int STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_ADDR__DEPTH_0 = 64'h500370;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_ADDR__DEPTH_1 = 64'h500378;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_ADDR__DEPTH_2 = 64'h500380;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_ADDR__DEPTH_3 = 64'h500388;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_DST_ADDR_OFFSET__DEPTH_0 = 64'h390;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_DST_ADDR_OFFSET__DEPTH_1 = 64'h398;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_DST_ADDR_OFFSET__DEPTH_2 = 64'h3a0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_DST_ADDR_OFFSET__DEPTH_3 = 64'h3a8;
  localparam int STATION_DMA_S2B_DMA_THREAD_DST_ADDR_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_DMA_THREAD_DST_ADDR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_DST_ADDR_ADDR__DEPTH_0 = 64'h500390;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_DST_ADDR_ADDR__DEPTH_1 = 64'h500398;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_DST_ADDR_ADDR__DEPTH_2 = 64'h5003a0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_DST_ADDR_ADDR__DEPTH_3 = 64'h5003a8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_OFFSET__DEPTH_0 = 64'h3b0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_OFFSET__DEPTH_1 = 64'h3b8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_OFFSET__DEPTH_2 = 64'h3c0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_OFFSET__DEPTH_3 = 64'h3c8;
  localparam int STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_RSTVAL = 4'hf;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_ADDR__DEPTH_0 = 64'h5003b0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_ADDR__DEPTH_1 = 64'h5003b8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_ADDR__DEPTH_2 = 64'h5003c0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_ADDR__DEPTH_3 = 64'h5003c8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_OFFSET__DEPTH_0 = 64'h3d0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_OFFSET__DEPTH_1 = 64'h3d8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_OFFSET__DEPTH_2 = 64'h3e0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_OFFSET__DEPTH_3 = 64'h3e8;
  localparam int STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_ADDR__DEPTH_0 = 64'h5003d0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_ADDR__DEPTH_1 = 64'h5003d8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_ADDR__DEPTH_2 = 64'h5003e0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_ADDR__DEPTH_3 = 64'h5003e8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_OFFSET__DEPTH_0 = 64'h3f0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_OFFSET__DEPTH_1 = 64'h3f8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_OFFSET__DEPTH_2 = 64'h400;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_OFFSET__DEPTH_3 = 64'h408;
  localparam int STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_ADDR__DEPTH_0 = 64'h5003f0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_ADDR__DEPTH_1 = 64'h5003f8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_ADDR__DEPTH_2 = 64'h500400;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_ADDR__DEPTH_3 = 64'h500408;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_OFFSET__DEPTH_0 = 64'h410;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_OFFSET__DEPTH_1 = 64'h418;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_OFFSET__DEPTH_2 = 64'h420;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_OFFSET__DEPTH_3 = 64'h428;
  localparam int STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_ADDR__DEPTH_0 = 64'h500410;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_ADDR__DEPTH_1 = 64'h500418;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_ADDR__DEPTH_2 = 64'h500420;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_ADDR__DEPTH_3 = 64'h500428;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_OFFSET__DEPTH_0 = 64'h430;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_OFFSET__DEPTH_1 = 64'h438;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_OFFSET__DEPTH_2 = 64'h440;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_OFFSET__DEPTH_3 = 64'h448;
  localparam int STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_ADDR__DEPTH_0 = 64'h500430;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_ADDR__DEPTH_1 = 64'h500438;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_ADDR__DEPTH_2 = 64'h500440;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_ADDR__DEPTH_3 = 64'h500448;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_OFFSET__DEPTH_0 = 64'h450;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_OFFSET__DEPTH_1 = 64'h458;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_OFFSET__DEPTH_2 = 64'h460;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_OFFSET__DEPTH_3 = 64'h468;
  localparam int STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_ADDR__DEPTH_0 = 64'h500450;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_ADDR__DEPTH_1 = 64'h500458;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_ADDR__DEPTH_2 = 64'h500460;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_ADDR__DEPTH_3 = 64'h500468;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_OFFSET__DEPTH_0 = 64'h470;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_OFFSET__DEPTH_1 = 64'h478;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_OFFSET__DEPTH_2 = 64'h480;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_OFFSET__DEPTH_3 = 64'h488;
  localparam int STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_ADDR__DEPTH_0 = 64'h500470;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_ADDR__DEPTH_1 = 64'h500478;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_ADDR__DEPTH_2 = 64'h500480;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_ADDR__DEPTH_3 = 64'h500488;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_OFFSET__DEPTH_0 = 64'h490;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_OFFSET__DEPTH_1 = 64'h498;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_OFFSET__DEPTH_2 = 64'h4a0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_OFFSET__DEPTH_3 = 64'h4a8;
  localparam int STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_ADDR__DEPTH_0 = 64'h500490;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_ADDR__DEPTH_1 = 64'h500498;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_ADDR__DEPTH_2 = 64'h5004a0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_ADDR__DEPTH_3 = 64'h5004a8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_OFFSET__DEPTH_0 = 64'h4b0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_OFFSET__DEPTH_1 = 64'h4b8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_OFFSET__DEPTH_2 = 64'h4c0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_OFFSET__DEPTH_3 = 64'h4c8;
  localparam int STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_ADDR__DEPTH_0 = 64'h5004b0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_ADDR__DEPTH_1 = 64'h5004b8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_ADDR__DEPTH_2 = 64'h5004c0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_ADDR__DEPTH_3 = 64'h5004c8;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_FLUSH_ADDR_OFFSET = 64'h4d0;
  localparam int STATION_DMA_S2B_DMA_FLUSH_ADDR_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_DMA_FLUSH_ADDR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_FLUSH_ADDR_ADDR = 64'h5004d0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_FLUSH_REQ_TYPE_OFFSET = 64'h4d8;
  localparam int STATION_DMA_S2B_DMA_FLUSH_REQ_TYPE_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_S2B_DMA_FLUSH_REQ_TYPE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_FLUSH_REQ_TYPE_ADDR = 64'h5004d8;
  localparam bit [25 - 1:0] STATION_DMA_DMA_DEBUG_ADDR_OFFSET = 64'h4e0;
  localparam int STATION_DMA_DMA_DEBUG_ADDR_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_DMA_DEBUG_ADDR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_DEBUG_ADDR_ADDR = 64'h5004e0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_DEBUG_REQ_TYPE_OFFSET = 64'h4e8;
  localparam int STATION_DMA_DMA_DEBUG_REQ_TYPE_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_DMA_DEBUG_REQ_TYPE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_DEBUG_REQ_TYPE_ADDR = 64'h5004e8;
  localparam bit [25 - 1:0] STATION_DMA_DMA_DEBUG_WR_DATA_OFFSET = 64'h4f0;
  localparam int STATION_DMA_DMA_DEBUG_WR_DATA_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_DMA_DEBUG_WR_DATA_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_DEBUG_WR_DATA_ADDR = 64'h5004f0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_DEBUG_RD_DATA_OFFSET = 64'h4f8;
  localparam int STATION_DMA_DMA_DEBUG_RD_DATA_WIDTH  = 64;
  localparam bit [64 - 1:0] STATION_DMA_DMA_DEBUG_RD_DATA_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_DEBUG_RD_DATA_ADDR = 64'h5004f8;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD0_DATA_AVAIL_SRC_SEL_OFFSET = 64'h500;
  localparam int STATION_DMA_DMA_THREAD0_DATA_AVAIL_SRC_SEL_WIDTH  = 3;
  localparam bit [64 - 1:0] STATION_DMA_DMA_THREAD0_DATA_AVAIL_SRC_SEL_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD0_DATA_AVAIL_SRC_SEL_ADDR = 64'h500500;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD1_DATA_AVAIL_SRC_SEL_OFFSET = 64'h508;
  localparam int STATION_DMA_DMA_THREAD1_DATA_AVAIL_SRC_SEL_WIDTH  = 3;
  localparam bit [64 - 1:0] STATION_DMA_DMA_THREAD1_DATA_AVAIL_SRC_SEL_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD1_DATA_AVAIL_SRC_SEL_ADDR = 64'h500508;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD2_DATA_AVAIL_SRC_SEL_OFFSET = 64'h510;
  localparam int STATION_DMA_DMA_THREAD2_DATA_AVAIL_SRC_SEL_WIDTH  = 3;
  localparam bit [64 - 1:0] STATION_DMA_DMA_THREAD2_DATA_AVAIL_SRC_SEL_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD2_DATA_AVAIL_SRC_SEL_ADDR = 64'h500510;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD3_DATA_AVAIL_SRC_SEL_OFFSET = 64'h518;
  localparam int STATION_DMA_DMA_THREAD3_DATA_AVAIL_SRC_SEL_WIDTH  = 3;
  localparam bit [64 - 1:0] STATION_DMA_DMA_THREAD3_DATA_AVAIL_SRC_SEL_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD3_DATA_AVAIL_SRC_SEL_ADDR = 64'h500518;
  localparam bit [25 - 1:0] STATION_DMA_S2ICG_CLK_EN_OFFSET = 64'h520;
  localparam int STATION_DMA_S2ICG_CLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_DMA_S2ICG_CLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_DMA_S2ICG_CLK_EN_ADDR = 64'h500520;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_OFFSET__DEPTH_0 = 64'h528;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_OFFSET__DEPTH_1 = 64'h530;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_OFFSET__DEPTH_2 = 64'h538;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_OFFSET__DEPTH_3 = 64'h540;
  localparam int STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_ADDR__DEPTH_0 = 64'h500528;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_ADDR__DEPTH_1 = 64'h500530;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_ADDR__DEPTH_2 = 64'h500538;
  localparam bit [25 - 1:0] STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_ADDR__DEPTH_3 = 64'h500540;
  localparam bit [25 - 1:0] STATION_DMA_B2S_DMA_THREAD_IDLE_OFFSET__DEPTH_0 = 64'h548;
  localparam bit [25 - 1:0] STATION_DMA_B2S_DMA_THREAD_IDLE_OFFSET__DEPTH_1 = 64'h550;
  localparam bit [25 - 1:0] STATION_DMA_B2S_DMA_THREAD_IDLE_OFFSET__DEPTH_2 = 64'h558;
  localparam bit [25 - 1:0] STATION_DMA_B2S_DMA_THREAD_IDLE_OFFSET__DEPTH_3 = 64'h560;
  localparam int STATION_DMA_B2S_DMA_THREAD_IDLE_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_DMA_B2S_DMA_THREAD_IDLE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_B2S_DMA_THREAD_IDLE_ADDR__DEPTH_0 = 64'h500548;
  localparam bit [25 - 1:0] STATION_DMA_B2S_DMA_THREAD_IDLE_ADDR__DEPTH_1 = 64'h500550;
  localparam bit [25 - 1:0] STATION_DMA_B2S_DMA_THREAD_IDLE_ADDR__DEPTH_2 = 64'h500558;
  localparam bit [25 - 1:0] STATION_DMA_B2S_DMA_THREAD_IDLE_ADDR__DEPTH_3 = 64'h500560;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_OFFSET__DEPTH_0 = 64'h568;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_OFFSET__DEPTH_1 = 64'h570;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_OFFSET__DEPTH_2 = 64'h578;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_OFFSET__DEPTH_3 = 64'h580;
  localparam int STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_ADDR__DEPTH_0 = 64'h500568;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_ADDR__DEPTH_1 = 64'h500570;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_ADDR__DEPTH_2 = 64'h500578;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_ADDR__DEPTH_3 = 64'h500580;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CMD_VLD_OFFSET__DEPTH_0 = 64'h588;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CMD_VLD_OFFSET__DEPTH_1 = 64'h590;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CMD_VLD_OFFSET__DEPTH_2 = 64'h598;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CMD_VLD_OFFSET__DEPTH_3 = 64'h5a0;
  localparam int STATION_DMA_DMA_THREAD_CMD_VLD_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_DMA_DMA_THREAD_CMD_VLD_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CMD_VLD_ADDR__DEPTH_0 = 64'h500588;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CMD_VLD_ADDR__DEPTH_1 = 64'h500590;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CMD_VLD_ADDR__DEPTH_2 = 64'h500598;
  localparam bit [25 - 1:0] STATION_DMA_DMA_THREAD_CMD_VLD_ADDR__DEPTH_3 = 64'h5005a0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_FLUSH_CMD_VLD_OFFSET = 64'h5a8;
  localparam int STATION_DMA_DMA_FLUSH_CMD_VLD_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_DMA_DMA_FLUSH_CMD_VLD_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_DMA_FLUSH_CMD_VLD_ADDR = 64'h5005a8;
  localparam bit [25 - 1:0] STATION_DMA_B2S_THREAD0_INTR_OFFSET = 64'h5b0;
  localparam int STATION_DMA_B2S_THREAD0_INTR_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_DMA_B2S_THREAD0_INTR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_B2S_THREAD0_INTR_ADDR = 64'h5005b0;
  localparam bit [25 - 1:0] STATION_DMA_B2S_THREAD1_INTR_OFFSET = 64'h5b8;
  localparam int STATION_DMA_B2S_THREAD1_INTR_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_DMA_B2S_THREAD1_INTR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_B2S_THREAD1_INTR_ADDR = 64'h5005b8;
  localparam bit [25 - 1:0] STATION_DMA_B2S_THREAD2_INTR_OFFSET = 64'h5c0;
  localparam int STATION_DMA_B2S_THREAD2_INTR_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_DMA_B2S_THREAD2_INTR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_B2S_THREAD2_INTR_ADDR = 64'h5005c0;
  localparam bit [25 - 1:0] STATION_DMA_B2S_THREAD3_INTR_OFFSET = 64'h5c8;
  localparam int STATION_DMA_B2S_THREAD3_INTR_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_DMA_B2S_THREAD3_INTR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_DMA_B2S_THREAD3_INTR_ADDR = 64'h5005c8;
endpackage
`endif
`ifndef STATION_DMA__SV
`define STATION_DMA__SV
module station_dma
  import pygmy_cfg::*;
  import pygmy_typedef::*;
  import pygmy_intf_typedef::*;
  import station_dma_pkg::*;
  import plic_typedef::*;
  import pygmy_typedef::*;
  (
  output plic_intr_en_t [35 - 1 : 0] out_s2b_plic_intr_en,
  output plic_dbg_en_t [35 - 1 : 0] out_s2b_plic_dbg_en,
  output plic_intr_core_id_t [35 - 1 : 0] out_s2b_plic_intr_core_id,
  output plic_intr_src_t [5 - 1 : 0] out_b2s_plic_intr_src,
  output ring_addr_t [4 - 1 : 0] out_s2b_dma_thread_src_addr,
  output ring_addr_t [4 - 1 : 0] out_s2b_dma_thread_dst_addr,
  output dma_thread_align_t [4 - 1 : 0] out_s2b_dma_thread_use_8b_align,
  output dma_thread_rpt_cnt_t [4 - 1 : 0] out_s2b_dma_thread_rpt_cnt_less_1,
  output ring_data_t [4 - 1 : 0] out_s2b_dma_thread_length_in_bytes,
  output ring_addr_t [4 - 1 : 0] out_s2b_dma_thread_cbuf_size,
  output ring_addr_t [4 - 1 : 0] out_s2b_dma_thread_cbuf_thold,
  output ring_addr_t [4 - 1 : 0] out_dma_thread_cbuf_rp_addr,
  output ring_addr_t [4 - 1 : 0] out_dma_thread_cbuf_wp_addr,
  output ring_addr_t [4 - 1 : 0] out_s2b_dma_thread_gather_grpdepth,
  output ring_addr_t [4 - 1 : 0] out_s2b_dma_thread_gather_stride,
  output ring_addr_t out_s2b_dma_flush_addr,
  output dma_flush_type_t out_s2b_dma_flush_req_type,
  output [STATION_DMA_DMA_THREAD0_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0] out_dma_thread0_data_avail_src_sel,
  output [STATION_DMA_DMA_THREAD1_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0] out_dma_thread1_data_avail_src_sel,
  output [STATION_DMA_DMA_THREAD2_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0] out_dma_thread2_data_avail_src_sel,
  output [STATION_DMA_DMA_THREAD3_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0] out_dma_thread3_data_avail_src_sel,
  output out_s2icg_clk_en,
  output [4 - 1 : 0] out_s2b_dma_thread_cbuf_mode,
  output [4 - 1 : 0] out_b2s_dma_thread_idle,
  output [4 - 1 : 0] out_dma_thread_cbuf_full_seen,
  output dma_thread_cmd_vld_t [4 - 1 : 0] out_dma_thread_cmd_vld,
  output out_dma_flush_cmd_vld,
  output out_b2s_thread0_intr,
  output out_b2s_thread1_intr,
  output out_b2s_thread2_intr,
  output out_b2s_thread3_intr,
  input logic [5 - 1 : 0] vld_in_b2s_plic_intr_src,
  input plic_intr_src_t [5 - 1 : 0] in_b2s_plic_intr_src,
  input logic [4 - 1 : 0] vld_in_dma_thread_cbuf_rp_addr,
  input ring_addr_t [4 - 1 : 0] in_dma_thread_cbuf_rp_addr,
  input logic [4 - 1 : 0] vld_in_dma_thread_cbuf_wp_addr,
  input ring_addr_t [4 - 1 : 0] in_dma_thread_cbuf_wp_addr,
  input logic [4 - 1 : 0] vld_in_b2s_dma_thread_idle,
  input [4 - 1 : 0] in_b2s_dma_thread_idle,
  input logic [4 - 1 : 0] vld_in_dma_thread_cbuf_full_seen,
  input [4 - 1 : 0] in_dma_thread_cbuf_full_seen,
  input logic [4 - 1 : 0] vld_in_dma_thread_cmd_vld,
  input dma_thread_cmd_vld_t [4 - 1 : 0] in_dma_thread_cmd_vld,
  input logic vld_in_dma_flush_cmd_vld,
  input in_dma_flush_cmd_vld,
  input logic vld_in_b2s_thread0_intr,
  input in_b2s_thread0_intr,
  input logic vld_in_b2s_thread1_intr,
  input in_b2s_thread1_intr,
  input logic vld_in_b2s_thread2_intr,
  input in_b2s_thread2_intr,
  input logic vld_in_b2s_thread3_intr,
  input in_b2s_thread3_intr,
  input  logic                clk,
  input  logic                rstn,
  // i_req_ring_if & o_resp_ring_if
  output oursring_resp_if_b_t o_resp_ring_if_b,
  output oursring_resp_if_r_t o_resp_ring_if_r,
  output                      o_resp_ring_if_rvalid,
  input                       o_resp_ring_if_rready,
  output                      o_resp_ring_if_bvalid,
  input                       o_resp_ring_if_bready,
  input                       i_req_ring_if_awvalid,
  input                       i_req_ring_if_wvalid,
  input                       i_req_ring_if_arvalid,
  input  oursring_req_if_ar_t i_req_ring_if_ar,
  input  oursring_req_if_aw_t i_req_ring_if_aw,
  input  oursring_req_if_w_t  i_req_ring_if_w,
  output                      i_req_ring_if_arready,
  output                      i_req_ring_if_wready,
  output                      i_req_ring_if_awready,
  // o_req_ring_if & i_resp_ring_if
  input  oursring_resp_if_b_t i_resp_ring_if_b,
  input  oursring_resp_if_r_t i_resp_ring_if_r,
  input                       i_resp_ring_if_rvalid,
  output                      i_resp_ring_if_rready,
  input                       i_resp_ring_if_bvalid,
  output                      i_resp_ring_if_bready,
  output                      o_req_ring_if_awvalid,
  output                      o_req_ring_if_wvalid,
  output                      o_req_ring_if_arvalid,
  output oursring_req_if_ar_t o_req_ring_if_ar,
  output oursring_req_if_aw_t o_req_ring_if_aw,
  output oursring_req_if_w_t  o_req_ring_if_w,
  input                       o_req_ring_if_arready,
  input                       o_req_ring_if_wready,
  input                       o_req_ring_if_awready,
  // i_req_local_if & o_resp_local_if
  output oursring_resp_if_b_t o_resp_local_if_b,
  output oursring_resp_if_r_t o_resp_local_if_r,
  output                      o_resp_local_if_rvalid,
  input                       o_resp_local_if_rready,
  output                      o_resp_local_if_bvalid,
  input                       o_resp_local_if_bready,
  input                       i_req_local_if_awvalid,
  input                       i_req_local_if_wvalid,
  input                       i_req_local_if_arvalid,
  input  oursring_req_if_ar_t i_req_local_if_ar,
  input  oursring_req_if_aw_t i_req_local_if_aw,
  input  oursring_req_if_w_t  i_req_local_if_w,
  output                      i_req_local_if_arready,
  output                      i_req_local_if_wready,
  output                      i_req_local_if_awready,
  // o_req_local_if & i_resp_local_if
  input  oursring_resp_if_b_t i_resp_local_if_b,
  input  oursring_resp_if_r_t i_resp_local_if_r,
  input                       i_resp_local_if_rvalid,
  output                      i_resp_local_if_rready,
  input                       i_resp_local_if_bvalid,
  output                      i_resp_local_if_bready,
  output                      o_req_local_if_awvalid,
  output                      o_req_local_if_wvalid,
  output                      o_req_local_if_arvalid,
  output oursring_req_if_ar_t o_req_local_if_ar,
  output oursring_req_if_aw_t o_req_local_if_aw,
  output oursring_req_if_w_t  o_req_local_if_w,
  input                       o_req_local_if_arready,
  input                       o_req_local_if_wready,
  input                       o_req_local_if_awready
);
  localparam int                                STATION_ID_WIDTH_0 = STATION_DMA_BLKID_WIDTH;
  localparam logic [STATION_ID_WIDTH_0 - 1 : 0] LOCAL_STATION_ID_0 = STATION_DMA_BLKID;

  oursring_resp_if_b_t      station2brb_rsp_b;
  oursring_resp_if_r_t      station2brb_rsp_r;
  logic                     station2brb_rsp_rvalid;
  logic                     station2brb_rsp_rready;
  logic                     station2brb_rsp_bvalid;
  logic                     station2brb_rsp_bready;
  logic                     station2brb_req_awvalid;
  logic                     station2brb_req_wvalid;
  logic                     station2brb_req_arvalid;
  oursring_req_if_ar_t      station2brb_req_ar;
  oursring_req_if_aw_t      station2brb_req_aw;
  oursring_req_if_w_t       station2brb_req_w;
  logic                     station2brb_req_arready;
  logic                     station2brb_req_wready;
  logic                     station2brb_req_awready;

  oursring_station #(.STATION_ID_WIDTH_0(STATION_ID_WIDTH_0), .LOCAL_STATION_ID_0(LOCAL_STATION_ID_0), .RING_ADDR_WIDTH(STATION_DMA_RING_ADDR_WIDTH), .MAX_RING_ADDR(STATION_DMA_MAX_RING_ADDR)) station_u (

    .i_req_local_if_ar      (i_req_local_if_ar), 
    .i_req_local_if_awvalid (i_req_local_if_awvalid), 
    .i_req_local_if_awready (i_req_local_if_awready), 
    .i_req_local_if_wvalid  (i_req_local_if_wvalid), 
    .i_req_local_if_wready  (i_req_local_if_wready), 
    .i_req_local_if_arvalid (i_req_local_if_arvalid), 
    .i_req_local_if_arready (i_req_local_if_arready), 
    .i_req_local_if_w       (i_req_local_if_w), 
    .i_req_local_if_aw      (i_req_local_if_aw),
    .i_req_ring_if_ar       (i_req_ring_if_ar), 
    .i_req_ring_if_awvalid  (i_req_ring_if_awvalid), 
    .i_req_ring_if_awready  (i_req_ring_if_awready), 
    .i_req_ring_if_wvalid   (i_req_ring_if_wvalid), 
    .i_req_ring_if_wready   (i_req_ring_if_wready), 
    .i_req_ring_if_arvalid  (i_req_ring_if_arvalid), 
    .i_req_ring_if_arready  (i_req_ring_if_arready), 
    .i_req_ring_if_w        (i_req_ring_if_w), 
    .i_req_ring_if_aw       (i_req_ring_if_aw),
    .o_req_local_if_ar      (station2brb_req_ar), 
    .o_req_local_if_awvalid (station2brb_req_awvalid), 
    .o_req_local_if_awready (station2brb_req_awready), 
    .o_req_local_if_wvalid  (station2brb_req_wvalid), 
    .o_req_local_if_wready  (station2brb_req_wready), 
    .o_req_local_if_arvalid (station2brb_req_arvalid), 
    .o_req_local_if_arready (station2brb_req_arready), 
    .o_req_local_if_w       (station2brb_req_w), 
    .o_req_local_if_aw      (station2brb_req_aw),
    .o_req_ring_if_ar       (o_req_ring_if_ar), 
    .o_req_ring_if_awvalid  (o_req_ring_if_awvalid), 
    .o_req_ring_if_awready  (o_req_ring_if_awready), 
    .o_req_ring_if_wvalid   (o_req_ring_if_wvalid), 
    .o_req_ring_if_wready   (o_req_ring_if_wready), 
    .o_req_ring_if_arvalid  (o_req_ring_if_arvalid), 
    .o_req_ring_if_arready  (o_req_ring_if_arready), 
    .o_req_ring_if_w        (o_req_ring_if_w), 
    .o_req_ring_if_aw       (o_req_ring_if_aw),
    .i_resp_local_if_b      (station2brb_rsp_b), 
    .i_resp_local_if_r      (station2brb_rsp_r), 
    .i_resp_local_if_rvalid (station2brb_rsp_rvalid), 
    .i_resp_local_if_rready (station2brb_rsp_rready), 
    .i_resp_local_if_bvalid (station2brb_rsp_bvalid), 
    .i_resp_local_if_bready (station2brb_rsp_bready),
    .i_resp_ring_if_b       (i_resp_ring_if_b), 
    .i_resp_ring_if_r       (i_resp_ring_if_r), 
    .i_resp_ring_if_rvalid  (i_resp_ring_if_rvalid), 
    .i_resp_ring_if_rready  (i_resp_ring_if_rready), 
    .i_resp_ring_if_bvalid  (i_resp_ring_if_bvalid), 
    .i_resp_ring_if_bready  (i_resp_ring_if_bready),
    .o_resp_local_if_b      (o_resp_local_if_b), 
    .o_resp_local_if_r      (o_resp_local_if_r), 
    .o_resp_local_if_rvalid (o_resp_local_if_rvalid), 
    .o_resp_local_if_rready (o_resp_local_if_rready), 
    .o_resp_local_if_bvalid (o_resp_local_if_bvalid), 
    .o_resp_local_if_bready (o_resp_local_if_bready),
    .o_resp_ring_if_b       (o_resp_ring_if_b), 
    .o_resp_ring_if_r       (o_resp_ring_if_r), 
    .o_resp_ring_if_rvalid  (o_resp_ring_if_rvalid), 
    .o_resp_ring_if_rready  (o_resp_ring_if_rready), 
    .o_resp_ring_if_bvalid  (o_resp_ring_if_bvalid), 
    .o_resp_ring_if_bready  (o_resp_ring_if_bready),
    .clk                    (clk),
    .rstn                   (rstn)
    );

  ring_data_t wmask, wmask_inv;
  generate
    for (genvar i = 0; i < $bits(ring_strb_t); i++) begin : WMASK_GEN
      assign wmask[i * 8 +: 8]      = (station2brb_req_w.wstrb[i]) ? 8'hff : 8'h00;
      assign wmask_inv[i * 8 +: 8]  = (station2brb_req_w.wstrb[i]) ? 8'h00 : 8'hff;
    end
  endgenerate

  plic_intr_en_t [35 - 1 : 0] rff_s2b_plic_intr_en;
  plic_intr_en_t [35 - 1 : 0] s2b_plic_intr_en;
  logic [35 - 1 : 0] load_s2b_plic_intr_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[0] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[0] == 1'b1) begin
      rff_s2b_plic_intr_en[0] <= (wmask & s2b_plic_intr_en[0]) | (wmask_inv & rff_s2b_plic_intr_en[0]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[1] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[1] == 1'b1) begin
      rff_s2b_plic_intr_en[1] <= (wmask & s2b_plic_intr_en[1]) | (wmask_inv & rff_s2b_plic_intr_en[1]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[2] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[2] == 1'b1) begin
      rff_s2b_plic_intr_en[2] <= (wmask & s2b_plic_intr_en[2]) | (wmask_inv & rff_s2b_plic_intr_en[2]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[3] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[3] == 1'b1) begin
      rff_s2b_plic_intr_en[3] <= (wmask & s2b_plic_intr_en[3]) | (wmask_inv & rff_s2b_plic_intr_en[3]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[4] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[4] == 1'b1) begin
      rff_s2b_plic_intr_en[4] <= (wmask & s2b_plic_intr_en[4]) | (wmask_inv & rff_s2b_plic_intr_en[4]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[5] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[5] == 1'b1) begin
      rff_s2b_plic_intr_en[5] <= (wmask & s2b_plic_intr_en[5]) | (wmask_inv & rff_s2b_plic_intr_en[5]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[6] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[6] == 1'b1) begin
      rff_s2b_plic_intr_en[6] <= (wmask & s2b_plic_intr_en[6]) | (wmask_inv & rff_s2b_plic_intr_en[6]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[7] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[7] == 1'b1) begin
      rff_s2b_plic_intr_en[7] <= (wmask & s2b_plic_intr_en[7]) | (wmask_inv & rff_s2b_plic_intr_en[7]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[8] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[8] == 1'b1) begin
      rff_s2b_plic_intr_en[8] <= (wmask & s2b_plic_intr_en[8]) | (wmask_inv & rff_s2b_plic_intr_en[8]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[9] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[9] == 1'b1) begin
      rff_s2b_plic_intr_en[9] <= (wmask & s2b_plic_intr_en[9]) | (wmask_inv & rff_s2b_plic_intr_en[9]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[10] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[10] == 1'b1) begin
      rff_s2b_plic_intr_en[10] <= (wmask & s2b_plic_intr_en[10]) | (wmask_inv & rff_s2b_plic_intr_en[10]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[11] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[11] == 1'b1) begin
      rff_s2b_plic_intr_en[11] <= (wmask & s2b_plic_intr_en[11]) | (wmask_inv & rff_s2b_plic_intr_en[11]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[12] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[12] == 1'b1) begin
      rff_s2b_plic_intr_en[12] <= (wmask & s2b_plic_intr_en[12]) | (wmask_inv & rff_s2b_plic_intr_en[12]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[13] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[13] == 1'b1) begin
      rff_s2b_plic_intr_en[13] <= (wmask & s2b_plic_intr_en[13]) | (wmask_inv & rff_s2b_plic_intr_en[13]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[14] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[14] == 1'b1) begin
      rff_s2b_plic_intr_en[14] <= (wmask & s2b_plic_intr_en[14]) | (wmask_inv & rff_s2b_plic_intr_en[14]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[15] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[15] == 1'b1) begin
      rff_s2b_plic_intr_en[15] <= (wmask & s2b_plic_intr_en[15]) | (wmask_inv & rff_s2b_plic_intr_en[15]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[16] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[16] == 1'b1) begin
      rff_s2b_plic_intr_en[16] <= (wmask & s2b_plic_intr_en[16]) | (wmask_inv & rff_s2b_plic_intr_en[16]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[17] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[17] == 1'b1) begin
      rff_s2b_plic_intr_en[17] <= (wmask & s2b_plic_intr_en[17]) | (wmask_inv & rff_s2b_plic_intr_en[17]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[18] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[18] == 1'b1) begin
      rff_s2b_plic_intr_en[18] <= (wmask & s2b_plic_intr_en[18]) | (wmask_inv & rff_s2b_plic_intr_en[18]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[19] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[19] == 1'b1) begin
      rff_s2b_plic_intr_en[19] <= (wmask & s2b_plic_intr_en[19]) | (wmask_inv & rff_s2b_plic_intr_en[19]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[20] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[20] == 1'b1) begin
      rff_s2b_plic_intr_en[20] <= (wmask & s2b_plic_intr_en[20]) | (wmask_inv & rff_s2b_plic_intr_en[20]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[21] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[21] == 1'b1) begin
      rff_s2b_plic_intr_en[21] <= (wmask & s2b_plic_intr_en[21]) | (wmask_inv & rff_s2b_plic_intr_en[21]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[22] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[22] == 1'b1) begin
      rff_s2b_plic_intr_en[22] <= (wmask & s2b_plic_intr_en[22]) | (wmask_inv & rff_s2b_plic_intr_en[22]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[23] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[23] == 1'b1) begin
      rff_s2b_plic_intr_en[23] <= (wmask & s2b_plic_intr_en[23]) | (wmask_inv & rff_s2b_plic_intr_en[23]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[24] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[24] == 1'b1) begin
      rff_s2b_plic_intr_en[24] <= (wmask & s2b_plic_intr_en[24]) | (wmask_inv & rff_s2b_plic_intr_en[24]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[25] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[25] == 1'b1) begin
      rff_s2b_plic_intr_en[25] <= (wmask & s2b_plic_intr_en[25]) | (wmask_inv & rff_s2b_plic_intr_en[25]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[26] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[26] == 1'b1) begin
      rff_s2b_plic_intr_en[26] <= (wmask & s2b_plic_intr_en[26]) | (wmask_inv & rff_s2b_plic_intr_en[26]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[27] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[27] == 1'b1) begin
      rff_s2b_plic_intr_en[27] <= (wmask & s2b_plic_intr_en[27]) | (wmask_inv & rff_s2b_plic_intr_en[27]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[28] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[28] == 1'b1) begin
      rff_s2b_plic_intr_en[28] <= (wmask & s2b_plic_intr_en[28]) | (wmask_inv & rff_s2b_plic_intr_en[28]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[29] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[29] == 1'b1) begin
      rff_s2b_plic_intr_en[29] <= (wmask & s2b_plic_intr_en[29]) | (wmask_inv & rff_s2b_plic_intr_en[29]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[30] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[30] == 1'b1) begin
      rff_s2b_plic_intr_en[30] <= (wmask & s2b_plic_intr_en[30]) | (wmask_inv & rff_s2b_plic_intr_en[30]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[31] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[31] == 1'b1) begin
      rff_s2b_plic_intr_en[31] <= (wmask & s2b_plic_intr_en[31]) | (wmask_inv & rff_s2b_plic_intr_en[31]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[32] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[32] == 1'b1) begin
      rff_s2b_plic_intr_en[32] <= (wmask & s2b_plic_intr_en[32]) | (wmask_inv & rff_s2b_plic_intr_en[32]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[33] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[33] == 1'b1) begin
      rff_s2b_plic_intr_en[33] <= (wmask & s2b_plic_intr_en[33]) | (wmask_inv & rff_s2b_plic_intr_en[33]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_en[34] <= plic_intr_en_t'(STATION_DMA_S2B_PLIC_INTR_EN_RSTVAL);
    end else if (load_s2b_plic_intr_en[34] == 1'b1) begin
      rff_s2b_plic_intr_en[34] <= (wmask & s2b_plic_intr_en[34]) | (wmask_inv & rff_s2b_plic_intr_en[34]);
    end
  end
  assign out_s2b_plic_intr_en = rff_s2b_plic_intr_en;
  plic_dbg_en_t [35 - 1 : 0] rff_s2b_plic_dbg_en;
  plic_dbg_en_t [35 - 1 : 0] s2b_plic_dbg_en;
  logic [35 - 1 : 0] load_s2b_plic_dbg_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[0] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[0] == 1'b1) begin
      rff_s2b_plic_dbg_en[0] <= (wmask & s2b_plic_dbg_en[0]) | (wmask_inv & rff_s2b_plic_dbg_en[0]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[1] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[1] == 1'b1) begin
      rff_s2b_plic_dbg_en[1] <= (wmask & s2b_plic_dbg_en[1]) | (wmask_inv & rff_s2b_plic_dbg_en[1]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[2] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[2] == 1'b1) begin
      rff_s2b_plic_dbg_en[2] <= (wmask & s2b_plic_dbg_en[2]) | (wmask_inv & rff_s2b_plic_dbg_en[2]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[3] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[3] == 1'b1) begin
      rff_s2b_plic_dbg_en[3] <= (wmask & s2b_plic_dbg_en[3]) | (wmask_inv & rff_s2b_plic_dbg_en[3]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[4] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[4] == 1'b1) begin
      rff_s2b_plic_dbg_en[4] <= (wmask & s2b_plic_dbg_en[4]) | (wmask_inv & rff_s2b_plic_dbg_en[4]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[5] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[5] == 1'b1) begin
      rff_s2b_plic_dbg_en[5] <= (wmask & s2b_plic_dbg_en[5]) | (wmask_inv & rff_s2b_plic_dbg_en[5]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[6] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[6] == 1'b1) begin
      rff_s2b_plic_dbg_en[6] <= (wmask & s2b_plic_dbg_en[6]) | (wmask_inv & rff_s2b_plic_dbg_en[6]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[7] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[7] == 1'b1) begin
      rff_s2b_plic_dbg_en[7] <= (wmask & s2b_plic_dbg_en[7]) | (wmask_inv & rff_s2b_plic_dbg_en[7]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[8] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[8] == 1'b1) begin
      rff_s2b_plic_dbg_en[8] <= (wmask & s2b_plic_dbg_en[8]) | (wmask_inv & rff_s2b_plic_dbg_en[8]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[9] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[9] == 1'b1) begin
      rff_s2b_plic_dbg_en[9] <= (wmask & s2b_plic_dbg_en[9]) | (wmask_inv & rff_s2b_plic_dbg_en[9]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[10] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[10] == 1'b1) begin
      rff_s2b_plic_dbg_en[10] <= (wmask & s2b_plic_dbg_en[10]) | (wmask_inv & rff_s2b_plic_dbg_en[10]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[11] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[11] == 1'b1) begin
      rff_s2b_plic_dbg_en[11] <= (wmask & s2b_plic_dbg_en[11]) | (wmask_inv & rff_s2b_plic_dbg_en[11]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[12] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[12] == 1'b1) begin
      rff_s2b_plic_dbg_en[12] <= (wmask & s2b_plic_dbg_en[12]) | (wmask_inv & rff_s2b_plic_dbg_en[12]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[13] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[13] == 1'b1) begin
      rff_s2b_plic_dbg_en[13] <= (wmask & s2b_plic_dbg_en[13]) | (wmask_inv & rff_s2b_plic_dbg_en[13]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[14] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[14] == 1'b1) begin
      rff_s2b_plic_dbg_en[14] <= (wmask & s2b_plic_dbg_en[14]) | (wmask_inv & rff_s2b_plic_dbg_en[14]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[15] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[15] == 1'b1) begin
      rff_s2b_plic_dbg_en[15] <= (wmask & s2b_plic_dbg_en[15]) | (wmask_inv & rff_s2b_plic_dbg_en[15]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[16] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[16] == 1'b1) begin
      rff_s2b_plic_dbg_en[16] <= (wmask & s2b_plic_dbg_en[16]) | (wmask_inv & rff_s2b_plic_dbg_en[16]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[17] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[17] == 1'b1) begin
      rff_s2b_plic_dbg_en[17] <= (wmask & s2b_plic_dbg_en[17]) | (wmask_inv & rff_s2b_plic_dbg_en[17]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[18] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[18] == 1'b1) begin
      rff_s2b_plic_dbg_en[18] <= (wmask & s2b_plic_dbg_en[18]) | (wmask_inv & rff_s2b_plic_dbg_en[18]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[19] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[19] == 1'b1) begin
      rff_s2b_plic_dbg_en[19] <= (wmask & s2b_plic_dbg_en[19]) | (wmask_inv & rff_s2b_plic_dbg_en[19]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[20] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[20] == 1'b1) begin
      rff_s2b_plic_dbg_en[20] <= (wmask & s2b_plic_dbg_en[20]) | (wmask_inv & rff_s2b_plic_dbg_en[20]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[21] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[21] == 1'b1) begin
      rff_s2b_plic_dbg_en[21] <= (wmask & s2b_plic_dbg_en[21]) | (wmask_inv & rff_s2b_plic_dbg_en[21]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[22] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[22] == 1'b1) begin
      rff_s2b_plic_dbg_en[22] <= (wmask & s2b_plic_dbg_en[22]) | (wmask_inv & rff_s2b_plic_dbg_en[22]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[23] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[23] == 1'b1) begin
      rff_s2b_plic_dbg_en[23] <= (wmask & s2b_plic_dbg_en[23]) | (wmask_inv & rff_s2b_plic_dbg_en[23]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[24] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[24] == 1'b1) begin
      rff_s2b_plic_dbg_en[24] <= (wmask & s2b_plic_dbg_en[24]) | (wmask_inv & rff_s2b_plic_dbg_en[24]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[25] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[25] == 1'b1) begin
      rff_s2b_plic_dbg_en[25] <= (wmask & s2b_plic_dbg_en[25]) | (wmask_inv & rff_s2b_plic_dbg_en[25]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[26] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[26] == 1'b1) begin
      rff_s2b_plic_dbg_en[26] <= (wmask & s2b_plic_dbg_en[26]) | (wmask_inv & rff_s2b_plic_dbg_en[26]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[27] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[27] == 1'b1) begin
      rff_s2b_plic_dbg_en[27] <= (wmask & s2b_plic_dbg_en[27]) | (wmask_inv & rff_s2b_plic_dbg_en[27]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[28] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[28] == 1'b1) begin
      rff_s2b_plic_dbg_en[28] <= (wmask & s2b_plic_dbg_en[28]) | (wmask_inv & rff_s2b_plic_dbg_en[28]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[29] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[29] == 1'b1) begin
      rff_s2b_plic_dbg_en[29] <= (wmask & s2b_plic_dbg_en[29]) | (wmask_inv & rff_s2b_plic_dbg_en[29]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[30] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[30] == 1'b1) begin
      rff_s2b_plic_dbg_en[30] <= (wmask & s2b_plic_dbg_en[30]) | (wmask_inv & rff_s2b_plic_dbg_en[30]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[31] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[31] == 1'b1) begin
      rff_s2b_plic_dbg_en[31] <= (wmask & s2b_plic_dbg_en[31]) | (wmask_inv & rff_s2b_plic_dbg_en[31]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[32] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[32] == 1'b1) begin
      rff_s2b_plic_dbg_en[32] <= (wmask & s2b_plic_dbg_en[32]) | (wmask_inv & rff_s2b_plic_dbg_en[32]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[33] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[33] == 1'b1) begin
      rff_s2b_plic_dbg_en[33] <= (wmask & s2b_plic_dbg_en[33]) | (wmask_inv & rff_s2b_plic_dbg_en[33]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_dbg_en[34] <= plic_dbg_en_t'(STATION_DMA_S2B_PLIC_DBG_EN_RSTVAL);
    end else if (load_s2b_plic_dbg_en[34] == 1'b1) begin
      rff_s2b_plic_dbg_en[34] <= (wmask & s2b_plic_dbg_en[34]) | (wmask_inv & rff_s2b_plic_dbg_en[34]);
    end
  end
  assign out_s2b_plic_dbg_en = rff_s2b_plic_dbg_en;
  plic_intr_core_id_t [35 - 1 : 0] rff_s2b_plic_intr_core_id;
  plic_intr_core_id_t [35 - 1 : 0] s2b_plic_intr_core_id;
  logic [35 - 1 : 0] load_s2b_plic_intr_core_id;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[0] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[0] == 1'b1) begin
      rff_s2b_plic_intr_core_id[0] <= (wmask & s2b_plic_intr_core_id[0]) | (wmask_inv & rff_s2b_plic_intr_core_id[0]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[1] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[1] == 1'b1) begin
      rff_s2b_plic_intr_core_id[1] <= (wmask & s2b_plic_intr_core_id[1]) | (wmask_inv & rff_s2b_plic_intr_core_id[1]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[2] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[2] == 1'b1) begin
      rff_s2b_plic_intr_core_id[2] <= (wmask & s2b_plic_intr_core_id[2]) | (wmask_inv & rff_s2b_plic_intr_core_id[2]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[3] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[3] == 1'b1) begin
      rff_s2b_plic_intr_core_id[3] <= (wmask & s2b_plic_intr_core_id[3]) | (wmask_inv & rff_s2b_plic_intr_core_id[3]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[4] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[4] == 1'b1) begin
      rff_s2b_plic_intr_core_id[4] <= (wmask & s2b_plic_intr_core_id[4]) | (wmask_inv & rff_s2b_plic_intr_core_id[4]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[5] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[5] == 1'b1) begin
      rff_s2b_plic_intr_core_id[5] <= (wmask & s2b_plic_intr_core_id[5]) | (wmask_inv & rff_s2b_plic_intr_core_id[5]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[6] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[6] == 1'b1) begin
      rff_s2b_plic_intr_core_id[6] <= (wmask & s2b_plic_intr_core_id[6]) | (wmask_inv & rff_s2b_plic_intr_core_id[6]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[7] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[7] == 1'b1) begin
      rff_s2b_plic_intr_core_id[7] <= (wmask & s2b_plic_intr_core_id[7]) | (wmask_inv & rff_s2b_plic_intr_core_id[7]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[8] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[8] == 1'b1) begin
      rff_s2b_plic_intr_core_id[8] <= (wmask & s2b_plic_intr_core_id[8]) | (wmask_inv & rff_s2b_plic_intr_core_id[8]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[9] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[9] == 1'b1) begin
      rff_s2b_plic_intr_core_id[9] <= (wmask & s2b_plic_intr_core_id[9]) | (wmask_inv & rff_s2b_plic_intr_core_id[9]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[10] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[10] == 1'b1) begin
      rff_s2b_plic_intr_core_id[10] <= (wmask & s2b_plic_intr_core_id[10]) | (wmask_inv & rff_s2b_plic_intr_core_id[10]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[11] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[11] == 1'b1) begin
      rff_s2b_plic_intr_core_id[11] <= (wmask & s2b_plic_intr_core_id[11]) | (wmask_inv & rff_s2b_plic_intr_core_id[11]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[12] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[12] == 1'b1) begin
      rff_s2b_plic_intr_core_id[12] <= (wmask & s2b_plic_intr_core_id[12]) | (wmask_inv & rff_s2b_plic_intr_core_id[12]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[13] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[13] == 1'b1) begin
      rff_s2b_plic_intr_core_id[13] <= (wmask & s2b_plic_intr_core_id[13]) | (wmask_inv & rff_s2b_plic_intr_core_id[13]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[14] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[14] == 1'b1) begin
      rff_s2b_plic_intr_core_id[14] <= (wmask & s2b_plic_intr_core_id[14]) | (wmask_inv & rff_s2b_plic_intr_core_id[14]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[15] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[15] == 1'b1) begin
      rff_s2b_plic_intr_core_id[15] <= (wmask & s2b_plic_intr_core_id[15]) | (wmask_inv & rff_s2b_plic_intr_core_id[15]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[16] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[16] == 1'b1) begin
      rff_s2b_plic_intr_core_id[16] <= (wmask & s2b_plic_intr_core_id[16]) | (wmask_inv & rff_s2b_plic_intr_core_id[16]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[17] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[17] == 1'b1) begin
      rff_s2b_plic_intr_core_id[17] <= (wmask & s2b_plic_intr_core_id[17]) | (wmask_inv & rff_s2b_plic_intr_core_id[17]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[18] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[18] == 1'b1) begin
      rff_s2b_plic_intr_core_id[18] <= (wmask & s2b_plic_intr_core_id[18]) | (wmask_inv & rff_s2b_plic_intr_core_id[18]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[19] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[19] == 1'b1) begin
      rff_s2b_plic_intr_core_id[19] <= (wmask & s2b_plic_intr_core_id[19]) | (wmask_inv & rff_s2b_plic_intr_core_id[19]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[20] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[20] == 1'b1) begin
      rff_s2b_plic_intr_core_id[20] <= (wmask & s2b_plic_intr_core_id[20]) | (wmask_inv & rff_s2b_plic_intr_core_id[20]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[21] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[21] == 1'b1) begin
      rff_s2b_plic_intr_core_id[21] <= (wmask & s2b_plic_intr_core_id[21]) | (wmask_inv & rff_s2b_plic_intr_core_id[21]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[22] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[22] == 1'b1) begin
      rff_s2b_plic_intr_core_id[22] <= (wmask & s2b_plic_intr_core_id[22]) | (wmask_inv & rff_s2b_plic_intr_core_id[22]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[23] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[23] == 1'b1) begin
      rff_s2b_plic_intr_core_id[23] <= (wmask & s2b_plic_intr_core_id[23]) | (wmask_inv & rff_s2b_plic_intr_core_id[23]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[24] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[24] == 1'b1) begin
      rff_s2b_plic_intr_core_id[24] <= (wmask & s2b_plic_intr_core_id[24]) | (wmask_inv & rff_s2b_plic_intr_core_id[24]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[25] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[25] == 1'b1) begin
      rff_s2b_plic_intr_core_id[25] <= (wmask & s2b_plic_intr_core_id[25]) | (wmask_inv & rff_s2b_plic_intr_core_id[25]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[26] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[26] == 1'b1) begin
      rff_s2b_plic_intr_core_id[26] <= (wmask & s2b_plic_intr_core_id[26]) | (wmask_inv & rff_s2b_plic_intr_core_id[26]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[27] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[27] == 1'b1) begin
      rff_s2b_plic_intr_core_id[27] <= (wmask & s2b_plic_intr_core_id[27]) | (wmask_inv & rff_s2b_plic_intr_core_id[27]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[28] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[28] == 1'b1) begin
      rff_s2b_plic_intr_core_id[28] <= (wmask & s2b_plic_intr_core_id[28]) | (wmask_inv & rff_s2b_plic_intr_core_id[28]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[29] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[29] == 1'b1) begin
      rff_s2b_plic_intr_core_id[29] <= (wmask & s2b_plic_intr_core_id[29]) | (wmask_inv & rff_s2b_plic_intr_core_id[29]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[30] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[30] == 1'b1) begin
      rff_s2b_plic_intr_core_id[30] <= (wmask & s2b_plic_intr_core_id[30]) | (wmask_inv & rff_s2b_plic_intr_core_id[30]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[31] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[31] == 1'b1) begin
      rff_s2b_plic_intr_core_id[31] <= (wmask & s2b_plic_intr_core_id[31]) | (wmask_inv & rff_s2b_plic_intr_core_id[31]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[32] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[32] == 1'b1) begin
      rff_s2b_plic_intr_core_id[32] <= (wmask & s2b_plic_intr_core_id[32]) | (wmask_inv & rff_s2b_plic_intr_core_id[32]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[33] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[33] == 1'b1) begin
      rff_s2b_plic_intr_core_id[33] <= (wmask & s2b_plic_intr_core_id[33]) | (wmask_inv & rff_s2b_plic_intr_core_id[33]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_plic_intr_core_id[34] <= plic_intr_core_id_t'(STATION_DMA_S2B_PLIC_INTR_CORE_ID_RSTVAL);
    end else if (load_s2b_plic_intr_core_id[34] == 1'b1) begin
      rff_s2b_plic_intr_core_id[34] <= (wmask & s2b_plic_intr_core_id[34]) | (wmask_inv & rff_s2b_plic_intr_core_id[34]);
    end
  end
  assign out_s2b_plic_intr_core_id = rff_s2b_plic_intr_core_id;
  plic_intr_src_t [5 - 1 : 0] rff_b2s_plic_intr_src;
  plic_intr_src_t [5 - 1 : 0] b2s_plic_intr_src;
  logic [5 - 1 : 0] load_b2s_plic_intr_src;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_plic_intr_src[0] <= plic_intr_src_t'(STATION_DMA_B2S_PLIC_INTR_SRC_RSTVAL);
    end else if (load_b2s_plic_intr_src[0] == 1'b1) begin
      rff_b2s_plic_intr_src[0] <= (wmask & b2s_plic_intr_src[0]) | (wmask_inv & rff_b2s_plic_intr_src[0]);

    end else if (vld_in_b2s_plic_intr_src[0] == 1'b1) begin
      rff_b2s_plic_intr_src[0] <= in_b2s_plic_intr_src[0];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_plic_intr_src[1] <= plic_intr_src_t'(STATION_DMA_B2S_PLIC_INTR_SRC_RSTVAL);
    end else if (load_b2s_plic_intr_src[1] == 1'b1) begin
      rff_b2s_plic_intr_src[1] <= (wmask & b2s_plic_intr_src[1]) | (wmask_inv & rff_b2s_plic_intr_src[1]);

    end else if (vld_in_b2s_plic_intr_src[1] == 1'b1) begin
      rff_b2s_plic_intr_src[1] <= in_b2s_plic_intr_src[1];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_plic_intr_src[2] <= plic_intr_src_t'(STATION_DMA_B2S_PLIC_INTR_SRC_RSTVAL);
    end else if (load_b2s_plic_intr_src[2] == 1'b1) begin
      rff_b2s_plic_intr_src[2] <= (wmask & b2s_plic_intr_src[2]) | (wmask_inv & rff_b2s_plic_intr_src[2]);

    end else if (vld_in_b2s_plic_intr_src[2] == 1'b1) begin
      rff_b2s_plic_intr_src[2] <= in_b2s_plic_intr_src[2];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_plic_intr_src[3] <= plic_intr_src_t'(STATION_DMA_B2S_PLIC_INTR_SRC_RSTVAL);
    end else if (load_b2s_plic_intr_src[3] == 1'b1) begin
      rff_b2s_plic_intr_src[3] <= (wmask & b2s_plic_intr_src[3]) | (wmask_inv & rff_b2s_plic_intr_src[3]);

    end else if (vld_in_b2s_plic_intr_src[3] == 1'b1) begin
      rff_b2s_plic_intr_src[3] <= in_b2s_plic_intr_src[3];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_plic_intr_src[4] <= plic_intr_src_t'(STATION_DMA_B2S_PLIC_INTR_SRC_RSTVAL);
    end else if (load_b2s_plic_intr_src[4] == 1'b1) begin
      rff_b2s_plic_intr_src[4] <= (wmask & b2s_plic_intr_src[4]) | (wmask_inv & rff_b2s_plic_intr_src[4]);

    end else if (vld_in_b2s_plic_intr_src[4] == 1'b1) begin
      rff_b2s_plic_intr_src[4] <= in_b2s_plic_intr_src[4];
    end
  end
  assign out_b2s_plic_intr_src = rff_b2s_plic_intr_src;
  ring_addr_t [4 - 1 : 0] rff_s2b_dma_thread_src_addr;
  ring_addr_t [4 - 1 : 0] s2b_dma_thread_src_addr;
  logic [4 - 1 : 0] load_s2b_dma_thread_src_addr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_src_addr[0] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_RSTVAL);
    end else if (load_s2b_dma_thread_src_addr[0] == 1'b1) begin
      rff_s2b_dma_thread_src_addr[0] <= (wmask & s2b_dma_thread_src_addr[0]) | (wmask_inv & rff_s2b_dma_thread_src_addr[0]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_src_addr[1] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_RSTVAL);
    end else if (load_s2b_dma_thread_src_addr[1] == 1'b1) begin
      rff_s2b_dma_thread_src_addr[1] <= (wmask & s2b_dma_thread_src_addr[1]) | (wmask_inv & rff_s2b_dma_thread_src_addr[1]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_src_addr[2] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_RSTVAL);
    end else if (load_s2b_dma_thread_src_addr[2] == 1'b1) begin
      rff_s2b_dma_thread_src_addr[2] <= (wmask & s2b_dma_thread_src_addr[2]) | (wmask_inv & rff_s2b_dma_thread_src_addr[2]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_src_addr[3] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_RSTVAL);
    end else if (load_s2b_dma_thread_src_addr[3] == 1'b1) begin
      rff_s2b_dma_thread_src_addr[3] <= (wmask & s2b_dma_thread_src_addr[3]) | (wmask_inv & rff_s2b_dma_thread_src_addr[3]);
    end
  end
  assign out_s2b_dma_thread_src_addr = rff_s2b_dma_thread_src_addr;
  ring_addr_t [4 - 1 : 0] rff_s2b_dma_thread_dst_addr;
  ring_addr_t [4 - 1 : 0] s2b_dma_thread_dst_addr;
  logic [4 - 1 : 0] load_s2b_dma_thread_dst_addr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_dst_addr[0] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_DST_ADDR_RSTVAL);
    end else if (load_s2b_dma_thread_dst_addr[0] == 1'b1) begin
      rff_s2b_dma_thread_dst_addr[0] <= (wmask & s2b_dma_thread_dst_addr[0]) | (wmask_inv & rff_s2b_dma_thread_dst_addr[0]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_dst_addr[1] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_DST_ADDR_RSTVAL);
    end else if (load_s2b_dma_thread_dst_addr[1] == 1'b1) begin
      rff_s2b_dma_thread_dst_addr[1] <= (wmask & s2b_dma_thread_dst_addr[1]) | (wmask_inv & rff_s2b_dma_thread_dst_addr[1]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_dst_addr[2] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_DST_ADDR_RSTVAL);
    end else if (load_s2b_dma_thread_dst_addr[2] == 1'b1) begin
      rff_s2b_dma_thread_dst_addr[2] <= (wmask & s2b_dma_thread_dst_addr[2]) | (wmask_inv & rff_s2b_dma_thread_dst_addr[2]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_dst_addr[3] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_DST_ADDR_RSTVAL);
    end else if (load_s2b_dma_thread_dst_addr[3] == 1'b1) begin
      rff_s2b_dma_thread_dst_addr[3] <= (wmask & s2b_dma_thread_dst_addr[3]) | (wmask_inv & rff_s2b_dma_thread_dst_addr[3]);
    end
  end
  assign out_s2b_dma_thread_dst_addr = rff_s2b_dma_thread_dst_addr;
  dma_thread_align_t [4 - 1 : 0] rff_s2b_dma_thread_use_8b_align;
  dma_thread_align_t [4 - 1 : 0] s2b_dma_thread_use_8b_align;
  logic [4 - 1 : 0] load_s2b_dma_thread_use_8b_align;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_use_8b_align[0] <= dma_thread_align_t'(STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_RSTVAL);
    end else if (load_s2b_dma_thread_use_8b_align[0] == 1'b1) begin
      rff_s2b_dma_thread_use_8b_align[0] <= (wmask & s2b_dma_thread_use_8b_align[0]) | (wmask_inv & rff_s2b_dma_thread_use_8b_align[0]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_use_8b_align[1] <= dma_thread_align_t'(STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_RSTVAL);
    end else if (load_s2b_dma_thread_use_8b_align[1] == 1'b1) begin
      rff_s2b_dma_thread_use_8b_align[1] <= (wmask & s2b_dma_thread_use_8b_align[1]) | (wmask_inv & rff_s2b_dma_thread_use_8b_align[1]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_use_8b_align[2] <= dma_thread_align_t'(STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_RSTVAL);
    end else if (load_s2b_dma_thread_use_8b_align[2] == 1'b1) begin
      rff_s2b_dma_thread_use_8b_align[2] <= (wmask & s2b_dma_thread_use_8b_align[2]) | (wmask_inv & rff_s2b_dma_thread_use_8b_align[2]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_use_8b_align[3] <= dma_thread_align_t'(STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_RSTVAL);
    end else if (load_s2b_dma_thread_use_8b_align[3] == 1'b1) begin
      rff_s2b_dma_thread_use_8b_align[3] <= (wmask & s2b_dma_thread_use_8b_align[3]) | (wmask_inv & rff_s2b_dma_thread_use_8b_align[3]);
    end
  end
  assign out_s2b_dma_thread_use_8b_align = rff_s2b_dma_thread_use_8b_align;
  dma_thread_rpt_cnt_t [4 - 1 : 0] rff_s2b_dma_thread_rpt_cnt_less_1;
  dma_thread_rpt_cnt_t [4 - 1 : 0] s2b_dma_thread_rpt_cnt_less_1;
  logic [4 - 1 : 0] load_s2b_dma_thread_rpt_cnt_less_1;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_rpt_cnt_less_1[0] <= dma_thread_rpt_cnt_t'(STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_RSTVAL);
    end else if (load_s2b_dma_thread_rpt_cnt_less_1[0] == 1'b1) begin
      rff_s2b_dma_thread_rpt_cnt_less_1[0] <= (wmask & s2b_dma_thread_rpt_cnt_less_1[0]) | (wmask_inv & rff_s2b_dma_thread_rpt_cnt_less_1[0]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_rpt_cnt_less_1[1] <= dma_thread_rpt_cnt_t'(STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_RSTVAL);
    end else if (load_s2b_dma_thread_rpt_cnt_less_1[1] == 1'b1) begin
      rff_s2b_dma_thread_rpt_cnt_less_1[1] <= (wmask & s2b_dma_thread_rpt_cnt_less_1[1]) | (wmask_inv & rff_s2b_dma_thread_rpt_cnt_less_1[1]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_rpt_cnt_less_1[2] <= dma_thread_rpt_cnt_t'(STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_RSTVAL);
    end else if (load_s2b_dma_thread_rpt_cnt_less_1[2] == 1'b1) begin
      rff_s2b_dma_thread_rpt_cnt_less_1[2] <= (wmask & s2b_dma_thread_rpt_cnt_less_1[2]) | (wmask_inv & rff_s2b_dma_thread_rpt_cnt_less_1[2]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_rpt_cnt_less_1[3] <= dma_thread_rpt_cnt_t'(STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_RSTVAL);
    end else if (load_s2b_dma_thread_rpt_cnt_less_1[3] == 1'b1) begin
      rff_s2b_dma_thread_rpt_cnt_less_1[3] <= (wmask & s2b_dma_thread_rpt_cnt_less_1[3]) | (wmask_inv & rff_s2b_dma_thread_rpt_cnt_less_1[3]);
    end
  end
  assign out_s2b_dma_thread_rpt_cnt_less_1 = rff_s2b_dma_thread_rpt_cnt_less_1;
  ring_data_t [4 - 1 : 0] rff_s2b_dma_thread_length_in_bytes;
  ring_data_t [4 - 1 : 0] s2b_dma_thread_length_in_bytes;
  logic [4 - 1 : 0] load_s2b_dma_thread_length_in_bytes;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_length_in_bytes[0] <= ring_data_t'(STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_RSTVAL);
    end else if (load_s2b_dma_thread_length_in_bytes[0] == 1'b1) begin
      rff_s2b_dma_thread_length_in_bytes[0] <= (wmask & s2b_dma_thread_length_in_bytes[0]) | (wmask_inv & rff_s2b_dma_thread_length_in_bytes[0]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_length_in_bytes[1] <= ring_data_t'(STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_RSTVAL);
    end else if (load_s2b_dma_thread_length_in_bytes[1] == 1'b1) begin
      rff_s2b_dma_thread_length_in_bytes[1] <= (wmask & s2b_dma_thread_length_in_bytes[1]) | (wmask_inv & rff_s2b_dma_thread_length_in_bytes[1]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_length_in_bytes[2] <= ring_data_t'(STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_RSTVAL);
    end else if (load_s2b_dma_thread_length_in_bytes[2] == 1'b1) begin
      rff_s2b_dma_thread_length_in_bytes[2] <= (wmask & s2b_dma_thread_length_in_bytes[2]) | (wmask_inv & rff_s2b_dma_thread_length_in_bytes[2]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_length_in_bytes[3] <= ring_data_t'(STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_RSTVAL);
    end else if (load_s2b_dma_thread_length_in_bytes[3] == 1'b1) begin
      rff_s2b_dma_thread_length_in_bytes[3] <= (wmask & s2b_dma_thread_length_in_bytes[3]) | (wmask_inv & rff_s2b_dma_thread_length_in_bytes[3]);
    end
  end
  assign out_s2b_dma_thread_length_in_bytes = rff_s2b_dma_thread_length_in_bytes;
  ring_addr_t [4 - 1 : 0] rff_s2b_dma_thread_cbuf_size;
  ring_addr_t [4 - 1 : 0] s2b_dma_thread_cbuf_size;
  logic [4 - 1 : 0] load_s2b_dma_thread_cbuf_size;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_cbuf_size[0] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_RSTVAL);
    end else if (load_s2b_dma_thread_cbuf_size[0] == 1'b1) begin
      rff_s2b_dma_thread_cbuf_size[0] <= (wmask & s2b_dma_thread_cbuf_size[0]) | (wmask_inv & rff_s2b_dma_thread_cbuf_size[0]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_cbuf_size[1] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_RSTVAL);
    end else if (load_s2b_dma_thread_cbuf_size[1] == 1'b1) begin
      rff_s2b_dma_thread_cbuf_size[1] <= (wmask & s2b_dma_thread_cbuf_size[1]) | (wmask_inv & rff_s2b_dma_thread_cbuf_size[1]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_cbuf_size[2] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_RSTVAL);
    end else if (load_s2b_dma_thread_cbuf_size[2] == 1'b1) begin
      rff_s2b_dma_thread_cbuf_size[2] <= (wmask & s2b_dma_thread_cbuf_size[2]) | (wmask_inv & rff_s2b_dma_thread_cbuf_size[2]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_cbuf_size[3] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_RSTVAL);
    end else if (load_s2b_dma_thread_cbuf_size[3] == 1'b1) begin
      rff_s2b_dma_thread_cbuf_size[3] <= (wmask & s2b_dma_thread_cbuf_size[3]) | (wmask_inv & rff_s2b_dma_thread_cbuf_size[3]);
    end
  end
  assign out_s2b_dma_thread_cbuf_size = rff_s2b_dma_thread_cbuf_size;
  ring_addr_t [4 - 1 : 0] rff_s2b_dma_thread_cbuf_thold;
  ring_addr_t [4 - 1 : 0] s2b_dma_thread_cbuf_thold;
  logic [4 - 1 : 0] load_s2b_dma_thread_cbuf_thold;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_cbuf_thold[0] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_RSTVAL);
    end else if (load_s2b_dma_thread_cbuf_thold[0] == 1'b1) begin
      rff_s2b_dma_thread_cbuf_thold[0] <= (wmask & s2b_dma_thread_cbuf_thold[0]) | (wmask_inv & rff_s2b_dma_thread_cbuf_thold[0]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_cbuf_thold[1] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_RSTVAL);
    end else if (load_s2b_dma_thread_cbuf_thold[1] == 1'b1) begin
      rff_s2b_dma_thread_cbuf_thold[1] <= (wmask & s2b_dma_thread_cbuf_thold[1]) | (wmask_inv & rff_s2b_dma_thread_cbuf_thold[1]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_cbuf_thold[2] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_RSTVAL);
    end else if (load_s2b_dma_thread_cbuf_thold[2] == 1'b1) begin
      rff_s2b_dma_thread_cbuf_thold[2] <= (wmask & s2b_dma_thread_cbuf_thold[2]) | (wmask_inv & rff_s2b_dma_thread_cbuf_thold[2]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_cbuf_thold[3] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_RSTVAL);
    end else if (load_s2b_dma_thread_cbuf_thold[3] == 1'b1) begin
      rff_s2b_dma_thread_cbuf_thold[3] <= (wmask & s2b_dma_thread_cbuf_thold[3]) | (wmask_inv & rff_s2b_dma_thread_cbuf_thold[3]);
    end
  end
  assign out_s2b_dma_thread_cbuf_thold = rff_s2b_dma_thread_cbuf_thold;
  ring_addr_t [4 - 1 : 0] rff_dma_thread_cbuf_rp_addr;
  ring_addr_t [4 - 1 : 0] dma_thread_cbuf_rp_addr;
  logic [4 - 1 : 0] load_dma_thread_cbuf_rp_addr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cbuf_rp_addr[0] <= ring_addr_t'(STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_RSTVAL);
    end else if (load_dma_thread_cbuf_rp_addr[0] == 1'b1) begin
      rff_dma_thread_cbuf_rp_addr[0] <= (wmask & dma_thread_cbuf_rp_addr[0]) | (wmask_inv & rff_dma_thread_cbuf_rp_addr[0]);

    end else if (vld_in_dma_thread_cbuf_rp_addr[0] == 1'b1) begin
      rff_dma_thread_cbuf_rp_addr[0] <= in_dma_thread_cbuf_rp_addr[0];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cbuf_rp_addr[1] <= ring_addr_t'(STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_RSTVAL);
    end else if (load_dma_thread_cbuf_rp_addr[1] == 1'b1) begin
      rff_dma_thread_cbuf_rp_addr[1] <= (wmask & dma_thread_cbuf_rp_addr[1]) | (wmask_inv & rff_dma_thread_cbuf_rp_addr[1]);

    end else if (vld_in_dma_thread_cbuf_rp_addr[1] == 1'b1) begin
      rff_dma_thread_cbuf_rp_addr[1] <= in_dma_thread_cbuf_rp_addr[1];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cbuf_rp_addr[2] <= ring_addr_t'(STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_RSTVAL);
    end else if (load_dma_thread_cbuf_rp_addr[2] == 1'b1) begin
      rff_dma_thread_cbuf_rp_addr[2] <= (wmask & dma_thread_cbuf_rp_addr[2]) | (wmask_inv & rff_dma_thread_cbuf_rp_addr[2]);

    end else if (vld_in_dma_thread_cbuf_rp_addr[2] == 1'b1) begin
      rff_dma_thread_cbuf_rp_addr[2] <= in_dma_thread_cbuf_rp_addr[2];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cbuf_rp_addr[3] <= ring_addr_t'(STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_RSTVAL);
    end else if (load_dma_thread_cbuf_rp_addr[3] == 1'b1) begin
      rff_dma_thread_cbuf_rp_addr[3] <= (wmask & dma_thread_cbuf_rp_addr[3]) | (wmask_inv & rff_dma_thread_cbuf_rp_addr[3]);

    end else if (vld_in_dma_thread_cbuf_rp_addr[3] == 1'b1) begin
      rff_dma_thread_cbuf_rp_addr[3] <= in_dma_thread_cbuf_rp_addr[3];
    end
  end
  assign out_dma_thread_cbuf_rp_addr = rff_dma_thread_cbuf_rp_addr;
  ring_addr_t [4 - 1 : 0] rff_dma_thread_cbuf_wp_addr;
  ring_addr_t [4 - 1 : 0] dma_thread_cbuf_wp_addr;
  logic [4 - 1 : 0] load_dma_thread_cbuf_wp_addr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cbuf_wp_addr[0] <= ring_addr_t'(STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_RSTVAL);
    end else if (load_dma_thread_cbuf_wp_addr[0] == 1'b1) begin
      rff_dma_thread_cbuf_wp_addr[0] <= (wmask & dma_thread_cbuf_wp_addr[0]) | (wmask_inv & rff_dma_thread_cbuf_wp_addr[0]);

    end else if (vld_in_dma_thread_cbuf_wp_addr[0] == 1'b1) begin
      rff_dma_thread_cbuf_wp_addr[0] <= in_dma_thread_cbuf_wp_addr[0];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cbuf_wp_addr[1] <= ring_addr_t'(STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_RSTVAL);
    end else if (load_dma_thread_cbuf_wp_addr[1] == 1'b1) begin
      rff_dma_thread_cbuf_wp_addr[1] <= (wmask & dma_thread_cbuf_wp_addr[1]) | (wmask_inv & rff_dma_thread_cbuf_wp_addr[1]);

    end else if (vld_in_dma_thread_cbuf_wp_addr[1] == 1'b1) begin
      rff_dma_thread_cbuf_wp_addr[1] <= in_dma_thread_cbuf_wp_addr[1];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cbuf_wp_addr[2] <= ring_addr_t'(STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_RSTVAL);
    end else if (load_dma_thread_cbuf_wp_addr[2] == 1'b1) begin
      rff_dma_thread_cbuf_wp_addr[2] <= (wmask & dma_thread_cbuf_wp_addr[2]) | (wmask_inv & rff_dma_thread_cbuf_wp_addr[2]);

    end else if (vld_in_dma_thread_cbuf_wp_addr[2] == 1'b1) begin
      rff_dma_thread_cbuf_wp_addr[2] <= in_dma_thread_cbuf_wp_addr[2];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cbuf_wp_addr[3] <= ring_addr_t'(STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_RSTVAL);
    end else if (load_dma_thread_cbuf_wp_addr[3] == 1'b1) begin
      rff_dma_thread_cbuf_wp_addr[3] <= (wmask & dma_thread_cbuf_wp_addr[3]) | (wmask_inv & rff_dma_thread_cbuf_wp_addr[3]);

    end else if (vld_in_dma_thread_cbuf_wp_addr[3] == 1'b1) begin
      rff_dma_thread_cbuf_wp_addr[3] <= in_dma_thread_cbuf_wp_addr[3];
    end
  end
  assign out_dma_thread_cbuf_wp_addr = rff_dma_thread_cbuf_wp_addr;
  ring_addr_t [4 - 1 : 0] rff_s2b_dma_thread_gather_grpdepth;
  ring_addr_t [4 - 1 : 0] s2b_dma_thread_gather_grpdepth;
  logic [4 - 1 : 0] load_s2b_dma_thread_gather_grpdepth;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_gather_grpdepth[0] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_RSTVAL);
    end else if (load_s2b_dma_thread_gather_grpdepth[0] == 1'b1) begin
      rff_s2b_dma_thread_gather_grpdepth[0] <= (wmask & s2b_dma_thread_gather_grpdepth[0]) | (wmask_inv & rff_s2b_dma_thread_gather_grpdepth[0]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_gather_grpdepth[1] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_RSTVAL);
    end else if (load_s2b_dma_thread_gather_grpdepth[1] == 1'b1) begin
      rff_s2b_dma_thread_gather_grpdepth[1] <= (wmask & s2b_dma_thread_gather_grpdepth[1]) | (wmask_inv & rff_s2b_dma_thread_gather_grpdepth[1]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_gather_grpdepth[2] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_RSTVAL);
    end else if (load_s2b_dma_thread_gather_grpdepth[2] == 1'b1) begin
      rff_s2b_dma_thread_gather_grpdepth[2] <= (wmask & s2b_dma_thread_gather_grpdepth[2]) | (wmask_inv & rff_s2b_dma_thread_gather_grpdepth[2]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_gather_grpdepth[3] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_RSTVAL);
    end else if (load_s2b_dma_thread_gather_grpdepth[3] == 1'b1) begin
      rff_s2b_dma_thread_gather_grpdepth[3] <= (wmask & s2b_dma_thread_gather_grpdepth[3]) | (wmask_inv & rff_s2b_dma_thread_gather_grpdepth[3]);
    end
  end
  assign out_s2b_dma_thread_gather_grpdepth = rff_s2b_dma_thread_gather_grpdepth;
  ring_addr_t [4 - 1 : 0] rff_s2b_dma_thread_gather_stride;
  ring_addr_t [4 - 1 : 0] s2b_dma_thread_gather_stride;
  logic [4 - 1 : 0] load_s2b_dma_thread_gather_stride;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_gather_stride[0] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_RSTVAL);
    end else if (load_s2b_dma_thread_gather_stride[0] == 1'b1) begin
      rff_s2b_dma_thread_gather_stride[0] <= (wmask & s2b_dma_thread_gather_stride[0]) | (wmask_inv & rff_s2b_dma_thread_gather_stride[0]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_gather_stride[1] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_RSTVAL);
    end else if (load_s2b_dma_thread_gather_stride[1] == 1'b1) begin
      rff_s2b_dma_thread_gather_stride[1] <= (wmask & s2b_dma_thread_gather_stride[1]) | (wmask_inv & rff_s2b_dma_thread_gather_stride[1]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_gather_stride[2] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_RSTVAL);
    end else if (load_s2b_dma_thread_gather_stride[2] == 1'b1) begin
      rff_s2b_dma_thread_gather_stride[2] <= (wmask & s2b_dma_thread_gather_stride[2]) | (wmask_inv & rff_s2b_dma_thread_gather_stride[2]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_gather_stride[3] <= ring_addr_t'(STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_RSTVAL);
    end else if (load_s2b_dma_thread_gather_stride[3] == 1'b1) begin
      rff_s2b_dma_thread_gather_stride[3] <= (wmask & s2b_dma_thread_gather_stride[3]) | (wmask_inv & rff_s2b_dma_thread_gather_stride[3]);
    end
  end
  assign out_s2b_dma_thread_gather_stride = rff_s2b_dma_thread_gather_stride;
  ring_addr_t rff_s2b_dma_flush_addr;
  ring_addr_t s2b_dma_flush_addr;
  logic load_s2b_dma_flush_addr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_flush_addr <= ring_addr_t'(STATION_DMA_S2B_DMA_FLUSH_ADDR_RSTVAL);
    end else if (load_s2b_dma_flush_addr == 1'b1) begin
      rff_s2b_dma_flush_addr <= ring_addr_t'((wmask & s2b_dma_flush_addr) | (wmask_inv & rff_s2b_dma_flush_addr));
    end
  end
  assign out_s2b_dma_flush_addr = rff_s2b_dma_flush_addr;
  dma_flush_type_t rff_s2b_dma_flush_req_type;
  dma_flush_type_t s2b_dma_flush_req_type;
  logic load_s2b_dma_flush_req_type;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_flush_req_type <= dma_flush_type_t'(STATION_DMA_S2B_DMA_FLUSH_REQ_TYPE_RSTVAL);
    end else if (load_s2b_dma_flush_req_type == 1'b1) begin
      rff_s2b_dma_flush_req_type <= dma_flush_type_t'((wmask & s2b_dma_flush_req_type) | (wmask_inv & rff_s2b_dma_flush_req_type));
    end
  end
  assign out_s2b_dma_flush_req_type = rff_s2b_dma_flush_req_type;
  logic [STATION_DMA_DMA_THREAD0_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0] rff_dma_thread0_data_avail_src_sel;
  logic [STATION_DMA_DMA_THREAD0_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0] dma_thread0_data_avail_src_sel;
  logic load_dma_thread0_data_avail_src_sel;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread0_data_avail_src_sel <= STATION_DMA_DMA_THREAD0_DATA_AVAIL_SRC_SEL_RSTVAL;
    end else if (load_dma_thread0_data_avail_src_sel == 1'b1) begin
      rff_dma_thread0_data_avail_src_sel <= (wmask & dma_thread0_data_avail_src_sel) | (wmask_inv & rff_dma_thread0_data_avail_src_sel);
    end
  end
  assign out_dma_thread0_data_avail_src_sel = rff_dma_thread0_data_avail_src_sel;
  logic [STATION_DMA_DMA_THREAD1_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0] rff_dma_thread1_data_avail_src_sel;
  logic [STATION_DMA_DMA_THREAD1_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0] dma_thread1_data_avail_src_sel;
  logic load_dma_thread1_data_avail_src_sel;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread1_data_avail_src_sel <= STATION_DMA_DMA_THREAD1_DATA_AVAIL_SRC_SEL_RSTVAL;
    end else if (load_dma_thread1_data_avail_src_sel == 1'b1) begin
      rff_dma_thread1_data_avail_src_sel <= (wmask & dma_thread1_data_avail_src_sel) | (wmask_inv & rff_dma_thread1_data_avail_src_sel);
    end
  end
  assign out_dma_thread1_data_avail_src_sel = rff_dma_thread1_data_avail_src_sel;
  logic [STATION_DMA_DMA_THREAD2_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0] rff_dma_thread2_data_avail_src_sel;
  logic [STATION_DMA_DMA_THREAD2_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0] dma_thread2_data_avail_src_sel;
  logic load_dma_thread2_data_avail_src_sel;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread2_data_avail_src_sel <= STATION_DMA_DMA_THREAD2_DATA_AVAIL_SRC_SEL_RSTVAL;
    end else if (load_dma_thread2_data_avail_src_sel == 1'b1) begin
      rff_dma_thread2_data_avail_src_sel <= (wmask & dma_thread2_data_avail_src_sel) | (wmask_inv & rff_dma_thread2_data_avail_src_sel);
    end
  end
  assign out_dma_thread2_data_avail_src_sel = rff_dma_thread2_data_avail_src_sel;
  logic [STATION_DMA_DMA_THREAD3_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0] rff_dma_thread3_data_avail_src_sel;
  logic [STATION_DMA_DMA_THREAD3_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0] dma_thread3_data_avail_src_sel;
  logic load_dma_thread3_data_avail_src_sel;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread3_data_avail_src_sel <= STATION_DMA_DMA_THREAD3_DATA_AVAIL_SRC_SEL_RSTVAL;
    end else if (load_dma_thread3_data_avail_src_sel == 1'b1) begin
      rff_dma_thread3_data_avail_src_sel <= (wmask & dma_thread3_data_avail_src_sel) | (wmask_inv & rff_dma_thread3_data_avail_src_sel);
    end
  end
  assign out_dma_thread3_data_avail_src_sel = rff_dma_thread3_data_avail_src_sel;
  logic [STATION_DMA_S2ICG_CLK_EN_WIDTH - 1 : 0] rff_s2icg_clk_en;
  logic [STATION_DMA_S2ICG_CLK_EN_WIDTH - 1 : 0] s2icg_clk_en;
  logic load_s2icg_clk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_clk_en <= STATION_DMA_S2ICG_CLK_EN_RSTVAL;
    end else if (load_s2icg_clk_en == 1'b1) begin
      rff_s2icg_clk_en <= (wmask & s2icg_clk_en) | (wmask_inv & rff_s2icg_clk_en);
    end
  end
  assign out_s2icg_clk_en = rff_s2icg_clk_en;
  logic [4 - 1 : 0][STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_WIDTH - 1 : 0] rff_s2b_dma_thread_cbuf_mode;
  logic [4 - 1 : 0][STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_WIDTH - 1 : 0] s2b_dma_thread_cbuf_mode;
  logic [4 - 1 : 0] load_s2b_dma_thread_cbuf_mode;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_cbuf_mode[0] <= STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_RSTVAL;
    end else if (load_s2b_dma_thread_cbuf_mode[0] == 1'b1) begin
      rff_s2b_dma_thread_cbuf_mode[0] <= (wmask & s2b_dma_thread_cbuf_mode[0]) | (wmask_inv & rff_s2b_dma_thread_cbuf_mode[0]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_cbuf_mode[1] <= STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_RSTVAL;
    end else if (load_s2b_dma_thread_cbuf_mode[1] == 1'b1) begin
      rff_s2b_dma_thread_cbuf_mode[1] <= (wmask & s2b_dma_thread_cbuf_mode[1]) | (wmask_inv & rff_s2b_dma_thread_cbuf_mode[1]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_cbuf_mode[2] <= STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_RSTVAL;
    end else if (load_s2b_dma_thread_cbuf_mode[2] == 1'b1) begin
      rff_s2b_dma_thread_cbuf_mode[2] <= (wmask & s2b_dma_thread_cbuf_mode[2]) | (wmask_inv & rff_s2b_dma_thread_cbuf_mode[2]);
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_dma_thread_cbuf_mode[3] <= STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_RSTVAL;
    end else if (load_s2b_dma_thread_cbuf_mode[3] == 1'b1) begin
      rff_s2b_dma_thread_cbuf_mode[3] <= (wmask & s2b_dma_thread_cbuf_mode[3]) | (wmask_inv & rff_s2b_dma_thread_cbuf_mode[3]);
    end
  end
  assign out_s2b_dma_thread_cbuf_mode = rff_s2b_dma_thread_cbuf_mode;
  logic [4 - 1 : 0][STATION_DMA_B2S_DMA_THREAD_IDLE_WIDTH - 1 : 0] rff_b2s_dma_thread_idle;
  logic [4 - 1 : 0][STATION_DMA_B2S_DMA_THREAD_IDLE_WIDTH - 1 : 0] b2s_dma_thread_idle;
  logic [4 - 1 : 0] load_b2s_dma_thread_idle;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_dma_thread_idle[0] <= STATION_DMA_B2S_DMA_THREAD_IDLE_RSTVAL;
    end else if (load_b2s_dma_thread_idle[0] == 1'b1) begin
      rff_b2s_dma_thread_idle[0] <= (wmask & b2s_dma_thread_idle[0]) | (wmask_inv & rff_b2s_dma_thread_idle[0]);

    end else if (vld_in_b2s_dma_thread_idle[0] == 1'b1) begin
      rff_b2s_dma_thread_idle[0] <= in_b2s_dma_thread_idle[0];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_dma_thread_idle[1] <= STATION_DMA_B2S_DMA_THREAD_IDLE_RSTVAL;
    end else if (load_b2s_dma_thread_idle[1] == 1'b1) begin
      rff_b2s_dma_thread_idle[1] <= (wmask & b2s_dma_thread_idle[1]) | (wmask_inv & rff_b2s_dma_thread_idle[1]);

    end else if (vld_in_b2s_dma_thread_idle[1] == 1'b1) begin
      rff_b2s_dma_thread_idle[1] <= in_b2s_dma_thread_idle[1];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_dma_thread_idle[2] <= STATION_DMA_B2S_DMA_THREAD_IDLE_RSTVAL;
    end else if (load_b2s_dma_thread_idle[2] == 1'b1) begin
      rff_b2s_dma_thread_idle[2] <= (wmask & b2s_dma_thread_idle[2]) | (wmask_inv & rff_b2s_dma_thread_idle[2]);

    end else if (vld_in_b2s_dma_thread_idle[2] == 1'b1) begin
      rff_b2s_dma_thread_idle[2] <= in_b2s_dma_thread_idle[2];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_dma_thread_idle[3] <= STATION_DMA_B2S_DMA_THREAD_IDLE_RSTVAL;
    end else if (load_b2s_dma_thread_idle[3] == 1'b1) begin
      rff_b2s_dma_thread_idle[3] <= (wmask & b2s_dma_thread_idle[3]) | (wmask_inv & rff_b2s_dma_thread_idle[3]);

    end else if (vld_in_b2s_dma_thread_idle[3] == 1'b1) begin
      rff_b2s_dma_thread_idle[3] <= in_b2s_dma_thread_idle[3];
    end
  end
  assign out_b2s_dma_thread_idle = rff_b2s_dma_thread_idle;
  logic [4 - 1 : 0][STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_WIDTH - 1 : 0] rff_dma_thread_cbuf_full_seen;
  logic [4 - 1 : 0][STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_WIDTH - 1 : 0] dma_thread_cbuf_full_seen;
  logic [4 - 1 : 0] load_dma_thread_cbuf_full_seen;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cbuf_full_seen[0] <= STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_RSTVAL;
    end else if (load_dma_thread_cbuf_full_seen[0] == 1'b1) begin
      rff_dma_thread_cbuf_full_seen[0] <= (wmask & dma_thread_cbuf_full_seen[0]) | (wmask_inv & rff_dma_thread_cbuf_full_seen[0]);

    end else if (vld_in_dma_thread_cbuf_full_seen[0] == 1'b1) begin
      rff_dma_thread_cbuf_full_seen[0] <= in_dma_thread_cbuf_full_seen[0];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cbuf_full_seen[1] <= STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_RSTVAL;
    end else if (load_dma_thread_cbuf_full_seen[1] == 1'b1) begin
      rff_dma_thread_cbuf_full_seen[1] <= (wmask & dma_thread_cbuf_full_seen[1]) | (wmask_inv & rff_dma_thread_cbuf_full_seen[1]);

    end else if (vld_in_dma_thread_cbuf_full_seen[1] == 1'b1) begin
      rff_dma_thread_cbuf_full_seen[1] <= in_dma_thread_cbuf_full_seen[1];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cbuf_full_seen[2] <= STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_RSTVAL;
    end else if (load_dma_thread_cbuf_full_seen[2] == 1'b1) begin
      rff_dma_thread_cbuf_full_seen[2] <= (wmask & dma_thread_cbuf_full_seen[2]) | (wmask_inv & rff_dma_thread_cbuf_full_seen[2]);

    end else if (vld_in_dma_thread_cbuf_full_seen[2] == 1'b1) begin
      rff_dma_thread_cbuf_full_seen[2] <= in_dma_thread_cbuf_full_seen[2];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cbuf_full_seen[3] <= STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_RSTVAL;
    end else if (load_dma_thread_cbuf_full_seen[3] == 1'b1) begin
      rff_dma_thread_cbuf_full_seen[3] <= (wmask & dma_thread_cbuf_full_seen[3]) | (wmask_inv & rff_dma_thread_cbuf_full_seen[3]);

    end else if (vld_in_dma_thread_cbuf_full_seen[3] == 1'b1) begin
      rff_dma_thread_cbuf_full_seen[3] <= in_dma_thread_cbuf_full_seen[3];
    end
  end
  assign out_dma_thread_cbuf_full_seen = rff_dma_thread_cbuf_full_seen;
  dma_thread_cmd_vld_t [4 - 1 : 0] rff_dma_thread_cmd_vld;
  dma_thread_cmd_vld_t [4 - 1 : 0] dma_thread_cmd_vld;
  logic [4 - 1 : 0] load_dma_thread_cmd_vld;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cmd_vld[0] <= dma_thread_cmd_vld_t'(STATION_DMA_DMA_THREAD_CMD_VLD_RSTVAL);
    end else if (load_dma_thread_cmd_vld[0] == 1'b1) begin
      rff_dma_thread_cmd_vld[0] <= (wmask & dma_thread_cmd_vld[0]) | (wmask_inv & rff_dma_thread_cmd_vld[0]);

    end else if (vld_in_dma_thread_cmd_vld[0] == 1'b1) begin
      rff_dma_thread_cmd_vld[0] <= in_dma_thread_cmd_vld[0];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cmd_vld[1] <= dma_thread_cmd_vld_t'(STATION_DMA_DMA_THREAD_CMD_VLD_RSTVAL);
    end else if (load_dma_thread_cmd_vld[1] == 1'b1) begin
      rff_dma_thread_cmd_vld[1] <= (wmask & dma_thread_cmd_vld[1]) | (wmask_inv & rff_dma_thread_cmd_vld[1]);

    end else if (vld_in_dma_thread_cmd_vld[1] == 1'b1) begin
      rff_dma_thread_cmd_vld[1] <= in_dma_thread_cmd_vld[1];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cmd_vld[2] <= dma_thread_cmd_vld_t'(STATION_DMA_DMA_THREAD_CMD_VLD_RSTVAL);
    end else if (load_dma_thread_cmd_vld[2] == 1'b1) begin
      rff_dma_thread_cmd_vld[2] <= (wmask & dma_thread_cmd_vld[2]) | (wmask_inv & rff_dma_thread_cmd_vld[2]);

    end else if (vld_in_dma_thread_cmd_vld[2] == 1'b1) begin
      rff_dma_thread_cmd_vld[2] <= in_dma_thread_cmd_vld[2];
    end
  end
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_thread_cmd_vld[3] <= dma_thread_cmd_vld_t'(STATION_DMA_DMA_THREAD_CMD_VLD_RSTVAL);
    end else if (load_dma_thread_cmd_vld[3] == 1'b1) begin
      rff_dma_thread_cmd_vld[3] <= (wmask & dma_thread_cmd_vld[3]) | (wmask_inv & rff_dma_thread_cmd_vld[3]);

    end else if (vld_in_dma_thread_cmd_vld[3] == 1'b1) begin
      rff_dma_thread_cmd_vld[3] <= in_dma_thread_cmd_vld[3];
    end
  end
  assign out_dma_thread_cmd_vld = rff_dma_thread_cmd_vld;
  logic [STATION_DMA_DMA_FLUSH_CMD_VLD_WIDTH - 1 : 0] rff_dma_flush_cmd_vld;
  logic [STATION_DMA_DMA_FLUSH_CMD_VLD_WIDTH - 1 : 0] dma_flush_cmd_vld;
  logic load_dma_flush_cmd_vld;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_dma_flush_cmd_vld <= STATION_DMA_DMA_FLUSH_CMD_VLD_RSTVAL;
    end else if (load_dma_flush_cmd_vld == 1'b1) begin
      rff_dma_flush_cmd_vld <= (wmask & dma_flush_cmd_vld) | (wmask_inv & rff_dma_flush_cmd_vld);

    end else if (vld_in_dma_flush_cmd_vld == 1'b1) begin
      rff_dma_flush_cmd_vld <= in_dma_flush_cmd_vld;
    end
  end
  assign out_dma_flush_cmd_vld = rff_dma_flush_cmd_vld;
  logic [STATION_DMA_B2S_THREAD0_INTR_WIDTH - 1 : 0] rff_b2s_thread0_intr;
  logic [STATION_DMA_B2S_THREAD0_INTR_WIDTH - 1 : 0] b2s_thread0_intr;
  logic load_b2s_thread0_intr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_thread0_intr <= STATION_DMA_B2S_THREAD0_INTR_RSTVAL;
    end else if (load_b2s_thread0_intr == 1'b1) begin
      rff_b2s_thread0_intr <= (wmask & b2s_thread0_intr) | (wmask_inv & rff_b2s_thread0_intr);

    end else if (vld_in_b2s_thread0_intr == 1'b1) begin
      rff_b2s_thread0_intr <= in_b2s_thread0_intr;
    end
  end
  assign out_b2s_thread0_intr = rff_b2s_thread0_intr;
  logic [STATION_DMA_B2S_THREAD1_INTR_WIDTH - 1 : 0] rff_b2s_thread1_intr;
  logic [STATION_DMA_B2S_THREAD1_INTR_WIDTH - 1 : 0] b2s_thread1_intr;
  logic load_b2s_thread1_intr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_thread1_intr <= STATION_DMA_B2S_THREAD1_INTR_RSTVAL;
    end else if (load_b2s_thread1_intr == 1'b1) begin
      rff_b2s_thread1_intr <= (wmask & b2s_thread1_intr) | (wmask_inv & rff_b2s_thread1_intr);

    end else if (vld_in_b2s_thread1_intr == 1'b1) begin
      rff_b2s_thread1_intr <= in_b2s_thread1_intr;
    end
  end
  assign out_b2s_thread1_intr = rff_b2s_thread1_intr;
  logic [STATION_DMA_B2S_THREAD2_INTR_WIDTH - 1 : 0] rff_b2s_thread2_intr;
  logic [STATION_DMA_B2S_THREAD2_INTR_WIDTH - 1 : 0] b2s_thread2_intr;
  logic load_b2s_thread2_intr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_thread2_intr <= STATION_DMA_B2S_THREAD2_INTR_RSTVAL;
    end else if (load_b2s_thread2_intr == 1'b1) begin
      rff_b2s_thread2_intr <= (wmask & b2s_thread2_intr) | (wmask_inv & rff_b2s_thread2_intr);

    end else if (vld_in_b2s_thread2_intr == 1'b1) begin
      rff_b2s_thread2_intr <= in_b2s_thread2_intr;
    end
  end
  assign out_b2s_thread2_intr = rff_b2s_thread2_intr;
  logic [STATION_DMA_B2S_THREAD3_INTR_WIDTH - 1 : 0] rff_b2s_thread3_intr;
  logic [STATION_DMA_B2S_THREAD3_INTR_WIDTH - 1 : 0] b2s_thread3_intr;
  logic load_b2s_thread3_intr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_thread3_intr <= STATION_DMA_B2S_THREAD3_INTR_RSTVAL;
    end else if (load_b2s_thread3_intr == 1'b1) begin
      rff_b2s_thread3_intr <= (wmask & b2s_thread3_intr) | (wmask_inv & rff_b2s_thread3_intr);

    end else if (vld_in_b2s_thread3_intr == 1'b1) begin
      rff_b2s_thread3_intr <= in_b2s_thread3_intr;
    end
  end
  assign out_b2s_thread3_intr = rff_b2s_thread3_intr;

  logic                         rdec;
  logic                         bdec;
  axi4_resp_t                   rresp;
  axi4_resp_t                   bresp;
  logic [STATION_DMA_DATA_WIDTH - 1 : 0] data;

  always_comb begin
    rdec  = 1'b0;
    bdec  = 1'b0;
    rresp = AXI_RESP_DECERR;
    bresp = AXI_RESP_DECERR;
    data  = {STATION_DMA_DATA_WIDTH{1'b0}};
    s2b_plic_intr_en[0] = rff_s2b_plic_intr_en[0];
    load_s2b_plic_intr_en[0] = 1'b0;
    s2b_plic_intr_en[1] = rff_s2b_plic_intr_en[1];
    load_s2b_plic_intr_en[1] = 1'b0;
    s2b_plic_intr_en[2] = rff_s2b_plic_intr_en[2];
    load_s2b_plic_intr_en[2] = 1'b0;
    s2b_plic_intr_en[3] = rff_s2b_plic_intr_en[3];
    load_s2b_plic_intr_en[3] = 1'b0;
    s2b_plic_intr_en[4] = rff_s2b_plic_intr_en[4];
    load_s2b_plic_intr_en[4] = 1'b0;
    s2b_plic_intr_en[5] = rff_s2b_plic_intr_en[5];
    load_s2b_plic_intr_en[5] = 1'b0;
    s2b_plic_intr_en[6] = rff_s2b_plic_intr_en[6];
    load_s2b_plic_intr_en[6] = 1'b0;
    s2b_plic_intr_en[7] = rff_s2b_plic_intr_en[7];
    load_s2b_plic_intr_en[7] = 1'b0;
    s2b_plic_intr_en[8] = rff_s2b_plic_intr_en[8];
    load_s2b_plic_intr_en[8] = 1'b0;
    s2b_plic_intr_en[9] = rff_s2b_plic_intr_en[9];
    load_s2b_plic_intr_en[9] = 1'b0;
    s2b_plic_intr_en[10] = rff_s2b_plic_intr_en[10];
    load_s2b_plic_intr_en[10] = 1'b0;
    s2b_plic_intr_en[11] = rff_s2b_plic_intr_en[11];
    load_s2b_plic_intr_en[11] = 1'b0;
    s2b_plic_intr_en[12] = rff_s2b_plic_intr_en[12];
    load_s2b_plic_intr_en[12] = 1'b0;
    s2b_plic_intr_en[13] = rff_s2b_plic_intr_en[13];
    load_s2b_plic_intr_en[13] = 1'b0;
    s2b_plic_intr_en[14] = rff_s2b_plic_intr_en[14];
    load_s2b_plic_intr_en[14] = 1'b0;
    s2b_plic_intr_en[15] = rff_s2b_plic_intr_en[15];
    load_s2b_plic_intr_en[15] = 1'b0;
    s2b_plic_intr_en[16] = rff_s2b_plic_intr_en[16];
    load_s2b_plic_intr_en[16] = 1'b0;
    s2b_plic_intr_en[17] = rff_s2b_plic_intr_en[17];
    load_s2b_plic_intr_en[17] = 1'b0;
    s2b_plic_intr_en[18] = rff_s2b_plic_intr_en[18];
    load_s2b_plic_intr_en[18] = 1'b0;
    s2b_plic_intr_en[19] = rff_s2b_plic_intr_en[19];
    load_s2b_plic_intr_en[19] = 1'b0;
    s2b_plic_intr_en[20] = rff_s2b_plic_intr_en[20];
    load_s2b_plic_intr_en[20] = 1'b0;
    s2b_plic_intr_en[21] = rff_s2b_plic_intr_en[21];
    load_s2b_plic_intr_en[21] = 1'b0;
    s2b_plic_intr_en[22] = rff_s2b_plic_intr_en[22];
    load_s2b_plic_intr_en[22] = 1'b0;
    s2b_plic_intr_en[23] = rff_s2b_plic_intr_en[23];
    load_s2b_plic_intr_en[23] = 1'b0;
    s2b_plic_intr_en[24] = rff_s2b_plic_intr_en[24];
    load_s2b_plic_intr_en[24] = 1'b0;
    s2b_plic_intr_en[25] = rff_s2b_plic_intr_en[25];
    load_s2b_plic_intr_en[25] = 1'b0;
    s2b_plic_intr_en[26] = rff_s2b_plic_intr_en[26];
    load_s2b_plic_intr_en[26] = 1'b0;
    s2b_plic_intr_en[27] = rff_s2b_plic_intr_en[27];
    load_s2b_plic_intr_en[27] = 1'b0;
    s2b_plic_intr_en[28] = rff_s2b_plic_intr_en[28];
    load_s2b_plic_intr_en[28] = 1'b0;
    s2b_plic_intr_en[29] = rff_s2b_plic_intr_en[29];
    load_s2b_plic_intr_en[29] = 1'b0;
    s2b_plic_intr_en[30] = rff_s2b_plic_intr_en[30];
    load_s2b_plic_intr_en[30] = 1'b0;
    s2b_plic_intr_en[31] = rff_s2b_plic_intr_en[31];
    load_s2b_plic_intr_en[31] = 1'b0;
    s2b_plic_intr_en[32] = rff_s2b_plic_intr_en[32];
    load_s2b_plic_intr_en[32] = 1'b0;
    s2b_plic_intr_en[33] = rff_s2b_plic_intr_en[33];
    load_s2b_plic_intr_en[33] = 1'b0;
    s2b_plic_intr_en[34] = rff_s2b_plic_intr_en[34];
    load_s2b_plic_intr_en[34] = 1'b0;
    s2b_plic_dbg_en[0] = rff_s2b_plic_dbg_en[0];
    load_s2b_plic_dbg_en[0] = 1'b0;
    s2b_plic_dbg_en[1] = rff_s2b_plic_dbg_en[1];
    load_s2b_plic_dbg_en[1] = 1'b0;
    s2b_plic_dbg_en[2] = rff_s2b_plic_dbg_en[2];
    load_s2b_plic_dbg_en[2] = 1'b0;
    s2b_plic_dbg_en[3] = rff_s2b_plic_dbg_en[3];
    load_s2b_plic_dbg_en[3] = 1'b0;
    s2b_plic_dbg_en[4] = rff_s2b_plic_dbg_en[4];
    load_s2b_plic_dbg_en[4] = 1'b0;
    s2b_plic_dbg_en[5] = rff_s2b_plic_dbg_en[5];
    load_s2b_plic_dbg_en[5] = 1'b0;
    s2b_plic_dbg_en[6] = rff_s2b_plic_dbg_en[6];
    load_s2b_plic_dbg_en[6] = 1'b0;
    s2b_plic_dbg_en[7] = rff_s2b_plic_dbg_en[7];
    load_s2b_plic_dbg_en[7] = 1'b0;
    s2b_plic_dbg_en[8] = rff_s2b_plic_dbg_en[8];
    load_s2b_plic_dbg_en[8] = 1'b0;
    s2b_plic_dbg_en[9] = rff_s2b_plic_dbg_en[9];
    load_s2b_plic_dbg_en[9] = 1'b0;
    s2b_plic_dbg_en[10] = rff_s2b_plic_dbg_en[10];
    load_s2b_plic_dbg_en[10] = 1'b0;
    s2b_plic_dbg_en[11] = rff_s2b_plic_dbg_en[11];
    load_s2b_plic_dbg_en[11] = 1'b0;
    s2b_plic_dbg_en[12] = rff_s2b_plic_dbg_en[12];
    load_s2b_plic_dbg_en[12] = 1'b0;
    s2b_plic_dbg_en[13] = rff_s2b_plic_dbg_en[13];
    load_s2b_plic_dbg_en[13] = 1'b0;
    s2b_plic_dbg_en[14] = rff_s2b_plic_dbg_en[14];
    load_s2b_plic_dbg_en[14] = 1'b0;
    s2b_plic_dbg_en[15] = rff_s2b_plic_dbg_en[15];
    load_s2b_plic_dbg_en[15] = 1'b0;
    s2b_plic_dbg_en[16] = rff_s2b_plic_dbg_en[16];
    load_s2b_plic_dbg_en[16] = 1'b0;
    s2b_plic_dbg_en[17] = rff_s2b_plic_dbg_en[17];
    load_s2b_plic_dbg_en[17] = 1'b0;
    s2b_plic_dbg_en[18] = rff_s2b_plic_dbg_en[18];
    load_s2b_plic_dbg_en[18] = 1'b0;
    s2b_plic_dbg_en[19] = rff_s2b_plic_dbg_en[19];
    load_s2b_plic_dbg_en[19] = 1'b0;
    s2b_plic_dbg_en[20] = rff_s2b_plic_dbg_en[20];
    load_s2b_plic_dbg_en[20] = 1'b0;
    s2b_plic_dbg_en[21] = rff_s2b_plic_dbg_en[21];
    load_s2b_plic_dbg_en[21] = 1'b0;
    s2b_plic_dbg_en[22] = rff_s2b_plic_dbg_en[22];
    load_s2b_plic_dbg_en[22] = 1'b0;
    s2b_plic_dbg_en[23] = rff_s2b_plic_dbg_en[23];
    load_s2b_plic_dbg_en[23] = 1'b0;
    s2b_plic_dbg_en[24] = rff_s2b_plic_dbg_en[24];
    load_s2b_plic_dbg_en[24] = 1'b0;
    s2b_plic_dbg_en[25] = rff_s2b_plic_dbg_en[25];
    load_s2b_plic_dbg_en[25] = 1'b0;
    s2b_plic_dbg_en[26] = rff_s2b_plic_dbg_en[26];
    load_s2b_plic_dbg_en[26] = 1'b0;
    s2b_plic_dbg_en[27] = rff_s2b_plic_dbg_en[27];
    load_s2b_plic_dbg_en[27] = 1'b0;
    s2b_plic_dbg_en[28] = rff_s2b_plic_dbg_en[28];
    load_s2b_plic_dbg_en[28] = 1'b0;
    s2b_plic_dbg_en[29] = rff_s2b_plic_dbg_en[29];
    load_s2b_plic_dbg_en[29] = 1'b0;
    s2b_plic_dbg_en[30] = rff_s2b_plic_dbg_en[30];
    load_s2b_plic_dbg_en[30] = 1'b0;
    s2b_plic_dbg_en[31] = rff_s2b_plic_dbg_en[31];
    load_s2b_plic_dbg_en[31] = 1'b0;
    s2b_plic_dbg_en[32] = rff_s2b_plic_dbg_en[32];
    load_s2b_plic_dbg_en[32] = 1'b0;
    s2b_plic_dbg_en[33] = rff_s2b_plic_dbg_en[33];
    load_s2b_plic_dbg_en[33] = 1'b0;
    s2b_plic_dbg_en[34] = rff_s2b_plic_dbg_en[34];
    load_s2b_plic_dbg_en[34] = 1'b0;
    s2b_plic_intr_core_id[0] = rff_s2b_plic_intr_core_id[0];
    load_s2b_plic_intr_core_id[0] = 1'b0;
    s2b_plic_intr_core_id[1] = rff_s2b_plic_intr_core_id[1];
    load_s2b_plic_intr_core_id[1] = 1'b0;
    s2b_plic_intr_core_id[2] = rff_s2b_plic_intr_core_id[2];
    load_s2b_plic_intr_core_id[2] = 1'b0;
    s2b_plic_intr_core_id[3] = rff_s2b_plic_intr_core_id[3];
    load_s2b_plic_intr_core_id[3] = 1'b0;
    s2b_plic_intr_core_id[4] = rff_s2b_plic_intr_core_id[4];
    load_s2b_plic_intr_core_id[4] = 1'b0;
    s2b_plic_intr_core_id[5] = rff_s2b_plic_intr_core_id[5];
    load_s2b_plic_intr_core_id[5] = 1'b0;
    s2b_plic_intr_core_id[6] = rff_s2b_plic_intr_core_id[6];
    load_s2b_plic_intr_core_id[6] = 1'b0;
    s2b_plic_intr_core_id[7] = rff_s2b_plic_intr_core_id[7];
    load_s2b_plic_intr_core_id[7] = 1'b0;
    s2b_plic_intr_core_id[8] = rff_s2b_plic_intr_core_id[8];
    load_s2b_plic_intr_core_id[8] = 1'b0;
    s2b_plic_intr_core_id[9] = rff_s2b_plic_intr_core_id[9];
    load_s2b_plic_intr_core_id[9] = 1'b0;
    s2b_plic_intr_core_id[10] = rff_s2b_plic_intr_core_id[10];
    load_s2b_plic_intr_core_id[10] = 1'b0;
    s2b_plic_intr_core_id[11] = rff_s2b_plic_intr_core_id[11];
    load_s2b_plic_intr_core_id[11] = 1'b0;
    s2b_plic_intr_core_id[12] = rff_s2b_plic_intr_core_id[12];
    load_s2b_plic_intr_core_id[12] = 1'b0;
    s2b_plic_intr_core_id[13] = rff_s2b_plic_intr_core_id[13];
    load_s2b_plic_intr_core_id[13] = 1'b0;
    s2b_plic_intr_core_id[14] = rff_s2b_plic_intr_core_id[14];
    load_s2b_plic_intr_core_id[14] = 1'b0;
    s2b_plic_intr_core_id[15] = rff_s2b_plic_intr_core_id[15];
    load_s2b_plic_intr_core_id[15] = 1'b0;
    s2b_plic_intr_core_id[16] = rff_s2b_plic_intr_core_id[16];
    load_s2b_plic_intr_core_id[16] = 1'b0;
    s2b_plic_intr_core_id[17] = rff_s2b_plic_intr_core_id[17];
    load_s2b_plic_intr_core_id[17] = 1'b0;
    s2b_plic_intr_core_id[18] = rff_s2b_plic_intr_core_id[18];
    load_s2b_plic_intr_core_id[18] = 1'b0;
    s2b_plic_intr_core_id[19] = rff_s2b_plic_intr_core_id[19];
    load_s2b_plic_intr_core_id[19] = 1'b0;
    s2b_plic_intr_core_id[20] = rff_s2b_plic_intr_core_id[20];
    load_s2b_plic_intr_core_id[20] = 1'b0;
    s2b_plic_intr_core_id[21] = rff_s2b_plic_intr_core_id[21];
    load_s2b_plic_intr_core_id[21] = 1'b0;
    s2b_plic_intr_core_id[22] = rff_s2b_plic_intr_core_id[22];
    load_s2b_plic_intr_core_id[22] = 1'b0;
    s2b_plic_intr_core_id[23] = rff_s2b_plic_intr_core_id[23];
    load_s2b_plic_intr_core_id[23] = 1'b0;
    s2b_plic_intr_core_id[24] = rff_s2b_plic_intr_core_id[24];
    load_s2b_plic_intr_core_id[24] = 1'b0;
    s2b_plic_intr_core_id[25] = rff_s2b_plic_intr_core_id[25];
    load_s2b_plic_intr_core_id[25] = 1'b0;
    s2b_plic_intr_core_id[26] = rff_s2b_plic_intr_core_id[26];
    load_s2b_plic_intr_core_id[26] = 1'b0;
    s2b_plic_intr_core_id[27] = rff_s2b_plic_intr_core_id[27];
    load_s2b_plic_intr_core_id[27] = 1'b0;
    s2b_plic_intr_core_id[28] = rff_s2b_plic_intr_core_id[28];
    load_s2b_plic_intr_core_id[28] = 1'b0;
    s2b_plic_intr_core_id[29] = rff_s2b_plic_intr_core_id[29];
    load_s2b_plic_intr_core_id[29] = 1'b0;
    s2b_plic_intr_core_id[30] = rff_s2b_plic_intr_core_id[30];
    load_s2b_plic_intr_core_id[30] = 1'b0;
    s2b_plic_intr_core_id[31] = rff_s2b_plic_intr_core_id[31];
    load_s2b_plic_intr_core_id[31] = 1'b0;
    s2b_plic_intr_core_id[32] = rff_s2b_plic_intr_core_id[32];
    load_s2b_plic_intr_core_id[32] = 1'b0;
    s2b_plic_intr_core_id[33] = rff_s2b_plic_intr_core_id[33];
    load_s2b_plic_intr_core_id[33] = 1'b0;
    s2b_plic_intr_core_id[34] = rff_s2b_plic_intr_core_id[34];
    load_s2b_plic_intr_core_id[34] = 1'b0;
    b2s_plic_intr_src[0] = rff_b2s_plic_intr_src[0];
    load_b2s_plic_intr_src[0] = 1'b0;
    b2s_plic_intr_src[1] = rff_b2s_plic_intr_src[1];
    load_b2s_plic_intr_src[1] = 1'b0;
    b2s_plic_intr_src[2] = rff_b2s_plic_intr_src[2];
    load_b2s_plic_intr_src[2] = 1'b0;
    b2s_plic_intr_src[3] = rff_b2s_plic_intr_src[3];
    load_b2s_plic_intr_src[3] = 1'b0;
    b2s_plic_intr_src[4] = rff_b2s_plic_intr_src[4];
    load_b2s_plic_intr_src[4] = 1'b0;
    s2b_dma_thread_src_addr[0] = rff_s2b_dma_thread_src_addr[0];
    load_s2b_dma_thread_src_addr[0] = 1'b0;
    s2b_dma_thread_src_addr[1] = rff_s2b_dma_thread_src_addr[1];
    load_s2b_dma_thread_src_addr[1] = 1'b0;
    s2b_dma_thread_src_addr[2] = rff_s2b_dma_thread_src_addr[2];
    load_s2b_dma_thread_src_addr[2] = 1'b0;
    s2b_dma_thread_src_addr[3] = rff_s2b_dma_thread_src_addr[3];
    load_s2b_dma_thread_src_addr[3] = 1'b0;
    s2b_dma_thread_dst_addr[0] = rff_s2b_dma_thread_dst_addr[0];
    load_s2b_dma_thread_dst_addr[0] = 1'b0;
    s2b_dma_thread_dst_addr[1] = rff_s2b_dma_thread_dst_addr[1];
    load_s2b_dma_thread_dst_addr[1] = 1'b0;
    s2b_dma_thread_dst_addr[2] = rff_s2b_dma_thread_dst_addr[2];
    load_s2b_dma_thread_dst_addr[2] = 1'b0;
    s2b_dma_thread_dst_addr[3] = rff_s2b_dma_thread_dst_addr[3];
    load_s2b_dma_thread_dst_addr[3] = 1'b0;
    s2b_dma_thread_use_8b_align[0] = rff_s2b_dma_thread_use_8b_align[0];
    load_s2b_dma_thread_use_8b_align[0] = 1'b0;
    s2b_dma_thread_use_8b_align[1] = rff_s2b_dma_thread_use_8b_align[1];
    load_s2b_dma_thread_use_8b_align[1] = 1'b0;
    s2b_dma_thread_use_8b_align[2] = rff_s2b_dma_thread_use_8b_align[2];
    load_s2b_dma_thread_use_8b_align[2] = 1'b0;
    s2b_dma_thread_use_8b_align[3] = rff_s2b_dma_thread_use_8b_align[3];
    load_s2b_dma_thread_use_8b_align[3] = 1'b0;
    s2b_dma_thread_rpt_cnt_less_1[0] = rff_s2b_dma_thread_rpt_cnt_less_1[0];
    load_s2b_dma_thread_rpt_cnt_less_1[0] = 1'b0;
    s2b_dma_thread_rpt_cnt_less_1[1] = rff_s2b_dma_thread_rpt_cnt_less_1[1];
    load_s2b_dma_thread_rpt_cnt_less_1[1] = 1'b0;
    s2b_dma_thread_rpt_cnt_less_1[2] = rff_s2b_dma_thread_rpt_cnt_less_1[2];
    load_s2b_dma_thread_rpt_cnt_less_1[2] = 1'b0;
    s2b_dma_thread_rpt_cnt_less_1[3] = rff_s2b_dma_thread_rpt_cnt_less_1[3];
    load_s2b_dma_thread_rpt_cnt_less_1[3] = 1'b0;
    s2b_dma_thread_length_in_bytes[0] = rff_s2b_dma_thread_length_in_bytes[0];
    load_s2b_dma_thread_length_in_bytes[0] = 1'b0;
    s2b_dma_thread_length_in_bytes[1] = rff_s2b_dma_thread_length_in_bytes[1];
    load_s2b_dma_thread_length_in_bytes[1] = 1'b0;
    s2b_dma_thread_length_in_bytes[2] = rff_s2b_dma_thread_length_in_bytes[2];
    load_s2b_dma_thread_length_in_bytes[2] = 1'b0;
    s2b_dma_thread_length_in_bytes[3] = rff_s2b_dma_thread_length_in_bytes[3];
    load_s2b_dma_thread_length_in_bytes[3] = 1'b0;
    s2b_dma_thread_cbuf_size[0] = rff_s2b_dma_thread_cbuf_size[0];
    load_s2b_dma_thread_cbuf_size[0] = 1'b0;
    s2b_dma_thread_cbuf_size[1] = rff_s2b_dma_thread_cbuf_size[1];
    load_s2b_dma_thread_cbuf_size[1] = 1'b0;
    s2b_dma_thread_cbuf_size[2] = rff_s2b_dma_thread_cbuf_size[2];
    load_s2b_dma_thread_cbuf_size[2] = 1'b0;
    s2b_dma_thread_cbuf_size[3] = rff_s2b_dma_thread_cbuf_size[3];
    load_s2b_dma_thread_cbuf_size[3] = 1'b0;
    s2b_dma_thread_cbuf_thold[0] = rff_s2b_dma_thread_cbuf_thold[0];
    load_s2b_dma_thread_cbuf_thold[0] = 1'b0;
    s2b_dma_thread_cbuf_thold[1] = rff_s2b_dma_thread_cbuf_thold[1];
    load_s2b_dma_thread_cbuf_thold[1] = 1'b0;
    s2b_dma_thread_cbuf_thold[2] = rff_s2b_dma_thread_cbuf_thold[2];
    load_s2b_dma_thread_cbuf_thold[2] = 1'b0;
    s2b_dma_thread_cbuf_thold[3] = rff_s2b_dma_thread_cbuf_thold[3];
    load_s2b_dma_thread_cbuf_thold[3] = 1'b0;
    dma_thread_cbuf_rp_addr[0] = rff_dma_thread_cbuf_rp_addr[0];
    load_dma_thread_cbuf_rp_addr[0] = 1'b0;
    dma_thread_cbuf_rp_addr[1] = rff_dma_thread_cbuf_rp_addr[1];
    load_dma_thread_cbuf_rp_addr[1] = 1'b0;
    dma_thread_cbuf_rp_addr[2] = rff_dma_thread_cbuf_rp_addr[2];
    load_dma_thread_cbuf_rp_addr[2] = 1'b0;
    dma_thread_cbuf_rp_addr[3] = rff_dma_thread_cbuf_rp_addr[3];
    load_dma_thread_cbuf_rp_addr[3] = 1'b0;
    dma_thread_cbuf_wp_addr[0] = rff_dma_thread_cbuf_wp_addr[0];
    load_dma_thread_cbuf_wp_addr[0] = 1'b0;
    dma_thread_cbuf_wp_addr[1] = rff_dma_thread_cbuf_wp_addr[1];
    load_dma_thread_cbuf_wp_addr[1] = 1'b0;
    dma_thread_cbuf_wp_addr[2] = rff_dma_thread_cbuf_wp_addr[2];
    load_dma_thread_cbuf_wp_addr[2] = 1'b0;
    dma_thread_cbuf_wp_addr[3] = rff_dma_thread_cbuf_wp_addr[3];
    load_dma_thread_cbuf_wp_addr[3] = 1'b0;
    s2b_dma_thread_gather_grpdepth[0] = rff_s2b_dma_thread_gather_grpdepth[0];
    load_s2b_dma_thread_gather_grpdepth[0] = 1'b0;
    s2b_dma_thread_gather_grpdepth[1] = rff_s2b_dma_thread_gather_grpdepth[1];
    load_s2b_dma_thread_gather_grpdepth[1] = 1'b0;
    s2b_dma_thread_gather_grpdepth[2] = rff_s2b_dma_thread_gather_grpdepth[2];
    load_s2b_dma_thread_gather_grpdepth[2] = 1'b0;
    s2b_dma_thread_gather_grpdepth[3] = rff_s2b_dma_thread_gather_grpdepth[3];
    load_s2b_dma_thread_gather_grpdepth[3] = 1'b0;
    s2b_dma_thread_gather_stride[0] = rff_s2b_dma_thread_gather_stride[0];
    load_s2b_dma_thread_gather_stride[0] = 1'b0;
    s2b_dma_thread_gather_stride[1] = rff_s2b_dma_thread_gather_stride[1];
    load_s2b_dma_thread_gather_stride[1] = 1'b0;
    s2b_dma_thread_gather_stride[2] = rff_s2b_dma_thread_gather_stride[2];
    load_s2b_dma_thread_gather_stride[2] = 1'b0;
    s2b_dma_thread_gather_stride[3] = rff_s2b_dma_thread_gather_stride[3];
    load_s2b_dma_thread_gather_stride[3] = 1'b0;
    s2b_dma_flush_addr = rff_s2b_dma_flush_addr;
    load_s2b_dma_flush_addr = 1'b0;
    s2b_dma_flush_req_type = rff_s2b_dma_flush_req_type;
    load_s2b_dma_flush_req_type = 1'b0;
    dma_thread0_data_avail_src_sel = rff_dma_thread0_data_avail_src_sel;
    load_dma_thread0_data_avail_src_sel = 1'b0;
    dma_thread1_data_avail_src_sel = rff_dma_thread1_data_avail_src_sel;
    load_dma_thread1_data_avail_src_sel = 1'b0;
    dma_thread2_data_avail_src_sel = rff_dma_thread2_data_avail_src_sel;
    load_dma_thread2_data_avail_src_sel = 1'b0;
    dma_thread3_data_avail_src_sel = rff_dma_thread3_data_avail_src_sel;
    load_dma_thread3_data_avail_src_sel = 1'b0;
    s2icg_clk_en = rff_s2icg_clk_en;
    load_s2icg_clk_en = 1'b0;
    s2b_dma_thread_cbuf_mode[0] = rff_s2b_dma_thread_cbuf_mode[0];
    load_s2b_dma_thread_cbuf_mode[0] = 1'b0;
    s2b_dma_thread_cbuf_mode[1] = rff_s2b_dma_thread_cbuf_mode[1];
    load_s2b_dma_thread_cbuf_mode[1] = 1'b0;
    s2b_dma_thread_cbuf_mode[2] = rff_s2b_dma_thread_cbuf_mode[2];
    load_s2b_dma_thread_cbuf_mode[2] = 1'b0;
    s2b_dma_thread_cbuf_mode[3] = rff_s2b_dma_thread_cbuf_mode[3];
    load_s2b_dma_thread_cbuf_mode[3] = 1'b0;
    b2s_dma_thread_idle[0] = rff_b2s_dma_thread_idle[0];
    load_b2s_dma_thread_idle[0] = 1'b0;
    b2s_dma_thread_idle[1] = rff_b2s_dma_thread_idle[1];
    load_b2s_dma_thread_idle[1] = 1'b0;
    b2s_dma_thread_idle[2] = rff_b2s_dma_thread_idle[2];
    load_b2s_dma_thread_idle[2] = 1'b0;
    b2s_dma_thread_idle[3] = rff_b2s_dma_thread_idle[3];
    load_b2s_dma_thread_idle[3] = 1'b0;
    dma_thread_cbuf_full_seen[0] = rff_dma_thread_cbuf_full_seen[0];
    load_dma_thread_cbuf_full_seen[0] = 1'b0;
    dma_thread_cbuf_full_seen[1] = rff_dma_thread_cbuf_full_seen[1];
    load_dma_thread_cbuf_full_seen[1] = 1'b0;
    dma_thread_cbuf_full_seen[2] = rff_dma_thread_cbuf_full_seen[2];
    load_dma_thread_cbuf_full_seen[2] = 1'b0;
    dma_thread_cbuf_full_seen[3] = rff_dma_thread_cbuf_full_seen[3];
    load_dma_thread_cbuf_full_seen[3] = 1'b0;
    dma_thread_cmd_vld[0] = rff_dma_thread_cmd_vld[0];
    load_dma_thread_cmd_vld[0] = 1'b0;
    dma_thread_cmd_vld[1] = rff_dma_thread_cmd_vld[1];
    load_dma_thread_cmd_vld[1] = 1'b0;
    dma_thread_cmd_vld[2] = rff_dma_thread_cmd_vld[2];
    load_dma_thread_cmd_vld[2] = 1'b0;
    dma_thread_cmd_vld[3] = rff_dma_thread_cmd_vld[3];
    load_dma_thread_cmd_vld[3] = 1'b0;
    dma_flush_cmd_vld = rff_dma_flush_cmd_vld;
    load_dma_flush_cmd_vld = 1'b0;
    b2s_thread0_intr = rff_b2s_thread0_intr;
    load_b2s_thread0_intr = 1'b0;
    b2s_thread1_intr = rff_b2s_thread1_intr;
    load_b2s_thread1_intr = 1'b0;
    b2s_thread2_intr = rff_b2s_thread2_intr;
    load_b2s_thread2_intr = 1'b0;
    b2s_thread3_intr = rff_b2s_thread3_intr;
    load_b2s_thread3_intr = 1'b0;

    if (station2brb_req_arvalid) begin
      case (1'b1)
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_4 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[4];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_5 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[5];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_6 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[6];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_7 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[7];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_8 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[8];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_9 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[9];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_10 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[10];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_11 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[11];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_12 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[12];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_13 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[13];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_14 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[14];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_15 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[15];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_16 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[16];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_17 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[17];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_18 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[18];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_19 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[19];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_20 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[20];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_21 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[21];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_22 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[22];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_23 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[23];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_24 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[24];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_25 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[25];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_26 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[26];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_27 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[27];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_28 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[28];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_29 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[29];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_30 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[30];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_31 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[31];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_32 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[32];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_33 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[33];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_34 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_en[34];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_4 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[4];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_5 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[5];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_6 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[6];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_7 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[7];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_8 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[8];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_9 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[9];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_10 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[10];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_11 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[11];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_12 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[12];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_13 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[13];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_14 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[14];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_15 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[15];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_16 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[16];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_17 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[17];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_18 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[18];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_19 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[19];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_20 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[20];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_21 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[21];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_22 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[22];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_23 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[23];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_24 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[24];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_25 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[25];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_26 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[26];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_27 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[27];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_28 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[28];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_29 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[29];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_30 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[30];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_31 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[31];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_32 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[32];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_33 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[33];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_34 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_dbg_en[34];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_4 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[4];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_5 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[5];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_6 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[6];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_7 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[7];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_8 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[8];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_9 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[9];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_10 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[10];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_11 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[11];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_12 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[12];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_13 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[13];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_14 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[14];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_15 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[15];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_16 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[16];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_17 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[17];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_18 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[18];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_19 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[19];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_20 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[20];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_21 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[21];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_22 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[22];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_23 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[23];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_24 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[24];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_25 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[25];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_26 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[26];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_27 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[27];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_28 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[28];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_29 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[29];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_30 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[30];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_31 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[31];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_32 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[32];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_33 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[33];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_34 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_plic_intr_core_id[34];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_b2s_plic_intr_src[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_b2s_plic_intr_src[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_b2s_plic_intr_src[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_b2s_plic_intr_src[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_4 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_b2s_plic_intr_src[4];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_src_addr[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_src_addr[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_src_addr[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_src_addr[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_DST_ADDR_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_dst_addr[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_DST_ADDR_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_dst_addr[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_DST_ADDR_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_dst_addr[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_DST_ADDR_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_dst_addr[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_use_8b_align[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_use_8b_align[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_use_8b_align[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_use_8b_align[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_rpt_cnt_less_1[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_rpt_cnt_less_1[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_rpt_cnt_less_1[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_rpt_cnt_less_1[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_length_in_bytes[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_length_in_bytes[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_length_in_bytes[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_length_in_bytes[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_cbuf_size[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_cbuf_size[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_cbuf_size[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_cbuf_size[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_cbuf_thold[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_cbuf_thold[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_cbuf_thold[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_cbuf_thold[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cbuf_rp_addr[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cbuf_rp_addr[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cbuf_rp_addr[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cbuf_rp_addr[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cbuf_wp_addr[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cbuf_wp_addr[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cbuf_wp_addr[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cbuf_wp_addr[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_gather_grpdepth[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_gather_grpdepth[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_gather_grpdepth[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_gather_grpdepth[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_gather_stride[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_gather_stride[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_gather_stride[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_gather_stride[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_FLUSH_ADDR_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_flush_addr;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_FLUSH_REQ_TYPE_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_flush_req_type;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD0_DATA_AVAIL_SRC_SEL_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread0_data_avail_src_sel;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD1_DATA_AVAIL_SRC_SEL_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread1_data_avail_src_sel;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD2_DATA_AVAIL_SRC_SEL_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread2_data_avail_src_sel;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD3_DATA_AVAIL_SRC_SEL_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread3_data_avail_src_sel;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2ICG_CLK_EN_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2icg_clk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_cbuf_mode[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_cbuf_mode[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_cbuf_mode[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_s2b_dma_thread_cbuf_mode[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_DMA_THREAD_IDLE_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_b2s_dma_thread_idle[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_DMA_THREAD_IDLE_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_b2s_dma_thread_idle[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_DMA_THREAD_IDLE_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_b2s_dma_thread_idle[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_DMA_THREAD_IDLE_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_b2s_dma_thread_idle[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cbuf_full_seen[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cbuf_full_seen[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cbuf_full_seen[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cbuf_full_seen[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CMD_VLD_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cmd_vld[0];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CMD_VLD_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cmd_vld[1];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CMD_VLD_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cmd_vld[2];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CMD_VLD_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_thread_cmd_vld[3];
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_FLUSH_CMD_VLD_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_dma_flush_cmd_vld;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_THREAD0_INTR_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_b2s_thread0_intr;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_THREAD1_INTR_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_b2s_thread1_intr;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_THREAD2_INTR_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_b2s_thread2_intr;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_THREAD3_INTR_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          data = rff_b2s_thread3_intr;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        default: begin
          rdec  = 1'b0;
          data  = {STATION_DMA_DATA_WIDTH{1'b0}};
          rresp = AXI_RESP_DECERR;
        end
      endcase
    end
    if (station2brb_req_awvalid & station2brb_req_wvalid) begin
      case (1'b1)
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[0] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[1] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[2] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[3] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_4 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[4] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[4] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_5 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[5] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[5] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_6 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[6] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[6] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_7 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[7] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[7] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_8 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[8] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[8] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_9 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[9] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[9] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_10 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[10] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[10] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_11 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[11] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[11] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_12 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[12] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[12] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_13 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[13] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[13] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_14 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[14] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[14] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_15 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[15] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[15] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_16 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[16] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[16] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_17 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[17] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[17] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_18 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[18] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[18] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_19 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[19] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[19] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_20 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[20] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[20] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_21 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[21] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[21] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_22 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[22] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[22] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_23 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[23] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[23] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_24 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[24] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[24] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_25 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[25] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[25] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_26 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[26] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[26] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_27 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[27] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[27] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_28 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[28] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[28] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_29 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[29] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[29] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_30 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[30] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[30] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_31 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[31] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[31] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_32 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[32] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[32] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_33 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[33] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[33] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_EN_OFFSET__DEPTH_34 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_en[34] = plic_intr_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_EN_WIDTH - 1 : 0]);
          load_s2b_plic_intr_en[34] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[0] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[1] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[2] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[3] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_4 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[4] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[4] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_5 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[5] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[5] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_6 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[6] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[6] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_7 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[7] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[7] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_8 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[8] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[8] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_9 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[9] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[9] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_10 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[10] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[10] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_11 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[11] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[11] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_12 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[12] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[12] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_13 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[13] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[13] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_14 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[14] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[14] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_15 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[15] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[15] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_16 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[16] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[16] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_17 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[17] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[17] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_18 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[18] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[18] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_19 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[19] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[19] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_20 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[20] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[20] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_21 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[21] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[21] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_22 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[22] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[22] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_23 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[23] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[23] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_24 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[24] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[24] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_25 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[25] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[25] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_26 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[26] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[26] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_27 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[27] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[27] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_28 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[28] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[28] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_29 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[29] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[29] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_30 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[30] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[30] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_31 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[31] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[31] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_32 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[32] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[32] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_33 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[33] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[33] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_DBG_EN_OFFSET__DEPTH_34 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_dbg_en[34] = plic_dbg_en_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_DBG_EN_WIDTH - 1 : 0]);
          load_s2b_plic_dbg_en[34] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[0] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[1] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[2] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[3] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_4 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[4] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[4] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_5 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[5] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[5] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_6 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[6] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[6] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_7 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[7] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[7] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_8 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[8] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[8] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_9 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[9] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[9] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_10 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[10] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[10] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_11 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[11] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[11] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_12 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[12] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[12] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_13 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[13] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[13] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_14 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[14] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[14] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_15 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[15] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[15] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_16 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[16] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[16] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_17 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[17] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[17] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_18 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[18] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[18] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_19 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[19] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[19] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_20 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[20] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[20] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_21 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[21] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[21] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_22 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[22] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[22] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_23 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[23] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[23] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_24 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[24] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[24] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_25 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[25] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[25] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_26 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[26] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[26] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_27 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[27] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[27] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_28 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[28] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[28] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_29 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[29] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[29] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_30 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[30] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[30] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_31 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[31] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[31] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_32 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[32] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[32] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_33 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[33] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[33] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_PLIC_INTR_CORE_ID_OFFSET__DEPTH_34 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_plic_intr_core_id[34] = plic_intr_core_id_t'(station2brb_req_w.wdata[STATION_DMA_S2B_PLIC_INTR_CORE_ID_WIDTH - 1 : 0]);
          load_s2b_plic_intr_core_id[34] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          b2s_plic_intr_src[0] = plic_intr_src_t'(station2brb_req_w.wdata[STATION_DMA_B2S_PLIC_INTR_SRC_WIDTH - 1 : 0]);
          load_b2s_plic_intr_src[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          b2s_plic_intr_src[1] = plic_intr_src_t'(station2brb_req_w.wdata[STATION_DMA_B2S_PLIC_INTR_SRC_WIDTH - 1 : 0]);
          load_b2s_plic_intr_src[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          b2s_plic_intr_src[2] = plic_intr_src_t'(station2brb_req_w.wdata[STATION_DMA_B2S_PLIC_INTR_SRC_WIDTH - 1 : 0]);
          load_b2s_plic_intr_src[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          b2s_plic_intr_src[3] = plic_intr_src_t'(station2brb_req_w.wdata[STATION_DMA_B2S_PLIC_INTR_SRC_WIDTH - 1 : 0]);
          load_b2s_plic_intr_src[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_PLIC_INTR_SRC_OFFSET__DEPTH_4 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          b2s_plic_intr_src[4] = plic_intr_src_t'(station2brb_req_w.wdata[STATION_DMA_B2S_PLIC_INTR_SRC_WIDTH - 1 : 0]);
          load_b2s_plic_intr_src[4] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_src_addr[0] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_WIDTH - 1 : 0]);
          load_s2b_dma_thread_src_addr[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_src_addr[1] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_WIDTH - 1 : 0]);
          load_s2b_dma_thread_src_addr[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_src_addr[2] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_WIDTH - 1 : 0]);
          load_s2b_dma_thread_src_addr[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_src_addr[3] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_SRC_ADDR_WIDTH - 1 : 0]);
          load_s2b_dma_thread_src_addr[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_DST_ADDR_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_dst_addr[0] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_DST_ADDR_WIDTH - 1 : 0]);
          load_s2b_dma_thread_dst_addr[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_DST_ADDR_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_dst_addr[1] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_DST_ADDR_WIDTH - 1 : 0]);
          load_s2b_dma_thread_dst_addr[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_DST_ADDR_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_dst_addr[2] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_DST_ADDR_WIDTH - 1 : 0]);
          load_s2b_dma_thread_dst_addr[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_DST_ADDR_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_dst_addr[3] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_DST_ADDR_WIDTH - 1 : 0]);
          load_s2b_dma_thread_dst_addr[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_use_8b_align[0] = dma_thread_align_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_WIDTH - 1 : 0]);
          load_s2b_dma_thread_use_8b_align[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_use_8b_align[1] = dma_thread_align_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_WIDTH - 1 : 0]);
          load_s2b_dma_thread_use_8b_align[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_use_8b_align[2] = dma_thread_align_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_WIDTH - 1 : 0]);
          load_s2b_dma_thread_use_8b_align[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_use_8b_align[3] = dma_thread_align_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_USE_8B_ALIGN_WIDTH - 1 : 0]);
          load_s2b_dma_thread_use_8b_align[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_rpt_cnt_less_1[0] = dma_thread_rpt_cnt_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_WIDTH - 1 : 0]);
          load_s2b_dma_thread_rpt_cnt_less_1[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_rpt_cnt_less_1[1] = dma_thread_rpt_cnt_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_WIDTH - 1 : 0]);
          load_s2b_dma_thread_rpt_cnt_less_1[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_rpt_cnt_less_1[2] = dma_thread_rpt_cnt_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_WIDTH - 1 : 0]);
          load_s2b_dma_thread_rpt_cnt_less_1[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_rpt_cnt_less_1[3] = dma_thread_rpt_cnt_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_RPT_CNT_LESS_1_WIDTH - 1 : 0]);
          load_s2b_dma_thread_rpt_cnt_less_1[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_length_in_bytes[0] = ring_data_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_WIDTH - 1 : 0]);
          load_s2b_dma_thread_length_in_bytes[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_length_in_bytes[1] = ring_data_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_WIDTH - 1 : 0]);
          load_s2b_dma_thread_length_in_bytes[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_length_in_bytes[2] = ring_data_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_WIDTH - 1 : 0]);
          load_s2b_dma_thread_length_in_bytes[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_length_in_bytes[3] = ring_data_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_LENGTH_IN_BYTES_WIDTH - 1 : 0]);
          load_s2b_dma_thread_length_in_bytes[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_cbuf_size[0] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_WIDTH - 1 : 0]);
          load_s2b_dma_thread_cbuf_size[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_cbuf_size[1] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_WIDTH - 1 : 0]);
          load_s2b_dma_thread_cbuf_size[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_cbuf_size[2] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_WIDTH - 1 : 0]);
          load_s2b_dma_thread_cbuf_size[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_cbuf_size[3] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_CBUF_SIZE_WIDTH - 1 : 0]);
          load_s2b_dma_thread_cbuf_size[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_cbuf_thold[0] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_WIDTH - 1 : 0]);
          load_s2b_dma_thread_cbuf_thold[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_cbuf_thold[1] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_WIDTH - 1 : 0]);
          load_s2b_dma_thread_cbuf_thold[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_cbuf_thold[2] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_WIDTH - 1 : 0]);
          load_s2b_dma_thread_cbuf_thold[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_cbuf_thold[3] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_CBUF_THOLD_WIDTH - 1 : 0]);
          load_s2b_dma_thread_cbuf_thold[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cbuf_rp_addr[0] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_WIDTH - 1 : 0]);
          load_dma_thread_cbuf_rp_addr[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cbuf_rp_addr[1] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_WIDTH - 1 : 0]);
          load_dma_thread_cbuf_rp_addr[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cbuf_rp_addr[2] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_WIDTH - 1 : 0]);
          load_dma_thread_cbuf_rp_addr[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cbuf_rp_addr[3] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CBUF_RP_ADDR_WIDTH - 1 : 0]);
          load_dma_thread_cbuf_rp_addr[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cbuf_wp_addr[0] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_WIDTH - 1 : 0]);
          load_dma_thread_cbuf_wp_addr[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cbuf_wp_addr[1] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_WIDTH - 1 : 0]);
          load_dma_thread_cbuf_wp_addr[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cbuf_wp_addr[2] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_WIDTH - 1 : 0]);
          load_dma_thread_cbuf_wp_addr[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cbuf_wp_addr[3] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CBUF_WP_ADDR_WIDTH - 1 : 0]);
          load_dma_thread_cbuf_wp_addr[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_gather_grpdepth[0] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_WIDTH - 1 : 0]);
          load_s2b_dma_thread_gather_grpdepth[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_gather_grpdepth[1] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_WIDTH - 1 : 0]);
          load_s2b_dma_thread_gather_grpdepth[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_gather_grpdepth[2] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_WIDTH - 1 : 0]);
          load_s2b_dma_thread_gather_grpdepth[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_gather_grpdepth[3] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_GATHER_GRPDEPTH_WIDTH - 1 : 0]);
          load_s2b_dma_thread_gather_grpdepth[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_gather_stride[0] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_WIDTH - 1 : 0]);
          load_s2b_dma_thread_gather_stride[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_gather_stride[1] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_WIDTH - 1 : 0]);
          load_s2b_dma_thread_gather_stride[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_gather_stride[2] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_WIDTH - 1 : 0]);
          load_s2b_dma_thread_gather_stride[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_gather_stride[3] = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_GATHER_STRIDE_WIDTH - 1 : 0]);
          load_s2b_dma_thread_gather_stride[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_FLUSH_ADDR_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_flush_addr = ring_addr_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_FLUSH_ADDR_WIDTH - 1 : 0]);
          load_s2b_dma_flush_addr = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_FLUSH_REQ_TYPE_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_flush_req_type = dma_flush_type_t'(station2brb_req_w.wdata[STATION_DMA_S2B_DMA_FLUSH_REQ_TYPE_WIDTH - 1 : 0]);
          load_s2b_dma_flush_req_type = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD0_DATA_AVAIL_SRC_SEL_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread0_data_avail_src_sel = station2brb_req_w.wdata[STATION_DMA_DMA_THREAD0_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0];
          load_dma_thread0_data_avail_src_sel = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD1_DATA_AVAIL_SRC_SEL_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread1_data_avail_src_sel = station2brb_req_w.wdata[STATION_DMA_DMA_THREAD1_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0];
          load_dma_thread1_data_avail_src_sel = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD2_DATA_AVAIL_SRC_SEL_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread2_data_avail_src_sel = station2brb_req_w.wdata[STATION_DMA_DMA_THREAD2_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0];
          load_dma_thread2_data_avail_src_sel = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD3_DATA_AVAIL_SRC_SEL_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread3_data_avail_src_sel = station2brb_req_w.wdata[STATION_DMA_DMA_THREAD3_DATA_AVAIL_SRC_SEL_WIDTH - 1 : 0];
          load_dma_thread3_data_avail_src_sel = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2ICG_CLK_EN_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2icg_clk_en = station2brb_req_w.wdata[STATION_DMA_S2ICG_CLK_EN_WIDTH - 1 : 0];
          load_s2icg_clk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_cbuf_mode[0] = station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_WIDTH - 1 : 0];
          load_s2b_dma_thread_cbuf_mode[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_cbuf_mode[1] = station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_WIDTH - 1 : 0];
          load_s2b_dma_thread_cbuf_mode[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_cbuf_mode[2] = station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_WIDTH - 1 : 0];
          load_s2b_dma_thread_cbuf_mode[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          s2b_dma_thread_cbuf_mode[3] = station2brb_req_w.wdata[STATION_DMA_S2B_DMA_THREAD_CBUF_MODE_WIDTH - 1 : 0];
          load_s2b_dma_thread_cbuf_mode[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_DMA_THREAD_IDLE_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          b2s_dma_thread_idle[0] = station2brb_req_w.wdata[STATION_DMA_B2S_DMA_THREAD_IDLE_WIDTH - 1 : 0];
          load_b2s_dma_thread_idle[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_DMA_THREAD_IDLE_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          b2s_dma_thread_idle[1] = station2brb_req_w.wdata[STATION_DMA_B2S_DMA_THREAD_IDLE_WIDTH - 1 : 0];
          load_b2s_dma_thread_idle[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_DMA_THREAD_IDLE_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          b2s_dma_thread_idle[2] = station2brb_req_w.wdata[STATION_DMA_B2S_DMA_THREAD_IDLE_WIDTH - 1 : 0];
          load_b2s_dma_thread_idle[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_DMA_THREAD_IDLE_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          b2s_dma_thread_idle[3] = station2brb_req_w.wdata[STATION_DMA_B2S_DMA_THREAD_IDLE_WIDTH - 1 : 0];
          load_b2s_dma_thread_idle[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cbuf_full_seen[0] = station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_WIDTH - 1 : 0];
          load_dma_thread_cbuf_full_seen[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cbuf_full_seen[1] = station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_WIDTH - 1 : 0];
          load_dma_thread_cbuf_full_seen[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cbuf_full_seen[2] = station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_WIDTH - 1 : 0];
          load_dma_thread_cbuf_full_seen[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cbuf_full_seen[3] = station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CBUF_FULL_SEEN_WIDTH - 1 : 0];
          load_dma_thread_cbuf_full_seen[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CMD_VLD_OFFSET__DEPTH_0 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cmd_vld[0] = dma_thread_cmd_vld_t'(station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CMD_VLD_WIDTH - 1 : 0]);
          load_dma_thread_cmd_vld[0] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CMD_VLD_OFFSET__DEPTH_1 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cmd_vld[1] = dma_thread_cmd_vld_t'(station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CMD_VLD_WIDTH - 1 : 0]);
          load_dma_thread_cmd_vld[1] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CMD_VLD_OFFSET__DEPTH_2 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cmd_vld[2] = dma_thread_cmd_vld_t'(station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CMD_VLD_WIDTH - 1 : 0]);
          load_dma_thread_cmd_vld[2] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_THREAD_CMD_VLD_OFFSET__DEPTH_3 >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_thread_cmd_vld[3] = dma_thread_cmd_vld_t'(station2brb_req_w.wdata[STATION_DMA_DMA_THREAD_CMD_VLD_WIDTH - 1 : 0]);
          load_dma_thread_cmd_vld[3] = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_DMA_FLUSH_CMD_VLD_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          dma_flush_cmd_vld = station2brb_req_w.wdata[STATION_DMA_DMA_FLUSH_CMD_VLD_WIDTH - 1 : 0];
          load_dma_flush_cmd_vld = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_THREAD0_INTR_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          b2s_thread0_intr = station2brb_req_w.wdata[STATION_DMA_B2S_THREAD0_INTR_WIDTH - 1 : 0];
          load_b2s_thread0_intr = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_THREAD1_INTR_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          b2s_thread1_intr = station2brb_req_w.wdata[STATION_DMA_B2S_THREAD1_INTR_WIDTH - 1 : 0];
          load_b2s_thread1_intr = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_THREAD2_INTR_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          b2s_thread2_intr = station2brb_req_w.wdata[STATION_DMA_B2S_THREAD2_INTR_WIDTH - 1 : 0];
          load_b2s_thread2_intr = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_DMA_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_DMA_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_DMA_DATA_WIDTH/8)]} == (STATION_DMA_B2S_THREAD3_INTR_OFFSET >> $clog2(STATION_DMA_DATA_WIDTH/8)))): begin
          b2s_thread3_intr = station2brb_req_w.wdata[STATION_DMA_B2S_THREAD3_INTR_WIDTH - 1 : 0];
          load_b2s_thread3_intr = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        default: begin
          bdec  = 1'b0;
          bresp = AXI_RESP_DECERR;
        end
      endcase
    end
  end

  // Response Muxing
  oursring_resp_if_b_t  i_resp_if_b[2];
  oursring_resp_if_r_t  i_resp_if_r[2];
  logic                 i_resp_if_rvalid[2];
  logic                 i_resp_if_rready[2];
  logic                 i_resp_if_bvalid[2];
  logic                 i_resp_if_bready[2];
  oursring_resp_if_b_t  o_resp_ppln_if_b[1];
  oursring_resp_if_r_t  o_resp_ppln_if_r[1];
  logic                 o_resp_ppln_if_rvalid[1];
  logic                 o_resp_ppln_if_rready[1];
  logic                 o_resp_ppln_if_bvalid[1];
  logic                 o_resp_ppln_if_bready[1];

  logic                 rff_awrdy, rff_wrdy, next_awrdy, next_wrdy;
  // Request Bypassing
  assign o_req_local_if_awvalid  = (station2brb_req_awvalid & ~bdec) & ~rff_awrdy;
  assign o_req_local_if_wvalid   = (station2brb_req_wvalid & ~bdec) & ~rff_wrdy;
  assign o_req_local_if_arvalid  = (station2brb_req_arvalid & ~rdec);
  assign o_req_local_if_ar       = station2brb_req_ar;
  assign o_req_local_if_aw       = station2brb_req_aw;
  assign o_req_local_if_w        = station2brb_req_w;

  // Request Readys
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_awrdy <= 1'b0;
      rff_wrdy  <= 1'b0;
    end else begin
      rff_awrdy <= next_awrdy;
      rff_wrdy  <= next_wrdy;
    end
  end
  always_comb begin
    next_awrdy = rff_awrdy;
    next_wrdy  = rff_wrdy;
    if ((~bdec & o_req_local_if_awready & o_req_local_if_awvalid) | (bdec & i_resp_if_bready[0])) begin
      next_awrdy = 1'b1;
    end else if (rff_awrdy & rff_wrdy) begin
      next_awrdy = 1'b0;
    end
    if ((~bdec & o_req_local_if_wready & o_req_local_if_wvalid)  | (bdec & i_resp_if_bready[0])) begin
      next_wrdy = 1'b1;
    end else if (rff_awrdy & rff_wrdy) begin
      next_wrdy = 1'b0;
    end
  end
  assign station2brb_req_awready  = rff_awrdy & rff_wrdy;
  assign station2brb_req_wready   = rff_awrdy & rff_wrdy;

  assign station2brb_req_arready  = (~rdec & o_req_local_if_arready) | (rdec & i_resp_if_rready[0]);

  // if 1, means input port i's destination station id matches output j's station id
  logic [1:0][0:0]      is_r_dst_match;
  logic [1:0][0:0]      is_b_dst_match;

  oursring_resp_if_b_t  brb_b;
  oursring_resp_if_r_t  brb_r;

  assign brb_b.bid   = station2brb_req_aw.awid;
  assign brb_b.bresp = bresp;

  assign brb_r.rid   = station2brb_req_ar.arid;
  assign brb_r.rresp = rresp;
  assign brb_r.rdata = data;
  assign brb_r.rlast = 1'b1;

  assign i_resp_if_b[0] = brb_b;
  assign i_resp_if_b[1] = i_resp_local_if_b;

  assign i_resp_if_r[0] = brb_r;
  assign i_resp_if_r[1] = i_resp_local_if_r;

  assign i_resp_if_rvalid[0] = station2brb_req_arvalid & rdec;
  assign i_resp_if_rvalid[1] = i_resp_local_if_rvalid;

  assign i_resp_local_if_rready = i_resp_if_rready[1];

  assign i_resp_if_bvalid[0] = station2brb_req_awvalid & station2brb_req_wvalid & bdec & ~rff_awrdy & ~rff_wrdy;
  assign i_resp_if_bvalid[1] = i_resp_local_if_bvalid;

  assign i_resp_local_if_bready = i_resp_if_bready[1];

  assign station2brb_rsp_b        = o_resp_ppln_if_b[0];
  assign station2brb_rsp_r        = o_resp_ppln_if_r[0];
  assign station2brb_rsp_rvalid   = o_resp_ppln_if_rvalid[0];
  assign o_resp_ppln_if_rready[0] = station2brb_rsp_rready;
  assign station2brb_rsp_bvalid   = o_resp_ppln_if_bvalid[0];
  assign o_resp_ppln_if_bready[0] = station2brb_rsp_bready;
  
  assign is_r_dst_match = 2'b11;
  assign is_b_dst_match = 2'b11;

  oursring_resp #(.N_IN_PORT(2), .N_OUT_PORT(1)) resp_u (
    .i_resp_if_b            (i_resp_if_b),
    .i_resp_if_r            (i_resp_if_r),
    .i_resp_if_rvalid       (i_resp_if_rvalid),
    .i_resp_if_rready       (i_resp_if_rready),
    .i_resp_if_bvalid       (i_resp_if_bvalid),
    .i_resp_if_bready       (i_resp_if_bready),
    .o_resp_ppln_if_b       (o_resp_ppln_if_b),
    .o_resp_ppln_if_r       (o_resp_ppln_if_r),
    .o_resp_ppln_if_rvalid  (o_resp_ppln_if_rvalid),
    .o_resp_ppln_if_rready  (o_resp_ppln_if_rready),
    .o_resp_ppln_if_bvalid  (o_resp_ppln_if_bvalid),
    .o_resp_ppln_if_bready  (o_resp_ppln_if_bready),
    .is_r_dst_match         (is_r_dst_match),
    .is_b_dst_match         (is_b_dst_match),
    .rstn                   (rstn),
    .clk                    (clk)
    );
  
endmodule
`endif
`endif
