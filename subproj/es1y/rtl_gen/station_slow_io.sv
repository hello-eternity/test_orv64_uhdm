
// Copyright 2021 RISC-V International Open Source Laboratory (RIOS Lab). All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.




`ifdef PYGMY_ES1Y
`ifndef STATION_SLOW_IO_PKG__SV
`define STATION_SLOW_IO_PKG__SV
package station_slow_io_pkg;
  localparam int STATION_SLOW_IO_RING_ADDR_WIDTH = 'h19;
  localparam int STATION_SLOW_IO_DATA_WIDTH = 'h40;
  localparam [STATION_SLOW_IO_RING_ADDR_WIDTH-1:0] STATION_SLOW_IO_MAX_RING_ADDR = 'h1ffffff;
  localparam int STATION_SLOW_IO_BLKID = 'h5;
  localparam int STATION_SLOW_IO_BLKID_WIDTH = 'h3;
  localparam bit [25 - 1:0] STATION_SLOW_IO_FLASH_OFFSET = 64'h200000;
  localparam int STATION_SLOW_IO_FLASH_WIDTH  = 16777216;
  localparam bit [64 - 1:0] STATION_SLOW_IO_FLASH_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_FLASH_ADDR = 64'h1600000;
  localparam bit [25 - 1:0] STATION_SLOW_IO_QSPIM_BLOCK_REG_OFFSET = 64'h0;
  localparam int STATION_SLOW_IO_QSPIM_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_QSPIM_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_QSPIM_BLOCK_REG_ADDR = 64'h1400000;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSPIM0_BLOCK_REG_OFFSET = 64'h400;
  localparam int STATION_SLOW_IO_SSPIM0_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSPIM0_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSPIM0_BLOCK_REG_ADDR = 64'h1400400;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSPIM1_BLOCK_REG_OFFSET = 64'h800;
  localparam int STATION_SLOW_IO_SSPIM1_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSPIM1_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSPIM1_BLOCK_REG_ADDR = 64'h1400800;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSPIM2_BLOCK_REG_OFFSET = 64'hc00;
  localparam int STATION_SLOW_IO_SSPIM2_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSPIM2_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSPIM2_BLOCK_REG_ADDR = 64'h1400c00;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SPIS_BLOCK_REG_OFFSET = 64'h1000;
  localparam int STATION_SLOW_IO_SPIS_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SPIS_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SPIS_BLOCK_REG_ADDR = 64'h1401000;
  localparam bit [25 - 1:0] STATION_SLOW_IO_UART0_BLOCK_REG_OFFSET = 64'h1400;
  localparam int STATION_SLOW_IO_UART0_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_UART0_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_UART0_BLOCK_REG_ADDR = 64'h1401400;
  localparam bit [25 - 1:0] STATION_SLOW_IO_UART1_BLOCK_REG_OFFSET = 64'h1800;
  localparam int STATION_SLOW_IO_UART1_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_UART1_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_UART1_BLOCK_REG_ADDR = 64'h1401800;
  localparam bit [25 - 1:0] STATION_SLOW_IO_UART2_BLOCK_REG_OFFSET = 64'h1c00;
  localparam int STATION_SLOW_IO_UART2_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_UART2_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_UART2_BLOCK_REG_ADDR = 64'h1401c00;
  localparam bit [25 - 1:0] STATION_SLOW_IO_UART3_BLOCK_REG_OFFSET = 64'h2000;
  localparam int STATION_SLOW_IO_UART3_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_UART3_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_UART3_BLOCK_REG_ADDR = 64'h1402000;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SM_BLOCK_REG_OFFSET = 64'h2400;
  localparam int STATION_SLOW_IO_I2SM_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_I2SM_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SM_BLOCK_REG_ADDR = 64'h1402400;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SS0_BLOCK_REG_OFFSET = 64'h2800;
  localparam int STATION_SLOW_IO_I2SS0_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_I2SS0_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SS0_BLOCK_REG_ADDR = 64'h1402800;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SS1_BLOCK_REG_OFFSET = 64'h2c00;
  localparam int STATION_SLOW_IO_I2SS1_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_I2SS1_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SS1_BLOCK_REG_ADDR = 64'h1402c00;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SS2_BLOCK_REG_OFFSET = 64'h3000;
  localparam int STATION_SLOW_IO_I2SS2_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_I2SS2_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SS2_BLOCK_REG_ADDR = 64'h1403000;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SS3_BLOCK_REG_OFFSET = 64'h3400;
  localparam int STATION_SLOW_IO_I2SS3_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_I2SS3_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SS3_BLOCK_REG_ADDR = 64'h1403400;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SS4_BLOCK_REG_OFFSET = 64'h3800;
  localparam int STATION_SLOW_IO_I2SS4_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_I2SS4_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SS4_BLOCK_REG_ADDR = 64'h1403800;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SS5_BLOCK_REG_OFFSET = 64'h3c00;
  localparam int STATION_SLOW_IO_I2SS5_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_I2SS5_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2SS5_BLOCK_REG_ADDR = 64'h1403c00;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2C0_BLOCK_REG_OFFSET = 64'h4000;
  localparam int STATION_SLOW_IO_I2C0_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_I2C0_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2C0_BLOCK_REG_ADDR = 64'h1404000;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2C1_BLOCK_REG_OFFSET = 64'h4400;
  localparam int STATION_SLOW_IO_I2C1_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_I2C1_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2C1_BLOCK_REG_ADDR = 64'h1404400;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2C2_BLOCK_REG_OFFSET = 64'h4800;
  localparam int STATION_SLOW_IO_I2C2_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_I2C2_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_I2C2_BLOCK_REG_ADDR = 64'h1404800;
  localparam bit [25 - 1:0] STATION_SLOW_IO_GPIO_BLOCK_REG_OFFSET = 64'h4c00;
  localparam int STATION_SLOW_IO_GPIO_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_GPIO_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_GPIO_BLOCK_REG_ADDR = 64'h1404c00;
  localparam bit [25 - 1:0] STATION_SLOW_IO_RTC_BLOCK_REG_OFFSET = 64'h5000;
  localparam int STATION_SLOW_IO_RTC_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_RTC_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_RTC_BLOCK_REG_ADDR = 64'h1405000;
  localparam bit [25 - 1:0] STATION_SLOW_IO_TIMERS_BLOCK_REG_OFFSET = 64'h5400;
  localparam int STATION_SLOW_IO_TIMERS_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_TIMERS_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_TIMERS_BLOCK_REG_ADDR = 64'h1405400;
  localparam bit [25 - 1:0] STATION_SLOW_IO_WDT_BLOCK_REG_OFFSET = 64'h5800;
  localparam int STATION_SLOW_IO_WDT_BLOCK_REG_WIDTH  = 8192;
  localparam bit [64 - 1:0] STATION_SLOW_IO_WDT_BLOCK_REG_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_WDT_BLOCK_REG_ADDR = 64'h1405800;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SM_CLKDIV_HALF_DIV_LESS_1_OFFSET = 64'h5c00;
  localparam int STATION_SLOW_IO_S2B_I2SM_CLKDIV_HALF_DIV_LESS_1_WIDTH  = 16;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SM_CLKDIV_HALF_DIV_LESS_1_RSTVAL = 5;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SM_CLKDIV_HALF_DIV_LESS_1_ADDR = 64'h1405c00;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS0_CLKDIV_HALF_DIV_LESS_1_OFFSET = 64'h5c08;
  localparam int STATION_SLOW_IO_S2B_I2SS0_CLKDIV_HALF_DIV_LESS_1_WIDTH  = 16;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SS0_CLKDIV_HALF_DIV_LESS_1_RSTVAL = 5;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS0_CLKDIV_HALF_DIV_LESS_1_ADDR = 64'h1405c08;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS1_CLKDIV_HALF_DIV_LESS_1_OFFSET = 64'h5c10;
  localparam int STATION_SLOW_IO_S2B_I2SS1_CLKDIV_HALF_DIV_LESS_1_WIDTH  = 16;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SS1_CLKDIV_HALF_DIV_LESS_1_RSTVAL = 5;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS1_CLKDIV_HALF_DIV_LESS_1_ADDR = 64'h1405c10;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS2_CLKDIV_HALF_DIV_LESS_1_OFFSET = 64'h5c18;
  localparam int STATION_SLOW_IO_S2B_I2SS2_CLKDIV_HALF_DIV_LESS_1_WIDTH  = 16;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SS2_CLKDIV_HALF_DIV_LESS_1_RSTVAL = 5;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS2_CLKDIV_HALF_DIV_LESS_1_ADDR = 64'h1405c18;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS3_CLKDIV_HALF_DIV_LESS_1_OFFSET = 64'h5c20;
  localparam int STATION_SLOW_IO_S2B_I2SS3_CLKDIV_HALF_DIV_LESS_1_WIDTH  = 16;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SS3_CLKDIV_HALF_DIV_LESS_1_RSTVAL = 5;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS3_CLKDIV_HALF_DIV_LESS_1_ADDR = 64'h1405c20;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS4_CLKDIV_HALF_DIV_LESS_1_OFFSET = 64'h5c28;
  localparam int STATION_SLOW_IO_S2B_I2SS4_CLKDIV_HALF_DIV_LESS_1_WIDTH  = 16;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SS4_CLKDIV_HALF_DIV_LESS_1_RSTVAL = 5;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS4_CLKDIV_HALF_DIV_LESS_1_ADDR = 64'h1405c28;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS5_CLKDIV_HALF_DIV_LESS_1_OFFSET = 64'h5c30;
  localparam int STATION_SLOW_IO_S2B_I2SS5_CLKDIV_HALF_DIV_LESS_1_WIDTH  = 16;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SS5_CLKDIV_HALF_DIV_LESS_1_RSTVAL = 5;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS5_CLKDIV_HALF_DIV_LESS_1_ADDR = 64'h1405c30;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_TIMER_EN_OFFSET = 64'h5c38;
  localparam int STATION_SLOW_IO_B2S_TIMER_EN_WIDTH  = 8;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_TIMER_EN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_TIMER_EN_ADDR = 64'h1405c38;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_CLKF_OFFSET = 64'h5c40;
  localparam int STATION_SLOW_IO_SCU_FUNC_CLKF_WIDTH  = 6;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_FUNC_CLKF_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_CLKF_ADDR = 64'h1405c40;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_BWADJ_OFFSET = 64'h5c48;
  localparam int STATION_SLOW_IO_SCU_FUNC_BWADJ_WIDTH  = 6;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_FUNC_BWADJ_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_BWADJ_ADDR = 64'h1405c48;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_MST_CSTATE_OFFSET = 64'h5c50;
  localparam int STATION_SLOW_IO_B2S_I2C0_DEBUG_MST_CSTATE_WIDTH  = 5;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_MST_CSTATE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_MST_CSTATE_ADDR = 64'h1405c50;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_MST_CSTATE_OFFSET = 64'h5c58;
  localparam int STATION_SLOW_IO_B2S_I2C1_DEBUG_MST_CSTATE_WIDTH  = 5;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_MST_CSTATE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_MST_CSTATE_ADDR = 64'h1405c58;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_MST_CSTATE_OFFSET = 64'h5c60;
  localparam int STATION_SLOW_IO_B2S_I2C2_DEBUG_MST_CSTATE_WIDTH  = 5;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_MST_CSTATE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_MST_CSTATE_ADDR = 64'h1405c60;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_CLKR_OFFSET = 64'h5c68;
  localparam int STATION_SLOW_IO_SCU_FUNC_CLKR_WIDTH  = 4;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_FUNC_CLKR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_CLKR_ADDR = 64'h1405c68;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_CLKOD_OFFSET = 64'h5c70;
  localparam int STATION_SLOW_IO_SCU_FUNC_CLKOD_WIDTH  = 4;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_FUNC_CLKOD_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_CLKOD_ADDR = 64'h1405c70;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_SLV_CSTATE_OFFSET = 64'h5c78;
  localparam int STATION_SLOW_IO_B2S_I2C0_DEBUG_SLV_CSTATE_WIDTH  = 4;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_SLV_CSTATE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_SLV_CSTATE_ADDR = 64'h1405c78;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_SLV_CSTATE_OFFSET = 64'h5c80;
  localparam int STATION_SLOW_IO_B2S_I2C1_DEBUG_SLV_CSTATE_WIDTH  = 4;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_SLV_CSTATE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_SLV_CSTATE_ADDR = 64'h1405c80;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_SLV_CSTATE_OFFSET = 64'h5c88;
  localparam int STATION_SLOW_IO_B2S_I2C2_DEBUG_SLV_CSTATE_WIDTH  = 4;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_SLV_CSTATE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_SLV_CSTATE_ADDR = 64'h1405c88;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_LP_MODE_OFFSET = 64'h5c90;
  localparam int STATION_SLOW_IO_SCU_LP_MODE_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_LP_MODE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_LP_MODE_ADDR = 64'h1405c90;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_0_OFFSET = 64'h5c98;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_0_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_0_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_0_ADDR = 64'h1405c98;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_1_OFFSET = 64'h5ca0;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_1_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_1_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_1_ADDR = 64'h1405ca0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_2_OFFSET = 64'h5ca8;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_2_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_2_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_2_ADDR = 64'h1405ca8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_3_OFFSET = 64'h5cb0;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_3_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_3_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_3_ADDR = 64'h1405cb0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_4_OFFSET = 64'h5cb8;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_4_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_4_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_4_ADDR = 64'h1405cb8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_5_OFFSET = 64'h5cc0;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_5_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_5_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_5_ADDR = 64'h1405cc0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_6_OFFSET = 64'h5cc8;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_6_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_6_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_6_ADDR = 64'h1405cc8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_7_OFFSET = 64'h5cd0;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_7_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_7_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_7_ADDR = 64'h1405cd0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_8_OFFSET = 64'h5cd8;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_8_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_8_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_8_ADDR = 64'h1405cd8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_9_OFFSET = 64'h5ce0;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_9_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_9_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_9_ADDR = 64'h1405ce0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_10_OFFSET = 64'h5ce8;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_10_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_10_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_10_ADDR = 64'h1405ce8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_11_OFFSET = 64'h5cf0;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_11_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_11_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_11_ADDR = 64'h1405cf0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_12_OFFSET = 64'h5cf8;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_12_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_12_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_12_ADDR = 64'h1405cf8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_13_OFFSET = 64'h5d00;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_13_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_13_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_13_ADDR = 64'h1405d00;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_14_OFFSET = 64'h5d08;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_14_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_14_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_14_ADDR = 64'h1405d08;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_15_OFFSET = 64'h5d10;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_15_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_15_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_15_ADDR = 64'h1405d10;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_16_OFFSET = 64'h5d18;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_16_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_16_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_16_ADDR = 64'h1405d18;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_17_OFFSET = 64'h5d20;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_17_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_17_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_17_ADDR = 64'h1405d20;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_18_OFFSET = 64'h5d28;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_18_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_18_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_18_ADDR = 64'h1405d28;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_19_OFFSET = 64'h5d30;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_19_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_19_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_19_ADDR = 64'h1405d30;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_20_OFFSET = 64'h5d38;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_20_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_20_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_20_ADDR = 64'h1405d38;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_21_OFFSET = 64'h5d40;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_21_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_21_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_21_ADDR = 64'h1405d40;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_22_OFFSET = 64'h5d48;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_22_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_22_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_22_ADDR = 64'h1405d48;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_23_OFFSET = 64'h5d50;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_23_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_23_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_23_ADDR = 64'h1405d50;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_24_OFFSET = 64'h5d58;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_24_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_24_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_24_ADDR = 64'h1405d58;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_25_OFFSET = 64'h5d60;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_25_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_25_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_25_ADDR = 64'h1405d60;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_26_OFFSET = 64'h5d68;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_26_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_26_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_26_ADDR = 64'h1405d68;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_27_OFFSET = 64'h5d70;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_27_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_27_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_27_ADDR = 64'h1405d70;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_28_OFFSET = 64'h5d78;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_28_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_28_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_28_ADDR = 64'h1405d78;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_29_OFFSET = 64'h5d80;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_29_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_29_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_29_ADDR = 64'h1405d80;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_30_OFFSET = 64'h5d88;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_30_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_30_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_30_ADDR = 64'h1405d88;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_31_OFFSET = 64'h5d90;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_31_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_31_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_31_ADDR = 64'h1405d90;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_32_OFFSET = 64'h5d98;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_32_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_32_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_32_ADDR = 64'h1405d98;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_33_OFFSET = 64'h5da0;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_33_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_33_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_33_ADDR = 64'h1405da0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_34_OFFSET = 64'h5da8;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_34_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_34_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_34_ADDR = 64'h1405da8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_35_OFFSET = 64'h5db0;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_35_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_35_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_35_ADDR = 64'h1405db0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_36_OFFSET = 64'h5db8;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_36_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_36_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_36_ADDR = 64'h1405db8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_37_OFFSET = 64'h5dc0;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_37_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_37_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_37_ADDR = 64'h1405dc0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_38_OFFSET = 64'h5dc8;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_38_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_38_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_38_ADDR = 64'h1405dc8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_39_OFFSET = 64'h5dd0;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_39_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_39_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_39_ADDR = 64'h1405dd0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_40_OFFSET = 64'h5dd8;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_40_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_40_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_40_ADDR = 64'h1405dd8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_41_OFFSET = 64'h5de0;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_41_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_41_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_41_ADDR = 64'h1405de0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_42_OFFSET = 64'h5de8;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_42_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_42_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_42_ADDR = 64'h1405de8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_43_OFFSET = 64'h5df0;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_43_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_43_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_43_ADDR = 64'h1405df0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_44_OFFSET = 64'h5df8;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_44_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_44_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_44_ADDR = 64'h1405df8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_45_OFFSET = 64'h5e00;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_45_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_45_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_45_ADDR = 64'h1405e00;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_46_OFFSET = 64'h5e08;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_46_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_46_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_46_ADDR = 64'h1405e08;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_47_OFFSET = 64'h5e10;
  localparam int STATION_SLOW_IO_SSP_SHARED_SEL_47_WIDTH  = 2;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_47_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SSP_SHARED_SEL_47_ADDR = 64'h1405e10;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_RESET_OFFSET = 64'h5e18;
  localparam int STATION_SLOW_IO_SCU_FUNC_RESET_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_FUNC_RESET_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_RESET_ADDR = 64'h1405e18;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_INTFB_OFFSET = 64'h5e20;
  localparam int STATION_SLOW_IO_SCU_FUNC_INTFB_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_FUNC_INTFB_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_INTFB_ADDR = 64'h1405e20;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_BYPASS_OFFSET = 64'h5e28;
  localparam int STATION_SLOW_IO_SCU_FUNC_BYPASS_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_FUNC_BYPASS_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_BYPASS_ADDR = 64'h1405e28;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_TEST_OFFSET = 64'h5e30;
  localparam int STATION_SLOW_IO_SCU_FUNC_TEST_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_FUNC_TEST_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_TEST_ADDR = 64'h1405e30;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_PWRDN_OFFSET = 64'h5e38;
  localparam int STATION_SLOW_IO_SCU_FUNC_PWRDN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_FUNC_PWRDN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_PWRDN_ADDR = 64'h1405e38;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_CLK_SEL_OFFSET = 64'h5e40;
  localparam int STATION_SLOW_IO_SCU_FUNC_CLK_SEL_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_FUNC_CLK_SEL_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_CLK_SEL_ADDR = 64'h1405e40;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_PROG_DONE_OFFSET = 64'h5e48;
  localparam int STATION_SLOW_IO_SCU_FUNC_PROG_DONE_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_FUNC_PROG_DONE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_FUNC_PROG_DONE_ADDR = 64'h1405e48;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_PLLCLK_ICG_EN_OFFSET = 64'h5e50;
  localparam int STATION_SLOW_IO_SCU_PLLCLK_ICG_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_PLLCLK_ICG_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_PLLCLK_ICG_EN_ADDR = 64'h1405e50;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_INTR_OFFSET = 64'h5e58;
  localparam int STATION_SLOW_IO_SCU_INTR_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_SCU_INTR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_SCU_INTR_ADDR = 64'h1405e58;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SM_CLKDIV_DIVCLK_SEL_OFFSET = 64'h5e60;
  localparam int STATION_SLOW_IO_S2B_I2SM_CLKDIV_DIVCLK_SEL_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SM_CLKDIV_DIVCLK_SEL_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SM_CLKDIV_DIVCLK_SEL_ADDR = 64'h1405e60;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS0_CLKDIV_DIVCLK_SEL_OFFSET = 64'h5e68;
  localparam int STATION_SLOW_IO_S2B_I2SS0_CLKDIV_DIVCLK_SEL_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SS0_CLKDIV_DIVCLK_SEL_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS0_CLKDIV_DIVCLK_SEL_ADDR = 64'h1405e68;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS1_CLKDIV_DIVCLK_SEL_OFFSET = 64'h5e70;
  localparam int STATION_SLOW_IO_S2B_I2SS1_CLKDIV_DIVCLK_SEL_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SS1_CLKDIV_DIVCLK_SEL_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS1_CLKDIV_DIVCLK_SEL_ADDR = 64'h1405e70;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS2_CLKDIV_DIVCLK_SEL_OFFSET = 64'h5e78;
  localparam int STATION_SLOW_IO_S2B_I2SS2_CLKDIV_DIVCLK_SEL_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SS2_CLKDIV_DIVCLK_SEL_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS2_CLKDIV_DIVCLK_SEL_ADDR = 64'h1405e78;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS3_CLKDIV_DIVCLK_SEL_OFFSET = 64'h5e80;
  localparam int STATION_SLOW_IO_S2B_I2SS3_CLKDIV_DIVCLK_SEL_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SS3_CLKDIV_DIVCLK_SEL_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS3_CLKDIV_DIVCLK_SEL_ADDR = 64'h1405e80;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS4_CLKDIV_DIVCLK_SEL_OFFSET = 64'h5e88;
  localparam int STATION_SLOW_IO_S2B_I2SS4_CLKDIV_DIVCLK_SEL_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SS4_CLKDIV_DIVCLK_SEL_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS4_CLKDIV_DIVCLK_SEL_ADDR = 64'h1405e88;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS5_CLKDIV_DIVCLK_SEL_OFFSET = 64'h5e90;
  localparam int STATION_SLOW_IO_S2B_I2SS5_CLKDIV_DIVCLK_SEL_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2SS5_CLKDIV_DIVCLK_SEL_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2SS5_CLKDIV_DIVCLK_SEL_ADDR = 64'h1405e90;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_QSPIM_SSI_BUSY_OFFSET = 64'h5e98;
  localparam int STATION_SLOW_IO_B2S_QSPIM_SSI_BUSY_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_QSPIM_SSI_BUSY_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_QSPIM_SSI_BUSY_ADDR = 64'h1405e98;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_QSPIM_SSI_SLEEP_OFFSET = 64'h5ea0;
  localparam int STATION_SLOW_IO_B2S_QSPIM_SSI_SLEEP_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_QSPIM_SSI_SLEEP_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_QSPIM_SSI_SLEEP_ADDR = 64'h1405ea0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_QSPIM_SSI_CLK_EN_OFFSET = 64'h5ea8;
  localparam int STATION_SLOW_IO_S2B_QSPIM_SSI_CLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_QSPIM_SSI_CLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_QSPIM_SSI_CLK_EN_ADDR = 64'h1405ea8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_SSPIM0_SSI_SLEEP_OFFSET = 64'h5eb0;
  localparam int STATION_SLOW_IO_B2S_SSPIM0_SSI_SLEEP_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_SSPIM0_SSI_SLEEP_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_SSPIM0_SSI_SLEEP_ADDR = 64'h1405eb0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_SSPIM0_SSI_CLK_EN_OFFSET = 64'h5eb8;
  localparam int STATION_SLOW_IO_S2B_SSPIM0_SSI_CLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_SSPIM0_SSI_CLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_SSPIM0_SSI_CLK_EN_ADDR = 64'h1405eb8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_SSPIM1_SSI_SLEEP_OFFSET = 64'h5ec0;
  localparam int STATION_SLOW_IO_B2S_SSPIM1_SSI_SLEEP_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_SSPIM1_SSI_SLEEP_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_SSPIM1_SSI_SLEEP_ADDR = 64'h1405ec0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_SSPIM1_SSI_CLK_EN_OFFSET = 64'h5ec8;
  localparam int STATION_SLOW_IO_S2B_SSPIM1_SSI_CLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_SSPIM1_SSI_CLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_SSPIM1_SSI_CLK_EN_ADDR = 64'h1405ec8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_SSPIM2_SSI_SLEEP_OFFSET = 64'h5ed0;
  localparam int STATION_SLOW_IO_B2S_SSPIM2_SSI_SLEEP_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_SSPIM2_SSI_SLEEP_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_SSPIM2_SSI_SLEEP_ADDR = 64'h1405ed0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_SSPIM2_SSI_CLK_EN_OFFSET = 64'h5ed8;
  localparam int STATION_SLOW_IO_S2B_SSPIM2_SSI_CLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_SSPIM2_SSI_CLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_SSPIM2_SSI_CLK_EN_ADDR = 64'h1405ed8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_SPIS_SSI_SLEEP_OFFSET = 64'h5ee0;
  localparam int STATION_SLOW_IO_B2S_SPIS_SSI_SLEEP_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_SPIS_SSI_SLEEP_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_SPIS_SSI_SLEEP_ADDR = 64'h1405ee0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_OFFSET = 64'h5ee8;
  localparam int STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_ADDR = 64'h1405ee8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_10BIT_OFFSET = 64'h5ef0;
  localparam int STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_10BIT_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_10BIT_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_10BIT_ADDR = 64'h1405ef0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_DATA_OFFSET = 64'h5ef8;
  localparam int STATION_SLOW_IO_B2S_I2C0_DEBUG_DATA_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_DATA_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_DATA_ADDR = 64'h1405ef8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_HS_OFFSET = 64'h5f00;
  localparam int STATION_SLOW_IO_B2S_I2C0_DEBUG_HS_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_HS_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_HS_ADDR = 64'h1405f00;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_MASTER_ACT_OFFSET = 64'h5f08;
  localparam int STATION_SLOW_IO_B2S_I2C0_DEBUG_MASTER_ACT_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_MASTER_ACT_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_MASTER_ACT_ADDR = 64'h1405f08;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_P_GEN_OFFSET = 64'h5f10;
  localparam int STATION_SLOW_IO_B2S_I2C0_DEBUG_P_GEN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_P_GEN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_P_GEN_ADDR = 64'h1405f10;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_RD_OFFSET = 64'h5f18;
  localparam int STATION_SLOW_IO_B2S_I2C0_DEBUG_RD_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_RD_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_RD_ADDR = 64'h1405f18;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_S_GEN_OFFSET = 64'h5f20;
  localparam int STATION_SLOW_IO_B2S_I2C0_DEBUG_S_GEN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_S_GEN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_S_GEN_ADDR = 64'h1405f20;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_SLAVE_ACT_OFFSET = 64'h5f28;
  localparam int STATION_SLOW_IO_B2S_I2C0_DEBUG_SLAVE_ACT_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_SLAVE_ACT_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_SLAVE_ACT_ADDR = 64'h1405f28;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_WR_OFFSET = 64'h5f30;
  localparam int STATION_SLOW_IO_B2S_I2C0_DEBUG_WR_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_WR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C0_DEBUG_WR_ADDR = 64'h1405f30;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2C0_CLK_EN_OFFSET = 64'h5f38;
  localparam int STATION_SLOW_IO_S2B_I2C0_CLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2C0_CLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2C0_CLK_EN_ADDR = 64'h1405f38;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_OFFSET = 64'h5f40;
  localparam int STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_ADDR = 64'h1405f40;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_10BIT_OFFSET = 64'h5f48;
  localparam int STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_10BIT_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_10BIT_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_10BIT_ADDR = 64'h1405f48;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_DATA_OFFSET = 64'h5f50;
  localparam int STATION_SLOW_IO_B2S_I2C1_DEBUG_DATA_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_DATA_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_DATA_ADDR = 64'h1405f50;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_HS_OFFSET = 64'h5f58;
  localparam int STATION_SLOW_IO_B2S_I2C1_DEBUG_HS_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_HS_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_HS_ADDR = 64'h1405f58;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_MASTER_ACT_OFFSET = 64'h5f60;
  localparam int STATION_SLOW_IO_B2S_I2C1_DEBUG_MASTER_ACT_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_MASTER_ACT_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_MASTER_ACT_ADDR = 64'h1405f60;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_P_GEN_OFFSET = 64'h5f68;
  localparam int STATION_SLOW_IO_B2S_I2C1_DEBUG_P_GEN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_P_GEN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_P_GEN_ADDR = 64'h1405f68;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_RD_OFFSET = 64'h5f70;
  localparam int STATION_SLOW_IO_B2S_I2C1_DEBUG_RD_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_RD_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_RD_ADDR = 64'h1405f70;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_S_GEN_OFFSET = 64'h5f78;
  localparam int STATION_SLOW_IO_B2S_I2C1_DEBUG_S_GEN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_S_GEN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_S_GEN_ADDR = 64'h1405f78;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_SLAVE_ACT_OFFSET = 64'h5f80;
  localparam int STATION_SLOW_IO_B2S_I2C1_DEBUG_SLAVE_ACT_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_SLAVE_ACT_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_SLAVE_ACT_ADDR = 64'h1405f80;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_WR_OFFSET = 64'h5f88;
  localparam int STATION_SLOW_IO_B2S_I2C1_DEBUG_WR_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_WR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C1_DEBUG_WR_ADDR = 64'h1405f88;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2C1_CLK_EN_OFFSET = 64'h5f90;
  localparam int STATION_SLOW_IO_S2B_I2C1_CLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2C1_CLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2C1_CLK_EN_ADDR = 64'h1405f90;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_OFFSET = 64'h5f98;
  localparam int STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_ADDR = 64'h1405f98;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_10BIT_OFFSET = 64'h5fa0;
  localparam int STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_10BIT_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_10BIT_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_10BIT_ADDR = 64'h1405fa0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_DATA_OFFSET = 64'h5fa8;
  localparam int STATION_SLOW_IO_B2S_I2C2_DEBUG_DATA_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_DATA_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_DATA_ADDR = 64'h1405fa8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_HS_OFFSET = 64'h5fb0;
  localparam int STATION_SLOW_IO_B2S_I2C2_DEBUG_HS_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_HS_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_HS_ADDR = 64'h1405fb0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_MASTER_ACT_OFFSET = 64'h5fb8;
  localparam int STATION_SLOW_IO_B2S_I2C2_DEBUG_MASTER_ACT_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_MASTER_ACT_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_MASTER_ACT_ADDR = 64'h1405fb8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_P_GEN_OFFSET = 64'h5fc0;
  localparam int STATION_SLOW_IO_B2S_I2C2_DEBUG_P_GEN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_P_GEN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_P_GEN_ADDR = 64'h1405fc0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_RD_OFFSET = 64'h5fc8;
  localparam int STATION_SLOW_IO_B2S_I2C2_DEBUG_RD_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_RD_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_RD_ADDR = 64'h1405fc8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_S_GEN_OFFSET = 64'h5fd0;
  localparam int STATION_SLOW_IO_B2S_I2C2_DEBUG_S_GEN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_S_GEN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_S_GEN_ADDR = 64'h1405fd0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_SLAVE_ACT_OFFSET = 64'h5fd8;
  localparam int STATION_SLOW_IO_B2S_I2C2_DEBUG_SLAVE_ACT_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_SLAVE_ACT_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_SLAVE_ACT_ADDR = 64'h1405fd8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_WR_OFFSET = 64'h5fe0;
  localparam int STATION_SLOW_IO_B2S_I2C2_DEBUG_WR_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_WR_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_I2C2_DEBUG_WR_ADDR = 64'h1405fe0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2C2_CLK_EN_OFFSET = 64'h5fe8;
  localparam int STATION_SLOW_IO_S2B_I2C2_CLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_I2C2_CLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_I2C2_CLK_EN_ADDR = 64'h1405fe8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_GPIO_CLK_EN_OFFSET = 64'h5ff0;
  localparam int STATION_SLOW_IO_S2B_GPIO_CLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_GPIO_CLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_GPIO_CLK_EN_ADDR = 64'h1405ff0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_RTC_CLK_EN_OFFSET = 64'h5ff8;
  localparam int STATION_SLOW_IO_S2B_RTC_CLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_RTC_CLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_RTC_CLK_EN_ADDR = 64'h1405ff8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_RTC_EN_OFFSET = 64'h6000;
  localparam int STATION_SLOW_IO_B2S_RTC_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_B2S_RTC_EN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_B2S_RTC_EN_ADDR = 64'h1406000;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_1_RESETN_OFFSET = 64'h6008;
  localparam int STATION_SLOW_IO_S2B_TIMERS_1_RESETN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_TIMERS_1_RESETN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_1_RESETN_ADDR = 64'h1406008;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_2_RESETN_OFFSET = 64'h6010;
  localparam int STATION_SLOW_IO_S2B_TIMERS_2_RESETN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_TIMERS_2_RESETN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_2_RESETN_ADDR = 64'h1406010;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_3_RESETN_OFFSET = 64'h6018;
  localparam int STATION_SLOW_IO_S2B_TIMERS_3_RESETN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_TIMERS_3_RESETN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_3_RESETN_ADDR = 64'h1406018;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_4_RESETN_OFFSET = 64'h6020;
  localparam int STATION_SLOW_IO_S2B_TIMERS_4_RESETN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_TIMERS_4_RESETN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_4_RESETN_ADDR = 64'h1406020;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_5_RESETN_OFFSET = 64'h6028;
  localparam int STATION_SLOW_IO_S2B_TIMERS_5_RESETN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_TIMERS_5_RESETN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_5_RESETN_ADDR = 64'h1406028;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_6_RESETN_OFFSET = 64'h6030;
  localparam int STATION_SLOW_IO_S2B_TIMERS_6_RESETN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_TIMERS_6_RESETN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_6_RESETN_ADDR = 64'h1406030;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_7_RESETN_OFFSET = 64'h6038;
  localparam int STATION_SLOW_IO_S2B_TIMERS_7_RESETN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_TIMERS_7_RESETN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_7_RESETN_ADDR = 64'h1406038;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_8_RESETN_OFFSET = 64'h6040;
  localparam int STATION_SLOW_IO_S2B_TIMERS_8_RESETN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_TIMERS_8_RESETN_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_TIMERS_8_RESETN_ADDR = 64'h1406040;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_WDT_CLK_EN_OFFSET = 64'h6048;
  localparam int STATION_SLOW_IO_S2B_WDT_CLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_WDT_CLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_WDT_CLK_EN_ADDR = 64'h1406048;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_WDT_PAUSE_OFFSET = 64'h6050;
  localparam int STATION_SLOW_IO_S2B_WDT_PAUSE_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_WDT_PAUSE_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_WDT_PAUSE_ADDR = 64'h1406050;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_WDT_SPEED_UP_OFFSET = 64'h6058;
  localparam int STATION_SLOW_IO_S2B_WDT_SPEED_UP_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_WDT_SPEED_UP_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_WDT_SPEED_UP_ADDR = 64'h1406058;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_BOOTUP_ENA_OFFSET = 64'h6060;
  localparam int STATION_SLOW_IO_S2B_BOOTUP_ENA_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_BOOTUP_ENA_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_BOOTUP_ENA_ADDR = 64'h1406060;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_BOOTUP_ENA_SW_CTRL_OFFSET = 64'h6068;
  localparam int STATION_SLOW_IO_S2B_BOOTUP_ENA_SW_CTRL_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_BOOTUP_ENA_SW_CTRL_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_BOOTUP_ENA_SW_CTRL_ADDR = 64'h1406068;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_OFFSET = 64'h6070;
  localparam int STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_ADDR = 64'h1406070;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_SW_CTRL_OFFSET = 64'h6078;
  localparam int STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_SW_CTRL_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_SW_CTRL_RSTVAL = 0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_SW_CTRL_ADDR = 64'h1406078;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_QSPIM_PCLK_EN_OFFSET = 64'h6080;
  localparam int STATION_SLOW_IO_S2ICG_QSPIM_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_QSPIM_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_QSPIM_PCLK_EN_ADDR = 64'h1406080;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_SSPIM0_PCLK_EN_OFFSET = 64'h6088;
  localparam int STATION_SLOW_IO_S2ICG_SSPIM0_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_SSPIM0_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_SSPIM0_PCLK_EN_ADDR = 64'h1406088;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_SSPIM1_PCLK_EN_OFFSET = 64'h6090;
  localparam int STATION_SLOW_IO_S2ICG_SSPIM1_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_SSPIM1_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_SSPIM1_PCLK_EN_ADDR = 64'h1406090;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_SSPIM2_PCLK_EN_OFFSET = 64'h6098;
  localparam int STATION_SLOW_IO_S2ICG_SSPIM2_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_SSPIM2_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_SSPIM2_PCLK_EN_ADDR = 64'h1406098;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_SPIS_PCLK_EN_OFFSET = 64'h60a0;
  localparam int STATION_SLOW_IO_S2ICG_SPIS_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_SPIS_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_SPIS_PCLK_EN_ADDR = 64'h14060a0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_UART0_PCLK_EN_OFFSET = 64'h60a8;
  localparam int STATION_SLOW_IO_S2ICG_UART0_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_UART0_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_UART0_PCLK_EN_ADDR = 64'h14060a8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_UART1_PCLK_EN_OFFSET = 64'h60b0;
  localparam int STATION_SLOW_IO_S2ICG_UART1_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_UART1_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_UART1_PCLK_EN_ADDR = 64'h14060b0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_UART2_PCLK_EN_OFFSET = 64'h60b8;
  localparam int STATION_SLOW_IO_S2ICG_UART2_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_UART2_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_UART2_PCLK_EN_ADDR = 64'h14060b8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_UART3_PCLK_EN_OFFSET = 64'h60c0;
  localparam int STATION_SLOW_IO_S2ICG_UART3_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_UART3_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_UART3_PCLK_EN_ADDR = 64'h14060c0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SM_PCLK_EN_OFFSET = 64'h60c8;
  localparam int STATION_SLOW_IO_S2ICG_I2SM_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_I2SM_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SM_PCLK_EN_ADDR = 64'h14060c8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SS0_PCLK_EN_OFFSET = 64'h60d0;
  localparam int STATION_SLOW_IO_S2ICG_I2SS0_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_I2SS0_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SS0_PCLK_EN_ADDR = 64'h14060d0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SS1_PCLK_EN_OFFSET = 64'h60d8;
  localparam int STATION_SLOW_IO_S2ICG_I2SS1_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_I2SS1_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SS1_PCLK_EN_ADDR = 64'h14060d8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SS2_PCLK_EN_OFFSET = 64'h60e0;
  localparam int STATION_SLOW_IO_S2ICG_I2SS2_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_I2SS2_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SS2_PCLK_EN_ADDR = 64'h14060e0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SS3_PCLK_EN_OFFSET = 64'h60e8;
  localparam int STATION_SLOW_IO_S2ICG_I2SS3_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_I2SS3_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SS3_PCLK_EN_ADDR = 64'h14060e8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SS4_PCLK_EN_OFFSET = 64'h60f0;
  localparam int STATION_SLOW_IO_S2ICG_I2SS4_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_I2SS4_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SS4_PCLK_EN_ADDR = 64'h14060f0;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SS5_PCLK_EN_OFFSET = 64'h60f8;
  localparam int STATION_SLOW_IO_S2ICG_I2SS5_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_I2SS5_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2SS5_PCLK_EN_ADDR = 64'h14060f8;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2C0_PCLK_EN_OFFSET = 64'h6100;
  localparam int STATION_SLOW_IO_S2ICG_I2C0_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_I2C0_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2C0_PCLK_EN_ADDR = 64'h1406100;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2C1_PCLK_EN_OFFSET = 64'h6108;
  localparam int STATION_SLOW_IO_S2ICG_I2C1_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_I2C1_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2C1_PCLK_EN_ADDR = 64'h1406108;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2C2_PCLK_EN_OFFSET = 64'h6110;
  localparam int STATION_SLOW_IO_S2ICG_I2C2_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_I2C2_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_I2C2_PCLK_EN_ADDR = 64'h1406110;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_GPIO_PCLK_EN_OFFSET = 64'h6118;
  localparam int STATION_SLOW_IO_S2ICG_GPIO_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_GPIO_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_GPIO_PCLK_EN_ADDR = 64'h1406118;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_RTC_PCLK_EN_OFFSET = 64'h6120;
  localparam int STATION_SLOW_IO_S2ICG_RTC_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_RTC_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_RTC_PCLK_EN_ADDR = 64'h1406120;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_TIMERS_PCLK_EN_OFFSET = 64'h6128;
  localparam int STATION_SLOW_IO_S2ICG_TIMERS_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_TIMERS_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_TIMERS_PCLK_EN_ADDR = 64'h1406128;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_WDT_PCLK_EN_OFFSET = 64'h6130;
  localparam int STATION_SLOW_IO_S2ICG_WDT_PCLK_EN_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_S2ICG_WDT_PCLK_EN_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_S2ICG_WDT_PCLK_EN_ADDR = 64'h1406130;
  localparam bit [25 - 1:0] STATION_SLOW_IO_DEBUG_INFO_ENABLE_OFFSET = 64'h6138;
  localparam int STATION_SLOW_IO_DEBUG_INFO_ENABLE_WIDTH  = 1;
  localparam bit [64 - 1:0] STATION_SLOW_IO_DEBUG_INFO_ENABLE_RSTVAL = 1;
  localparam bit [25 - 1:0] STATION_SLOW_IO_DEBUG_INFO_ENABLE_ADDR = 64'h1406138;
endpackage
`endif
`ifndef STATION_SLOW_IO__SV
`define STATION_SLOW_IO__SV
module station_slow_io
  import pygmy_cfg::*;
  import pygmy_typedef::*;
  import pygmy_intf_typedef::*;
  import station_slow_io_pkg::*;
  (
  output [STATION_SLOW_IO_S2B_I2SM_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] out_s2b_i2sm_clkdiv_half_div_less_1,
  output [STATION_SLOW_IO_S2B_I2SS0_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] out_s2b_i2ss0_clkdiv_half_div_less_1,
  output [STATION_SLOW_IO_S2B_I2SS1_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] out_s2b_i2ss1_clkdiv_half_div_less_1,
  output [STATION_SLOW_IO_S2B_I2SS2_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] out_s2b_i2ss2_clkdiv_half_div_less_1,
  output [STATION_SLOW_IO_S2B_I2SS3_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] out_s2b_i2ss3_clkdiv_half_div_less_1,
  output [STATION_SLOW_IO_S2B_I2SS4_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] out_s2b_i2ss4_clkdiv_half_div_less_1,
  output [STATION_SLOW_IO_S2B_I2SS5_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] out_s2b_i2ss5_clkdiv_half_div_less_1,
  output [STATION_SLOW_IO_B2S_TIMER_EN_WIDTH - 1 : 0] out_b2s_timer_en,
  output [STATION_SLOW_IO_B2S_I2C0_DEBUG_MST_CSTATE_WIDTH - 1 : 0] out_b2s_i2c0_debug_mst_cstate,
  output [STATION_SLOW_IO_B2S_I2C1_DEBUG_MST_CSTATE_WIDTH - 1 : 0] out_b2s_i2c1_debug_mst_cstate,
  output [STATION_SLOW_IO_B2S_I2C2_DEBUG_MST_CSTATE_WIDTH - 1 : 0] out_b2s_i2c2_debug_mst_cstate,
  output [STATION_SLOW_IO_B2S_I2C0_DEBUG_SLV_CSTATE_WIDTH - 1 : 0] out_b2s_i2c0_debug_slv_cstate,
  output [STATION_SLOW_IO_B2S_I2C1_DEBUG_SLV_CSTATE_WIDTH - 1 : 0] out_b2s_i2c1_debug_slv_cstate,
  output [STATION_SLOW_IO_B2S_I2C2_DEBUG_SLV_CSTATE_WIDTH - 1 : 0] out_b2s_i2c2_debug_slv_cstate,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_0_WIDTH - 1 : 0] out_SSP_SHARED_sel_0,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_1_WIDTH - 1 : 0] out_SSP_SHARED_sel_1,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_2_WIDTH - 1 : 0] out_SSP_SHARED_sel_2,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_3_WIDTH - 1 : 0] out_SSP_SHARED_sel_3,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_4_WIDTH - 1 : 0] out_SSP_SHARED_sel_4,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_5_WIDTH - 1 : 0] out_SSP_SHARED_sel_5,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_6_WIDTH - 1 : 0] out_SSP_SHARED_sel_6,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_7_WIDTH - 1 : 0] out_SSP_SHARED_sel_7,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_8_WIDTH - 1 : 0] out_SSP_SHARED_sel_8,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_9_WIDTH - 1 : 0] out_SSP_SHARED_sel_9,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_10_WIDTH - 1 : 0] out_SSP_SHARED_sel_10,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_11_WIDTH - 1 : 0] out_SSP_SHARED_sel_11,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_12_WIDTH - 1 : 0] out_SSP_SHARED_sel_12,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_13_WIDTH - 1 : 0] out_SSP_SHARED_sel_13,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_14_WIDTH - 1 : 0] out_SSP_SHARED_sel_14,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_15_WIDTH - 1 : 0] out_SSP_SHARED_sel_15,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_16_WIDTH - 1 : 0] out_SSP_SHARED_sel_16,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_17_WIDTH - 1 : 0] out_SSP_SHARED_sel_17,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_18_WIDTH - 1 : 0] out_SSP_SHARED_sel_18,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_19_WIDTH - 1 : 0] out_SSP_SHARED_sel_19,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_20_WIDTH - 1 : 0] out_SSP_SHARED_sel_20,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_21_WIDTH - 1 : 0] out_SSP_SHARED_sel_21,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_22_WIDTH - 1 : 0] out_SSP_SHARED_sel_22,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_23_WIDTH - 1 : 0] out_SSP_SHARED_sel_23,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_24_WIDTH - 1 : 0] out_SSP_SHARED_sel_24,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_25_WIDTH - 1 : 0] out_SSP_SHARED_sel_25,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_26_WIDTH - 1 : 0] out_SSP_SHARED_sel_26,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_27_WIDTH - 1 : 0] out_SSP_SHARED_sel_27,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_28_WIDTH - 1 : 0] out_SSP_SHARED_sel_28,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_29_WIDTH - 1 : 0] out_SSP_SHARED_sel_29,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_30_WIDTH - 1 : 0] out_SSP_SHARED_sel_30,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_31_WIDTH - 1 : 0] out_SSP_SHARED_sel_31,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_32_WIDTH - 1 : 0] out_SSP_SHARED_sel_32,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_33_WIDTH - 1 : 0] out_SSP_SHARED_sel_33,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_34_WIDTH - 1 : 0] out_SSP_SHARED_sel_34,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_35_WIDTH - 1 : 0] out_SSP_SHARED_sel_35,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_36_WIDTH - 1 : 0] out_SSP_SHARED_sel_36,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_37_WIDTH - 1 : 0] out_SSP_SHARED_sel_37,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_38_WIDTH - 1 : 0] out_SSP_SHARED_sel_38,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_39_WIDTH - 1 : 0] out_SSP_SHARED_sel_39,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_40_WIDTH - 1 : 0] out_SSP_SHARED_sel_40,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_41_WIDTH - 1 : 0] out_SSP_SHARED_sel_41,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_42_WIDTH - 1 : 0] out_SSP_SHARED_sel_42,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_43_WIDTH - 1 : 0] out_SSP_SHARED_sel_43,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_44_WIDTH - 1 : 0] out_SSP_SHARED_sel_44,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_45_WIDTH - 1 : 0] out_SSP_SHARED_sel_45,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_46_WIDTH - 1 : 0] out_SSP_SHARED_sel_46,
  output [STATION_SLOW_IO_SSP_SHARED_SEL_47_WIDTH - 1 : 0] out_SSP_SHARED_sel_47,
  output out_s2b_i2sm_clkdiv_divclk_sel,
  output out_s2b_i2ss0_clkdiv_divclk_sel,
  output out_s2b_i2ss1_clkdiv_divclk_sel,
  output out_s2b_i2ss2_clkdiv_divclk_sel,
  output out_s2b_i2ss3_clkdiv_divclk_sel,
  output out_s2b_i2ss4_clkdiv_divclk_sel,
  output out_s2b_i2ss5_clkdiv_divclk_sel,
  output out_b2s_qspim_ssi_busy,
  output out_b2s_qspim_ssi_sleep,
  output out_s2b_qspim_ssi_clk_en,
  output out_b2s_sspim0_ssi_sleep,
  output out_s2b_sspim0_ssi_clk_en,
  output out_b2s_sspim1_ssi_sleep,
  output out_s2b_sspim1_ssi_clk_en,
  output out_b2s_sspim2_ssi_sleep,
  output out_s2b_sspim2_ssi_clk_en,
  output out_b2s_spis_ssi_sleep,
  output out_b2s_i2c0_debug_addr,
  output out_b2s_i2c0_debug_addr_10bit,
  output out_b2s_i2c0_debug_data,
  output out_b2s_i2c0_debug_hs,
  output out_b2s_i2c0_debug_master_act,
  output out_b2s_i2c0_debug_p_gen,
  output out_b2s_i2c0_debug_rd,
  output out_b2s_i2c0_debug_s_gen,
  output out_b2s_i2c0_debug_slave_act,
  output out_b2s_i2c0_debug_wr,
  output out_s2b_i2c0_clk_en,
  output out_b2s_i2c1_debug_addr,
  output out_b2s_i2c1_debug_addr_10bit,
  output out_b2s_i2c1_debug_data,
  output out_b2s_i2c1_debug_hs,
  output out_b2s_i2c1_debug_master_act,
  output out_b2s_i2c1_debug_p_gen,
  output out_b2s_i2c1_debug_rd,
  output out_b2s_i2c1_debug_s_gen,
  output out_b2s_i2c1_debug_slave_act,
  output out_b2s_i2c1_debug_wr,
  output out_s2b_i2c1_clk_en,
  output out_b2s_i2c2_debug_addr,
  output out_b2s_i2c2_debug_addr_10bit,
  output out_b2s_i2c2_debug_data,
  output out_b2s_i2c2_debug_hs,
  output out_b2s_i2c2_debug_master_act,
  output out_b2s_i2c2_debug_p_gen,
  output out_b2s_i2c2_debug_rd,
  output out_b2s_i2c2_debug_s_gen,
  output out_b2s_i2c2_debug_slave_act,
  output out_b2s_i2c2_debug_wr,
  output out_s2b_i2c2_clk_en,
  output out_s2b_gpio_clk_en,
  output out_s2b_rtc_clk_en,
  output out_b2s_rtc_en,
  output out_s2b_timers_1_resetn,
  output out_s2b_timers_2_resetn,
  output out_s2b_timers_3_resetn,
  output out_s2b_timers_4_resetn,
  output out_s2b_timers_5_resetn,
  output out_s2b_timers_6_resetn,
  output out_s2b_timers_7_resetn,
  output out_s2b_timers_8_resetn,
  output out_s2b_wdt_clk_en,
  output out_s2b_wdt_pause,
  output out_s2b_wdt_speed_up,
  output out_s2b_bootup_ena,
  output out_s2b_bootup_ena_sw_ctrl,
  output out_s2b_boot_from_flash_ena,
  output out_s2b_boot_from_flash_ena_sw_ctrl,
  output out_s2icg_qspim_pclk_en,
  output out_s2icg_sspim0_pclk_en,
  output out_s2icg_sspim1_pclk_en,
  output out_s2icg_sspim2_pclk_en,
  output out_s2icg_spis_pclk_en,
  output out_s2icg_uart0_pclk_en,
  output out_s2icg_uart1_pclk_en,
  output out_s2icg_uart2_pclk_en,
  output out_s2icg_uart3_pclk_en,
  output out_s2icg_i2sm_pclk_en,
  output out_s2icg_i2ss0_pclk_en,
  output out_s2icg_i2ss1_pclk_en,
  output out_s2icg_i2ss2_pclk_en,
  output out_s2icg_i2ss3_pclk_en,
  output out_s2icg_i2ss4_pclk_en,
  output out_s2icg_i2ss5_pclk_en,
  output out_s2icg_i2c0_pclk_en,
  output out_s2icg_i2c1_pclk_en,
  output out_s2icg_i2c2_pclk_en,
  output out_s2icg_gpio_pclk_en,
  output out_s2icg_rtc_pclk_en,
  output out_s2icg_timers_pclk_en,
  output out_s2icg_wdt_pclk_en,
  output out_debug_info_enable,
  input logic vld_in_b2s_timer_en,
  input [STATION_SLOW_IO_B2S_TIMER_EN_WIDTH - 1 : 0] in_b2s_timer_en,
  input logic vld_in_b2s_i2c0_debug_mst_cstate,
  input [STATION_SLOW_IO_B2S_I2C0_DEBUG_MST_CSTATE_WIDTH - 1 : 0] in_b2s_i2c0_debug_mst_cstate,
  input logic vld_in_b2s_i2c1_debug_mst_cstate,
  input [STATION_SLOW_IO_B2S_I2C1_DEBUG_MST_CSTATE_WIDTH - 1 : 0] in_b2s_i2c1_debug_mst_cstate,
  input logic vld_in_b2s_i2c2_debug_mst_cstate,
  input [STATION_SLOW_IO_B2S_I2C2_DEBUG_MST_CSTATE_WIDTH - 1 : 0] in_b2s_i2c2_debug_mst_cstate,
  input logic vld_in_b2s_i2c0_debug_slv_cstate,
  input [STATION_SLOW_IO_B2S_I2C0_DEBUG_SLV_CSTATE_WIDTH - 1 : 0] in_b2s_i2c0_debug_slv_cstate,
  input logic vld_in_b2s_i2c1_debug_slv_cstate,
  input [STATION_SLOW_IO_B2S_I2C1_DEBUG_SLV_CSTATE_WIDTH - 1 : 0] in_b2s_i2c1_debug_slv_cstate,
  input logic vld_in_b2s_i2c2_debug_slv_cstate,
  input [STATION_SLOW_IO_B2S_I2C2_DEBUG_SLV_CSTATE_WIDTH - 1 : 0] in_b2s_i2c2_debug_slv_cstate,
  input logic vld_in_b2s_qspim_ssi_busy,
  input in_b2s_qspim_ssi_busy,
  input logic vld_in_b2s_qspim_ssi_sleep,
  input in_b2s_qspim_ssi_sleep,
  input logic vld_in_b2s_sspim0_ssi_sleep,
  input in_b2s_sspim0_ssi_sleep,
  input logic vld_in_b2s_sspim1_ssi_sleep,
  input in_b2s_sspim1_ssi_sleep,
  input logic vld_in_b2s_sspim2_ssi_sleep,
  input in_b2s_sspim2_ssi_sleep,
  input logic vld_in_b2s_spis_ssi_sleep,
  input in_b2s_spis_ssi_sleep,
  input logic vld_in_b2s_i2c0_debug_addr,
  input in_b2s_i2c0_debug_addr,
  input logic vld_in_b2s_i2c0_debug_addr_10bit,
  input in_b2s_i2c0_debug_addr_10bit,
  input logic vld_in_b2s_i2c0_debug_data,
  input in_b2s_i2c0_debug_data,
  input logic vld_in_b2s_i2c0_debug_hs,
  input in_b2s_i2c0_debug_hs,
  input logic vld_in_b2s_i2c0_debug_master_act,
  input in_b2s_i2c0_debug_master_act,
  input logic vld_in_b2s_i2c0_debug_p_gen,
  input in_b2s_i2c0_debug_p_gen,
  input logic vld_in_b2s_i2c0_debug_rd,
  input in_b2s_i2c0_debug_rd,
  input logic vld_in_b2s_i2c0_debug_s_gen,
  input in_b2s_i2c0_debug_s_gen,
  input logic vld_in_b2s_i2c0_debug_slave_act,
  input in_b2s_i2c0_debug_slave_act,
  input logic vld_in_b2s_i2c0_debug_wr,
  input in_b2s_i2c0_debug_wr,
  input logic vld_in_b2s_i2c1_debug_addr,
  input in_b2s_i2c1_debug_addr,
  input logic vld_in_b2s_i2c1_debug_addr_10bit,
  input in_b2s_i2c1_debug_addr_10bit,
  input logic vld_in_b2s_i2c1_debug_data,
  input in_b2s_i2c1_debug_data,
  input logic vld_in_b2s_i2c1_debug_hs,
  input in_b2s_i2c1_debug_hs,
  input logic vld_in_b2s_i2c1_debug_master_act,
  input in_b2s_i2c1_debug_master_act,
  input logic vld_in_b2s_i2c1_debug_p_gen,
  input in_b2s_i2c1_debug_p_gen,
  input logic vld_in_b2s_i2c1_debug_rd,
  input in_b2s_i2c1_debug_rd,
  input logic vld_in_b2s_i2c1_debug_s_gen,
  input in_b2s_i2c1_debug_s_gen,
  input logic vld_in_b2s_i2c1_debug_slave_act,
  input in_b2s_i2c1_debug_slave_act,
  input logic vld_in_b2s_i2c1_debug_wr,
  input in_b2s_i2c1_debug_wr,
  input logic vld_in_b2s_i2c2_debug_addr,
  input in_b2s_i2c2_debug_addr,
  input logic vld_in_b2s_i2c2_debug_addr_10bit,
  input in_b2s_i2c2_debug_addr_10bit,
  input logic vld_in_b2s_i2c2_debug_data,
  input in_b2s_i2c2_debug_data,
  input logic vld_in_b2s_i2c2_debug_hs,
  input in_b2s_i2c2_debug_hs,
  input logic vld_in_b2s_i2c2_debug_master_act,
  input in_b2s_i2c2_debug_master_act,
  input logic vld_in_b2s_i2c2_debug_p_gen,
  input in_b2s_i2c2_debug_p_gen,
  input logic vld_in_b2s_i2c2_debug_rd,
  input in_b2s_i2c2_debug_rd,
  input logic vld_in_b2s_i2c2_debug_s_gen,
  input in_b2s_i2c2_debug_s_gen,
  input logic vld_in_b2s_i2c2_debug_slave_act,
  input in_b2s_i2c2_debug_slave_act,
  input logic vld_in_b2s_i2c2_debug_wr,
  input in_b2s_i2c2_debug_wr,
  input logic vld_in_b2s_rtc_en,
  input in_b2s_rtc_en,
  input  logic                clk,
  input  logic                rstn,
  // i_req_ring_if & o_resp_ring_if
  output oursring_resp_if_b_t o_resp_ring_if_b,
  output oursring_resp_if_r_t o_resp_ring_if_r,
  output                      o_resp_ring_if_rvalid,
  input                       o_resp_ring_if_rready,
  output                      o_resp_ring_if_bvalid,
  input                       o_resp_ring_if_bready,
  input                       i_req_ring_if_awvalid,
  input                       i_req_ring_if_wvalid,
  input                       i_req_ring_if_arvalid,
  input  oursring_req_if_ar_t i_req_ring_if_ar,
  input  oursring_req_if_aw_t i_req_ring_if_aw,
  input  oursring_req_if_w_t  i_req_ring_if_w,
  output                      i_req_ring_if_arready,
  output                      i_req_ring_if_wready,
  output                      i_req_ring_if_awready,
  // o_req_ring_if & i_resp_ring_if
  input  oursring_resp_if_b_t i_resp_ring_if_b,
  input  oursring_resp_if_r_t i_resp_ring_if_r,
  input                       i_resp_ring_if_rvalid,
  output                      i_resp_ring_if_rready,
  input                       i_resp_ring_if_bvalid,
  output                      i_resp_ring_if_bready,
  output                      o_req_ring_if_awvalid,
  output                      o_req_ring_if_wvalid,
  output                      o_req_ring_if_arvalid,
  output oursring_req_if_ar_t o_req_ring_if_ar,
  output oursring_req_if_aw_t o_req_ring_if_aw,
  output oursring_req_if_w_t  o_req_ring_if_w,
  input                       o_req_ring_if_arready,
  input                       o_req_ring_if_wready,
  input                       o_req_ring_if_awready,
  // i_req_local_if & o_resp_local_if
  output oursring_resp_if_b_t o_resp_local_if_b,
  output oursring_resp_if_r_t o_resp_local_if_r,
  output                      o_resp_local_if_rvalid,
  input                       o_resp_local_if_rready,
  output                      o_resp_local_if_bvalid,
  input                       o_resp_local_if_bready,
  input                       i_req_local_if_awvalid,
  input                       i_req_local_if_wvalid,
  input                       i_req_local_if_arvalid,
  input  oursring_req_if_ar_t i_req_local_if_ar,
  input  oursring_req_if_aw_t i_req_local_if_aw,
  input  oursring_req_if_w_t  i_req_local_if_w,
  output                      i_req_local_if_arready,
  output                      i_req_local_if_wready,
  output                      i_req_local_if_awready,
  // o_req_local_if & i_resp_local_if
  input  oursring_resp_if_b_t i_resp_local_if_b,
  input  oursring_resp_if_r_t i_resp_local_if_r,
  input                       i_resp_local_if_rvalid,
  output                      i_resp_local_if_rready,
  input                       i_resp_local_if_bvalid,
  output                      i_resp_local_if_bready,
  output                      o_req_local_if_awvalid,
  output                      o_req_local_if_wvalid,
  output                      o_req_local_if_arvalid,
  output oursring_req_if_ar_t o_req_local_if_ar,
  output oursring_req_if_aw_t o_req_local_if_aw,
  output oursring_req_if_w_t  o_req_local_if_w,
  input                       o_req_local_if_arready,
  input                       o_req_local_if_wready,
  input                       o_req_local_if_awready
);
  localparam int                                STATION_ID_WIDTH_0 = STATION_SLOW_IO_BLKID_WIDTH;
  localparam logic [STATION_ID_WIDTH_0 - 1 : 0] LOCAL_STATION_ID_0 = STATION_SLOW_IO_BLKID;

  oursring_resp_if_b_t      station2brb_rsp_b;
  oursring_resp_if_r_t      station2brb_rsp_r;
  logic                     station2brb_rsp_rvalid;
  logic                     station2brb_rsp_rready;
  logic                     station2brb_rsp_bvalid;
  logic                     station2brb_rsp_bready;
  logic                     station2brb_req_awvalid;
  logic                     station2brb_req_wvalid;
  logic                     station2brb_req_arvalid;
  oursring_req_if_ar_t      station2brb_req_ar;
  oursring_req_if_aw_t      station2brb_req_aw;
  oursring_req_if_w_t       station2brb_req_w;
  logic                     station2brb_req_arready;
  logic                     station2brb_req_wready;
  logic                     station2brb_req_awready;

  oursring_station #(.STATION_ID_WIDTH_0(STATION_ID_WIDTH_0), .LOCAL_STATION_ID_0(LOCAL_STATION_ID_0), .RING_ADDR_WIDTH(STATION_SLOW_IO_RING_ADDR_WIDTH), .MAX_RING_ADDR(STATION_SLOW_IO_MAX_RING_ADDR)) station_u (

    .i_req_local_if_ar      (i_req_local_if_ar), 
    .i_req_local_if_awvalid (i_req_local_if_awvalid), 
    .i_req_local_if_awready (i_req_local_if_awready), 
    .i_req_local_if_wvalid  (i_req_local_if_wvalid), 
    .i_req_local_if_wready  (i_req_local_if_wready), 
    .i_req_local_if_arvalid (i_req_local_if_arvalid), 
    .i_req_local_if_arready (i_req_local_if_arready), 
    .i_req_local_if_w       (i_req_local_if_w), 
    .i_req_local_if_aw      (i_req_local_if_aw),
    .i_req_ring_if_ar       (i_req_ring_if_ar), 
    .i_req_ring_if_awvalid  (i_req_ring_if_awvalid), 
    .i_req_ring_if_awready  (i_req_ring_if_awready), 
    .i_req_ring_if_wvalid   (i_req_ring_if_wvalid), 
    .i_req_ring_if_wready   (i_req_ring_if_wready), 
    .i_req_ring_if_arvalid  (i_req_ring_if_arvalid), 
    .i_req_ring_if_arready  (i_req_ring_if_arready), 
    .i_req_ring_if_w        (i_req_ring_if_w), 
    .i_req_ring_if_aw       (i_req_ring_if_aw),
    .o_req_local_if_ar      (station2brb_req_ar), 
    .o_req_local_if_awvalid (station2brb_req_awvalid), 
    .o_req_local_if_awready (station2brb_req_awready), 
    .o_req_local_if_wvalid  (station2brb_req_wvalid), 
    .o_req_local_if_wready  (station2brb_req_wready), 
    .o_req_local_if_arvalid (station2brb_req_arvalid), 
    .o_req_local_if_arready (station2brb_req_arready), 
    .o_req_local_if_w       (station2brb_req_w), 
    .o_req_local_if_aw      (station2brb_req_aw),
    .o_req_ring_if_ar       (o_req_ring_if_ar), 
    .o_req_ring_if_awvalid  (o_req_ring_if_awvalid), 
    .o_req_ring_if_awready  (o_req_ring_if_awready), 
    .o_req_ring_if_wvalid   (o_req_ring_if_wvalid), 
    .o_req_ring_if_wready   (o_req_ring_if_wready), 
    .o_req_ring_if_arvalid  (o_req_ring_if_arvalid), 
    .o_req_ring_if_arready  (o_req_ring_if_arready), 
    .o_req_ring_if_w        (o_req_ring_if_w), 
    .o_req_ring_if_aw       (o_req_ring_if_aw),
    .i_resp_local_if_b      (station2brb_rsp_b), 
    .i_resp_local_if_r      (station2brb_rsp_r), 
    .i_resp_local_if_rvalid (station2brb_rsp_rvalid), 
    .i_resp_local_if_rready (station2brb_rsp_rready), 
    .i_resp_local_if_bvalid (station2brb_rsp_bvalid), 
    .i_resp_local_if_bready (station2brb_rsp_bready),
    .i_resp_ring_if_b       (i_resp_ring_if_b), 
    .i_resp_ring_if_r       (i_resp_ring_if_r), 
    .i_resp_ring_if_rvalid  (i_resp_ring_if_rvalid), 
    .i_resp_ring_if_rready  (i_resp_ring_if_rready), 
    .i_resp_ring_if_bvalid  (i_resp_ring_if_bvalid), 
    .i_resp_ring_if_bready  (i_resp_ring_if_bready),
    .o_resp_local_if_b      (o_resp_local_if_b), 
    .o_resp_local_if_r      (o_resp_local_if_r), 
    .o_resp_local_if_rvalid (o_resp_local_if_rvalid), 
    .o_resp_local_if_rready (o_resp_local_if_rready), 
    .o_resp_local_if_bvalid (o_resp_local_if_bvalid), 
    .o_resp_local_if_bready (o_resp_local_if_bready),
    .o_resp_ring_if_b       (o_resp_ring_if_b), 
    .o_resp_ring_if_r       (o_resp_ring_if_r), 
    .o_resp_ring_if_rvalid  (o_resp_ring_if_rvalid), 
    .o_resp_ring_if_rready  (o_resp_ring_if_rready), 
    .o_resp_ring_if_bvalid  (o_resp_ring_if_bvalid), 
    .o_resp_ring_if_bready  (o_resp_ring_if_bready),
    .clk                    (clk),
    .rstn                   (rstn)
    );

  ring_data_t wmask, wmask_inv;
  generate
    for (genvar i = 0; i < $bits(ring_strb_t); i++) begin : WMASK_GEN
      assign wmask[i * 8 +: 8]      = (station2brb_req_w.wstrb[i]) ? 8'hff : 8'h00;
      assign wmask_inv[i * 8 +: 8]  = (station2brb_req_w.wstrb[i]) ? 8'h00 : 8'hff;
    end
  endgenerate

  logic [STATION_SLOW_IO_S2B_I2SM_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] rff_s2b_i2sm_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_S2B_I2SM_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] s2b_i2sm_clkdiv_half_div_less_1;
  logic load_s2b_i2sm_clkdiv_half_div_less_1;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2sm_clkdiv_half_div_less_1 <= STATION_SLOW_IO_S2B_I2SM_CLKDIV_HALF_DIV_LESS_1_RSTVAL;
    end else if (load_s2b_i2sm_clkdiv_half_div_less_1 == 1'b1) begin
      rff_s2b_i2sm_clkdiv_half_div_less_1 <= (wmask & s2b_i2sm_clkdiv_half_div_less_1) | (wmask_inv & rff_s2b_i2sm_clkdiv_half_div_less_1);
    end
  end
  assign out_s2b_i2sm_clkdiv_half_div_less_1 = rff_s2b_i2sm_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_S2B_I2SS0_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] rff_s2b_i2ss0_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_S2B_I2SS0_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] s2b_i2ss0_clkdiv_half_div_less_1;
  logic load_s2b_i2ss0_clkdiv_half_div_less_1;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2ss0_clkdiv_half_div_less_1 <= STATION_SLOW_IO_S2B_I2SS0_CLKDIV_HALF_DIV_LESS_1_RSTVAL;
    end else if (load_s2b_i2ss0_clkdiv_half_div_less_1 == 1'b1) begin
      rff_s2b_i2ss0_clkdiv_half_div_less_1 <= (wmask & s2b_i2ss0_clkdiv_half_div_less_1) | (wmask_inv & rff_s2b_i2ss0_clkdiv_half_div_less_1);
    end
  end
  assign out_s2b_i2ss0_clkdiv_half_div_less_1 = rff_s2b_i2ss0_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_S2B_I2SS1_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] rff_s2b_i2ss1_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_S2B_I2SS1_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] s2b_i2ss1_clkdiv_half_div_less_1;
  logic load_s2b_i2ss1_clkdiv_half_div_less_1;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2ss1_clkdiv_half_div_less_1 <= STATION_SLOW_IO_S2B_I2SS1_CLKDIV_HALF_DIV_LESS_1_RSTVAL;
    end else if (load_s2b_i2ss1_clkdiv_half_div_less_1 == 1'b1) begin
      rff_s2b_i2ss1_clkdiv_half_div_less_1 <= (wmask & s2b_i2ss1_clkdiv_half_div_less_1) | (wmask_inv & rff_s2b_i2ss1_clkdiv_half_div_less_1);
    end
  end
  assign out_s2b_i2ss1_clkdiv_half_div_less_1 = rff_s2b_i2ss1_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_S2B_I2SS2_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] rff_s2b_i2ss2_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_S2B_I2SS2_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] s2b_i2ss2_clkdiv_half_div_less_1;
  logic load_s2b_i2ss2_clkdiv_half_div_less_1;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2ss2_clkdiv_half_div_less_1 <= STATION_SLOW_IO_S2B_I2SS2_CLKDIV_HALF_DIV_LESS_1_RSTVAL;
    end else if (load_s2b_i2ss2_clkdiv_half_div_less_1 == 1'b1) begin
      rff_s2b_i2ss2_clkdiv_half_div_less_1 <= (wmask & s2b_i2ss2_clkdiv_half_div_less_1) | (wmask_inv & rff_s2b_i2ss2_clkdiv_half_div_less_1);
    end
  end
  assign out_s2b_i2ss2_clkdiv_half_div_less_1 = rff_s2b_i2ss2_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_S2B_I2SS3_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] rff_s2b_i2ss3_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_S2B_I2SS3_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] s2b_i2ss3_clkdiv_half_div_less_1;
  logic load_s2b_i2ss3_clkdiv_half_div_less_1;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2ss3_clkdiv_half_div_less_1 <= STATION_SLOW_IO_S2B_I2SS3_CLKDIV_HALF_DIV_LESS_1_RSTVAL;
    end else if (load_s2b_i2ss3_clkdiv_half_div_less_1 == 1'b1) begin
      rff_s2b_i2ss3_clkdiv_half_div_less_1 <= (wmask & s2b_i2ss3_clkdiv_half_div_less_1) | (wmask_inv & rff_s2b_i2ss3_clkdiv_half_div_less_1);
    end
  end
  assign out_s2b_i2ss3_clkdiv_half_div_less_1 = rff_s2b_i2ss3_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_S2B_I2SS4_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] rff_s2b_i2ss4_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_S2B_I2SS4_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] s2b_i2ss4_clkdiv_half_div_less_1;
  logic load_s2b_i2ss4_clkdiv_half_div_less_1;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2ss4_clkdiv_half_div_less_1 <= STATION_SLOW_IO_S2B_I2SS4_CLKDIV_HALF_DIV_LESS_1_RSTVAL;
    end else if (load_s2b_i2ss4_clkdiv_half_div_less_1 == 1'b1) begin
      rff_s2b_i2ss4_clkdiv_half_div_less_1 <= (wmask & s2b_i2ss4_clkdiv_half_div_less_1) | (wmask_inv & rff_s2b_i2ss4_clkdiv_half_div_less_1);
    end
  end
  assign out_s2b_i2ss4_clkdiv_half_div_less_1 = rff_s2b_i2ss4_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_S2B_I2SS5_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] rff_s2b_i2ss5_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_S2B_I2SS5_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0] s2b_i2ss5_clkdiv_half_div_less_1;
  logic load_s2b_i2ss5_clkdiv_half_div_less_1;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2ss5_clkdiv_half_div_less_1 <= STATION_SLOW_IO_S2B_I2SS5_CLKDIV_HALF_DIV_LESS_1_RSTVAL;
    end else if (load_s2b_i2ss5_clkdiv_half_div_less_1 == 1'b1) begin
      rff_s2b_i2ss5_clkdiv_half_div_less_1 <= (wmask & s2b_i2ss5_clkdiv_half_div_less_1) | (wmask_inv & rff_s2b_i2ss5_clkdiv_half_div_less_1);
    end
  end
  assign out_s2b_i2ss5_clkdiv_half_div_less_1 = rff_s2b_i2ss5_clkdiv_half_div_less_1;
  logic [STATION_SLOW_IO_B2S_TIMER_EN_WIDTH - 1 : 0] rff_b2s_timer_en;
  logic [STATION_SLOW_IO_B2S_TIMER_EN_WIDTH - 1 : 0] b2s_timer_en;
  logic load_b2s_timer_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_timer_en <= STATION_SLOW_IO_B2S_TIMER_EN_RSTVAL;
    end else if (load_b2s_timer_en == 1'b1) begin
      rff_b2s_timer_en <= (wmask & b2s_timer_en) | (wmask_inv & rff_b2s_timer_en);

    end else if (vld_in_b2s_timer_en == 1'b1) begin
      rff_b2s_timer_en <= in_b2s_timer_en;
    end
  end
  assign out_b2s_timer_en = rff_b2s_timer_en;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_MST_CSTATE_WIDTH - 1 : 0] rff_b2s_i2c0_debug_mst_cstate;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_MST_CSTATE_WIDTH - 1 : 0] b2s_i2c0_debug_mst_cstate;
  logic load_b2s_i2c0_debug_mst_cstate;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c0_debug_mst_cstate <= STATION_SLOW_IO_B2S_I2C0_DEBUG_MST_CSTATE_RSTVAL;
    end else if (load_b2s_i2c0_debug_mst_cstate == 1'b1) begin
      rff_b2s_i2c0_debug_mst_cstate <= (wmask & b2s_i2c0_debug_mst_cstate) | (wmask_inv & rff_b2s_i2c0_debug_mst_cstate);

    end else if (vld_in_b2s_i2c0_debug_mst_cstate == 1'b1) begin
      rff_b2s_i2c0_debug_mst_cstate <= in_b2s_i2c0_debug_mst_cstate;
    end
  end
  assign out_b2s_i2c0_debug_mst_cstate = rff_b2s_i2c0_debug_mst_cstate;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_MST_CSTATE_WIDTH - 1 : 0] rff_b2s_i2c1_debug_mst_cstate;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_MST_CSTATE_WIDTH - 1 : 0] b2s_i2c1_debug_mst_cstate;
  logic load_b2s_i2c1_debug_mst_cstate;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c1_debug_mst_cstate <= STATION_SLOW_IO_B2S_I2C1_DEBUG_MST_CSTATE_RSTVAL;
    end else if (load_b2s_i2c1_debug_mst_cstate == 1'b1) begin
      rff_b2s_i2c1_debug_mst_cstate <= (wmask & b2s_i2c1_debug_mst_cstate) | (wmask_inv & rff_b2s_i2c1_debug_mst_cstate);

    end else if (vld_in_b2s_i2c1_debug_mst_cstate == 1'b1) begin
      rff_b2s_i2c1_debug_mst_cstate <= in_b2s_i2c1_debug_mst_cstate;
    end
  end
  assign out_b2s_i2c1_debug_mst_cstate = rff_b2s_i2c1_debug_mst_cstate;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_MST_CSTATE_WIDTH - 1 : 0] rff_b2s_i2c2_debug_mst_cstate;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_MST_CSTATE_WIDTH - 1 : 0] b2s_i2c2_debug_mst_cstate;
  logic load_b2s_i2c2_debug_mst_cstate;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c2_debug_mst_cstate <= STATION_SLOW_IO_B2S_I2C2_DEBUG_MST_CSTATE_RSTVAL;
    end else if (load_b2s_i2c2_debug_mst_cstate == 1'b1) begin
      rff_b2s_i2c2_debug_mst_cstate <= (wmask & b2s_i2c2_debug_mst_cstate) | (wmask_inv & rff_b2s_i2c2_debug_mst_cstate);

    end else if (vld_in_b2s_i2c2_debug_mst_cstate == 1'b1) begin
      rff_b2s_i2c2_debug_mst_cstate <= in_b2s_i2c2_debug_mst_cstate;
    end
  end
  assign out_b2s_i2c2_debug_mst_cstate = rff_b2s_i2c2_debug_mst_cstate;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_SLV_CSTATE_WIDTH - 1 : 0] rff_b2s_i2c0_debug_slv_cstate;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_SLV_CSTATE_WIDTH - 1 : 0] b2s_i2c0_debug_slv_cstate;
  logic load_b2s_i2c0_debug_slv_cstate;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c0_debug_slv_cstate <= STATION_SLOW_IO_B2S_I2C0_DEBUG_SLV_CSTATE_RSTVAL;
    end else if (load_b2s_i2c0_debug_slv_cstate == 1'b1) begin
      rff_b2s_i2c0_debug_slv_cstate <= (wmask & b2s_i2c0_debug_slv_cstate) | (wmask_inv & rff_b2s_i2c0_debug_slv_cstate);

    end else if (vld_in_b2s_i2c0_debug_slv_cstate == 1'b1) begin
      rff_b2s_i2c0_debug_slv_cstate <= in_b2s_i2c0_debug_slv_cstate;
    end
  end
  assign out_b2s_i2c0_debug_slv_cstate = rff_b2s_i2c0_debug_slv_cstate;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_SLV_CSTATE_WIDTH - 1 : 0] rff_b2s_i2c1_debug_slv_cstate;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_SLV_CSTATE_WIDTH - 1 : 0] b2s_i2c1_debug_slv_cstate;
  logic load_b2s_i2c1_debug_slv_cstate;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c1_debug_slv_cstate <= STATION_SLOW_IO_B2S_I2C1_DEBUG_SLV_CSTATE_RSTVAL;
    end else if (load_b2s_i2c1_debug_slv_cstate == 1'b1) begin
      rff_b2s_i2c1_debug_slv_cstate <= (wmask & b2s_i2c1_debug_slv_cstate) | (wmask_inv & rff_b2s_i2c1_debug_slv_cstate);

    end else if (vld_in_b2s_i2c1_debug_slv_cstate == 1'b1) begin
      rff_b2s_i2c1_debug_slv_cstate <= in_b2s_i2c1_debug_slv_cstate;
    end
  end
  assign out_b2s_i2c1_debug_slv_cstate = rff_b2s_i2c1_debug_slv_cstate;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_SLV_CSTATE_WIDTH - 1 : 0] rff_b2s_i2c2_debug_slv_cstate;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_SLV_CSTATE_WIDTH - 1 : 0] b2s_i2c2_debug_slv_cstate;
  logic load_b2s_i2c2_debug_slv_cstate;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c2_debug_slv_cstate <= STATION_SLOW_IO_B2S_I2C2_DEBUG_SLV_CSTATE_RSTVAL;
    end else if (load_b2s_i2c2_debug_slv_cstate == 1'b1) begin
      rff_b2s_i2c2_debug_slv_cstate <= (wmask & b2s_i2c2_debug_slv_cstate) | (wmask_inv & rff_b2s_i2c2_debug_slv_cstate);

    end else if (vld_in_b2s_i2c2_debug_slv_cstate == 1'b1) begin
      rff_b2s_i2c2_debug_slv_cstate <= in_b2s_i2c2_debug_slv_cstate;
    end
  end
  assign out_b2s_i2c2_debug_slv_cstate = rff_b2s_i2c2_debug_slv_cstate;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_0_WIDTH - 1 : 0] rff_SSP_SHARED_sel_0;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_0_WIDTH - 1 : 0] SSP_SHARED_sel_0;
  logic load_SSP_SHARED_sel_0;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_0 <= STATION_SLOW_IO_SSP_SHARED_SEL_0_RSTVAL;
    end else if (load_SSP_SHARED_sel_0 == 1'b1) begin
      rff_SSP_SHARED_sel_0 <= (wmask & SSP_SHARED_sel_0) | (wmask_inv & rff_SSP_SHARED_sel_0);
    end
  end
  assign out_SSP_SHARED_sel_0 = rff_SSP_SHARED_sel_0;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_1_WIDTH - 1 : 0] rff_SSP_SHARED_sel_1;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_1_WIDTH - 1 : 0] SSP_SHARED_sel_1;
  logic load_SSP_SHARED_sel_1;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_1 <= STATION_SLOW_IO_SSP_SHARED_SEL_1_RSTVAL;
    end else if (load_SSP_SHARED_sel_1 == 1'b1) begin
      rff_SSP_SHARED_sel_1 <= (wmask & SSP_SHARED_sel_1) | (wmask_inv & rff_SSP_SHARED_sel_1);
    end
  end
  assign out_SSP_SHARED_sel_1 = rff_SSP_SHARED_sel_1;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_2_WIDTH - 1 : 0] rff_SSP_SHARED_sel_2;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_2_WIDTH - 1 : 0] SSP_SHARED_sel_2;
  logic load_SSP_SHARED_sel_2;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_2 <= STATION_SLOW_IO_SSP_SHARED_SEL_2_RSTVAL;
    end else if (load_SSP_SHARED_sel_2 == 1'b1) begin
      rff_SSP_SHARED_sel_2 <= (wmask & SSP_SHARED_sel_2) | (wmask_inv & rff_SSP_SHARED_sel_2);
    end
  end
  assign out_SSP_SHARED_sel_2 = rff_SSP_SHARED_sel_2;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_3_WIDTH - 1 : 0] rff_SSP_SHARED_sel_3;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_3_WIDTH - 1 : 0] SSP_SHARED_sel_3;
  logic load_SSP_SHARED_sel_3;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_3 <= STATION_SLOW_IO_SSP_SHARED_SEL_3_RSTVAL;
    end else if (load_SSP_SHARED_sel_3 == 1'b1) begin
      rff_SSP_SHARED_sel_3 <= (wmask & SSP_SHARED_sel_3) | (wmask_inv & rff_SSP_SHARED_sel_3);
    end
  end
  assign out_SSP_SHARED_sel_3 = rff_SSP_SHARED_sel_3;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_4_WIDTH - 1 : 0] rff_SSP_SHARED_sel_4;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_4_WIDTH - 1 : 0] SSP_SHARED_sel_4;
  logic load_SSP_SHARED_sel_4;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_4 <= STATION_SLOW_IO_SSP_SHARED_SEL_4_RSTVAL;
    end else if (load_SSP_SHARED_sel_4 == 1'b1) begin
      rff_SSP_SHARED_sel_4 <= (wmask & SSP_SHARED_sel_4) | (wmask_inv & rff_SSP_SHARED_sel_4);
    end
  end
  assign out_SSP_SHARED_sel_4 = rff_SSP_SHARED_sel_4;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_5_WIDTH - 1 : 0] rff_SSP_SHARED_sel_5;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_5_WIDTH - 1 : 0] SSP_SHARED_sel_5;
  logic load_SSP_SHARED_sel_5;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_5 <= STATION_SLOW_IO_SSP_SHARED_SEL_5_RSTVAL;
    end else if (load_SSP_SHARED_sel_5 == 1'b1) begin
      rff_SSP_SHARED_sel_5 <= (wmask & SSP_SHARED_sel_5) | (wmask_inv & rff_SSP_SHARED_sel_5);
    end
  end
  assign out_SSP_SHARED_sel_5 = rff_SSP_SHARED_sel_5;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_6_WIDTH - 1 : 0] rff_SSP_SHARED_sel_6;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_6_WIDTH - 1 : 0] SSP_SHARED_sel_6;
  logic load_SSP_SHARED_sel_6;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_6 <= STATION_SLOW_IO_SSP_SHARED_SEL_6_RSTVAL;
    end else if (load_SSP_SHARED_sel_6 == 1'b1) begin
      rff_SSP_SHARED_sel_6 <= (wmask & SSP_SHARED_sel_6) | (wmask_inv & rff_SSP_SHARED_sel_6);
    end
  end
  assign out_SSP_SHARED_sel_6 = rff_SSP_SHARED_sel_6;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_7_WIDTH - 1 : 0] rff_SSP_SHARED_sel_7;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_7_WIDTH - 1 : 0] SSP_SHARED_sel_7;
  logic load_SSP_SHARED_sel_7;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_7 <= STATION_SLOW_IO_SSP_SHARED_SEL_7_RSTVAL;
    end else if (load_SSP_SHARED_sel_7 == 1'b1) begin
      rff_SSP_SHARED_sel_7 <= (wmask & SSP_SHARED_sel_7) | (wmask_inv & rff_SSP_SHARED_sel_7);
    end
  end
  assign out_SSP_SHARED_sel_7 = rff_SSP_SHARED_sel_7;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_8_WIDTH - 1 : 0] rff_SSP_SHARED_sel_8;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_8_WIDTH - 1 : 0] SSP_SHARED_sel_8;
  logic load_SSP_SHARED_sel_8;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_8 <= STATION_SLOW_IO_SSP_SHARED_SEL_8_RSTVAL;
    end else if (load_SSP_SHARED_sel_8 == 1'b1) begin
      rff_SSP_SHARED_sel_8 <= (wmask & SSP_SHARED_sel_8) | (wmask_inv & rff_SSP_SHARED_sel_8);
    end
  end
  assign out_SSP_SHARED_sel_8 = rff_SSP_SHARED_sel_8;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_9_WIDTH - 1 : 0] rff_SSP_SHARED_sel_9;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_9_WIDTH - 1 : 0] SSP_SHARED_sel_9;
  logic load_SSP_SHARED_sel_9;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_9 <= STATION_SLOW_IO_SSP_SHARED_SEL_9_RSTVAL;
    end else if (load_SSP_SHARED_sel_9 == 1'b1) begin
      rff_SSP_SHARED_sel_9 <= (wmask & SSP_SHARED_sel_9) | (wmask_inv & rff_SSP_SHARED_sel_9);
    end
  end
  assign out_SSP_SHARED_sel_9 = rff_SSP_SHARED_sel_9;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_10_WIDTH - 1 : 0] rff_SSP_SHARED_sel_10;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_10_WIDTH - 1 : 0] SSP_SHARED_sel_10;
  logic load_SSP_SHARED_sel_10;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_10 <= STATION_SLOW_IO_SSP_SHARED_SEL_10_RSTVAL;
    end else if (load_SSP_SHARED_sel_10 == 1'b1) begin
      rff_SSP_SHARED_sel_10 <= (wmask & SSP_SHARED_sel_10) | (wmask_inv & rff_SSP_SHARED_sel_10);
    end
  end
  assign out_SSP_SHARED_sel_10 = rff_SSP_SHARED_sel_10;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_11_WIDTH - 1 : 0] rff_SSP_SHARED_sel_11;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_11_WIDTH - 1 : 0] SSP_SHARED_sel_11;
  logic load_SSP_SHARED_sel_11;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_11 <= STATION_SLOW_IO_SSP_SHARED_SEL_11_RSTVAL;
    end else if (load_SSP_SHARED_sel_11 == 1'b1) begin
      rff_SSP_SHARED_sel_11 <= (wmask & SSP_SHARED_sel_11) | (wmask_inv & rff_SSP_SHARED_sel_11);
    end
  end
  assign out_SSP_SHARED_sel_11 = rff_SSP_SHARED_sel_11;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_12_WIDTH - 1 : 0] rff_SSP_SHARED_sel_12;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_12_WIDTH - 1 : 0] SSP_SHARED_sel_12;
  logic load_SSP_SHARED_sel_12;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_12 <= STATION_SLOW_IO_SSP_SHARED_SEL_12_RSTVAL;
    end else if (load_SSP_SHARED_sel_12 == 1'b1) begin
      rff_SSP_SHARED_sel_12 <= (wmask & SSP_SHARED_sel_12) | (wmask_inv & rff_SSP_SHARED_sel_12);
    end
  end
  assign out_SSP_SHARED_sel_12 = rff_SSP_SHARED_sel_12;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_13_WIDTH - 1 : 0] rff_SSP_SHARED_sel_13;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_13_WIDTH - 1 : 0] SSP_SHARED_sel_13;
  logic load_SSP_SHARED_sel_13;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_13 <= STATION_SLOW_IO_SSP_SHARED_SEL_13_RSTVAL;
    end else if (load_SSP_SHARED_sel_13 == 1'b1) begin
      rff_SSP_SHARED_sel_13 <= (wmask & SSP_SHARED_sel_13) | (wmask_inv & rff_SSP_SHARED_sel_13);
    end
  end
  assign out_SSP_SHARED_sel_13 = rff_SSP_SHARED_sel_13;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_14_WIDTH - 1 : 0] rff_SSP_SHARED_sel_14;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_14_WIDTH - 1 : 0] SSP_SHARED_sel_14;
  logic load_SSP_SHARED_sel_14;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_14 <= STATION_SLOW_IO_SSP_SHARED_SEL_14_RSTVAL;
    end else if (load_SSP_SHARED_sel_14 == 1'b1) begin
      rff_SSP_SHARED_sel_14 <= (wmask & SSP_SHARED_sel_14) | (wmask_inv & rff_SSP_SHARED_sel_14);
    end
  end
  assign out_SSP_SHARED_sel_14 = rff_SSP_SHARED_sel_14;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_15_WIDTH - 1 : 0] rff_SSP_SHARED_sel_15;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_15_WIDTH - 1 : 0] SSP_SHARED_sel_15;
  logic load_SSP_SHARED_sel_15;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_15 <= STATION_SLOW_IO_SSP_SHARED_SEL_15_RSTVAL;
    end else if (load_SSP_SHARED_sel_15 == 1'b1) begin
      rff_SSP_SHARED_sel_15 <= (wmask & SSP_SHARED_sel_15) | (wmask_inv & rff_SSP_SHARED_sel_15);
    end
  end
  assign out_SSP_SHARED_sel_15 = rff_SSP_SHARED_sel_15;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_16_WIDTH - 1 : 0] rff_SSP_SHARED_sel_16;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_16_WIDTH - 1 : 0] SSP_SHARED_sel_16;
  logic load_SSP_SHARED_sel_16;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_16 <= STATION_SLOW_IO_SSP_SHARED_SEL_16_RSTVAL;
    end else if (load_SSP_SHARED_sel_16 == 1'b1) begin
      rff_SSP_SHARED_sel_16 <= (wmask & SSP_SHARED_sel_16) | (wmask_inv & rff_SSP_SHARED_sel_16);
    end
  end
  assign out_SSP_SHARED_sel_16 = rff_SSP_SHARED_sel_16;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_17_WIDTH - 1 : 0] rff_SSP_SHARED_sel_17;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_17_WIDTH - 1 : 0] SSP_SHARED_sel_17;
  logic load_SSP_SHARED_sel_17;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_17 <= STATION_SLOW_IO_SSP_SHARED_SEL_17_RSTVAL;
    end else if (load_SSP_SHARED_sel_17 == 1'b1) begin
      rff_SSP_SHARED_sel_17 <= (wmask & SSP_SHARED_sel_17) | (wmask_inv & rff_SSP_SHARED_sel_17);
    end
  end
  assign out_SSP_SHARED_sel_17 = rff_SSP_SHARED_sel_17;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_18_WIDTH - 1 : 0] rff_SSP_SHARED_sel_18;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_18_WIDTH - 1 : 0] SSP_SHARED_sel_18;
  logic load_SSP_SHARED_sel_18;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_18 <= STATION_SLOW_IO_SSP_SHARED_SEL_18_RSTVAL;
    end else if (load_SSP_SHARED_sel_18 == 1'b1) begin
      rff_SSP_SHARED_sel_18 <= (wmask & SSP_SHARED_sel_18) | (wmask_inv & rff_SSP_SHARED_sel_18);
    end
  end
  assign out_SSP_SHARED_sel_18 = rff_SSP_SHARED_sel_18;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_19_WIDTH - 1 : 0] rff_SSP_SHARED_sel_19;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_19_WIDTH - 1 : 0] SSP_SHARED_sel_19;
  logic load_SSP_SHARED_sel_19;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_19 <= STATION_SLOW_IO_SSP_SHARED_SEL_19_RSTVAL;
    end else if (load_SSP_SHARED_sel_19 == 1'b1) begin
      rff_SSP_SHARED_sel_19 <= (wmask & SSP_SHARED_sel_19) | (wmask_inv & rff_SSP_SHARED_sel_19);
    end
  end
  assign out_SSP_SHARED_sel_19 = rff_SSP_SHARED_sel_19;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_20_WIDTH - 1 : 0] rff_SSP_SHARED_sel_20;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_20_WIDTH - 1 : 0] SSP_SHARED_sel_20;
  logic load_SSP_SHARED_sel_20;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_20 <= STATION_SLOW_IO_SSP_SHARED_SEL_20_RSTVAL;
    end else if (load_SSP_SHARED_sel_20 == 1'b1) begin
      rff_SSP_SHARED_sel_20 <= (wmask & SSP_SHARED_sel_20) | (wmask_inv & rff_SSP_SHARED_sel_20);
    end
  end
  assign out_SSP_SHARED_sel_20 = rff_SSP_SHARED_sel_20;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_21_WIDTH - 1 : 0] rff_SSP_SHARED_sel_21;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_21_WIDTH - 1 : 0] SSP_SHARED_sel_21;
  logic load_SSP_SHARED_sel_21;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_21 <= STATION_SLOW_IO_SSP_SHARED_SEL_21_RSTVAL;
    end else if (load_SSP_SHARED_sel_21 == 1'b1) begin
      rff_SSP_SHARED_sel_21 <= (wmask & SSP_SHARED_sel_21) | (wmask_inv & rff_SSP_SHARED_sel_21);
    end
  end
  assign out_SSP_SHARED_sel_21 = rff_SSP_SHARED_sel_21;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_22_WIDTH - 1 : 0] rff_SSP_SHARED_sel_22;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_22_WIDTH - 1 : 0] SSP_SHARED_sel_22;
  logic load_SSP_SHARED_sel_22;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_22 <= STATION_SLOW_IO_SSP_SHARED_SEL_22_RSTVAL;
    end else if (load_SSP_SHARED_sel_22 == 1'b1) begin
      rff_SSP_SHARED_sel_22 <= (wmask & SSP_SHARED_sel_22) | (wmask_inv & rff_SSP_SHARED_sel_22);
    end
  end
  assign out_SSP_SHARED_sel_22 = rff_SSP_SHARED_sel_22;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_23_WIDTH - 1 : 0] rff_SSP_SHARED_sel_23;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_23_WIDTH - 1 : 0] SSP_SHARED_sel_23;
  logic load_SSP_SHARED_sel_23;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_23 <= STATION_SLOW_IO_SSP_SHARED_SEL_23_RSTVAL;
    end else if (load_SSP_SHARED_sel_23 == 1'b1) begin
      rff_SSP_SHARED_sel_23 <= (wmask & SSP_SHARED_sel_23) | (wmask_inv & rff_SSP_SHARED_sel_23);
    end
  end
  assign out_SSP_SHARED_sel_23 = rff_SSP_SHARED_sel_23;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_24_WIDTH - 1 : 0] rff_SSP_SHARED_sel_24;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_24_WIDTH - 1 : 0] SSP_SHARED_sel_24;
  logic load_SSP_SHARED_sel_24;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_24 <= STATION_SLOW_IO_SSP_SHARED_SEL_24_RSTVAL;
    end else if (load_SSP_SHARED_sel_24 == 1'b1) begin
      rff_SSP_SHARED_sel_24 <= (wmask & SSP_SHARED_sel_24) | (wmask_inv & rff_SSP_SHARED_sel_24);
    end
  end
  assign out_SSP_SHARED_sel_24 = rff_SSP_SHARED_sel_24;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_25_WIDTH - 1 : 0] rff_SSP_SHARED_sel_25;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_25_WIDTH - 1 : 0] SSP_SHARED_sel_25;
  logic load_SSP_SHARED_sel_25;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_25 <= STATION_SLOW_IO_SSP_SHARED_SEL_25_RSTVAL;
    end else if (load_SSP_SHARED_sel_25 == 1'b1) begin
      rff_SSP_SHARED_sel_25 <= (wmask & SSP_SHARED_sel_25) | (wmask_inv & rff_SSP_SHARED_sel_25);
    end
  end
  assign out_SSP_SHARED_sel_25 = rff_SSP_SHARED_sel_25;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_26_WIDTH - 1 : 0] rff_SSP_SHARED_sel_26;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_26_WIDTH - 1 : 0] SSP_SHARED_sel_26;
  logic load_SSP_SHARED_sel_26;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_26 <= STATION_SLOW_IO_SSP_SHARED_SEL_26_RSTVAL;
    end else if (load_SSP_SHARED_sel_26 == 1'b1) begin
      rff_SSP_SHARED_sel_26 <= (wmask & SSP_SHARED_sel_26) | (wmask_inv & rff_SSP_SHARED_sel_26);
    end
  end
  assign out_SSP_SHARED_sel_26 = rff_SSP_SHARED_sel_26;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_27_WIDTH - 1 : 0] rff_SSP_SHARED_sel_27;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_27_WIDTH - 1 : 0] SSP_SHARED_sel_27;
  logic load_SSP_SHARED_sel_27;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_27 <= STATION_SLOW_IO_SSP_SHARED_SEL_27_RSTVAL;
    end else if (load_SSP_SHARED_sel_27 == 1'b1) begin
      rff_SSP_SHARED_sel_27 <= (wmask & SSP_SHARED_sel_27) | (wmask_inv & rff_SSP_SHARED_sel_27);
    end
  end
  assign out_SSP_SHARED_sel_27 = rff_SSP_SHARED_sel_27;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_28_WIDTH - 1 : 0] rff_SSP_SHARED_sel_28;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_28_WIDTH - 1 : 0] SSP_SHARED_sel_28;
  logic load_SSP_SHARED_sel_28;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_28 <= STATION_SLOW_IO_SSP_SHARED_SEL_28_RSTVAL;
    end else if (load_SSP_SHARED_sel_28 == 1'b1) begin
      rff_SSP_SHARED_sel_28 <= (wmask & SSP_SHARED_sel_28) | (wmask_inv & rff_SSP_SHARED_sel_28);
    end
  end
  assign out_SSP_SHARED_sel_28 = rff_SSP_SHARED_sel_28;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_29_WIDTH - 1 : 0] rff_SSP_SHARED_sel_29;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_29_WIDTH - 1 : 0] SSP_SHARED_sel_29;
  logic load_SSP_SHARED_sel_29;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_29 <= STATION_SLOW_IO_SSP_SHARED_SEL_29_RSTVAL;
    end else if (load_SSP_SHARED_sel_29 == 1'b1) begin
      rff_SSP_SHARED_sel_29 <= (wmask & SSP_SHARED_sel_29) | (wmask_inv & rff_SSP_SHARED_sel_29);
    end
  end
  assign out_SSP_SHARED_sel_29 = rff_SSP_SHARED_sel_29;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_30_WIDTH - 1 : 0] rff_SSP_SHARED_sel_30;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_30_WIDTH - 1 : 0] SSP_SHARED_sel_30;
  logic load_SSP_SHARED_sel_30;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_30 <= STATION_SLOW_IO_SSP_SHARED_SEL_30_RSTVAL;
    end else if (load_SSP_SHARED_sel_30 == 1'b1) begin
      rff_SSP_SHARED_sel_30 <= (wmask & SSP_SHARED_sel_30) | (wmask_inv & rff_SSP_SHARED_sel_30);
    end
  end
  assign out_SSP_SHARED_sel_30 = rff_SSP_SHARED_sel_30;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_31_WIDTH - 1 : 0] rff_SSP_SHARED_sel_31;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_31_WIDTH - 1 : 0] SSP_SHARED_sel_31;
  logic load_SSP_SHARED_sel_31;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_31 <= STATION_SLOW_IO_SSP_SHARED_SEL_31_RSTVAL;
    end else if (load_SSP_SHARED_sel_31 == 1'b1) begin
      rff_SSP_SHARED_sel_31 <= (wmask & SSP_SHARED_sel_31) | (wmask_inv & rff_SSP_SHARED_sel_31);
    end
  end
  assign out_SSP_SHARED_sel_31 = rff_SSP_SHARED_sel_31;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_32_WIDTH - 1 : 0] rff_SSP_SHARED_sel_32;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_32_WIDTH - 1 : 0] SSP_SHARED_sel_32;
  logic load_SSP_SHARED_sel_32;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_32 <= STATION_SLOW_IO_SSP_SHARED_SEL_32_RSTVAL;
    end else if (load_SSP_SHARED_sel_32 == 1'b1) begin
      rff_SSP_SHARED_sel_32 <= (wmask & SSP_SHARED_sel_32) | (wmask_inv & rff_SSP_SHARED_sel_32);
    end
  end
  assign out_SSP_SHARED_sel_32 = rff_SSP_SHARED_sel_32;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_33_WIDTH - 1 : 0] rff_SSP_SHARED_sel_33;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_33_WIDTH - 1 : 0] SSP_SHARED_sel_33;
  logic load_SSP_SHARED_sel_33;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_33 <= STATION_SLOW_IO_SSP_SHARED_SEL_33_RSTVAL;
    end else if (load_SSP_SHARED_sel_33 == 1'b1) begin
      rff_SSP_SHARED_sel_33 <= (wmask & SSP_SHARED_sel_33) | (wmask_inv & rff_SSP_SHARED_sel_33);
    end
  end
  assign out_SSP_SHARED_sel_33 = rff_SSP_SHARED_sel_33;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_34_WIDTH - 1 : 0] rff_SSP_SHARED_sel_34;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_34_WIDTH - 1 : 0] SSP_SHARED_sel_34;
  logic load_SSP_SHARED_sel_34;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_34 <= STATION_SLOW_IO_SSP_SHARED_SEL_34_RSTVAL;
    end else if (load_SSP_SHARED_sel_34 == 1'b1) begin
      rff_SSP_SHARED_sel_34 <= (wmask & SSP_SHARED_sel_34) | (wmask_inv & rff_SSP_SHARED_sel_34);
    end
  end
  assign out_SSP_SHARED_sel_34 = rff_SSP_SHARED_sel_34;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_35_WIDTH - 1 : 0] rff_SSP_SHARED_sel_35;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_35_WIDTH - 1 : 0] SSP_SHARED_sel_35;
  logic load_SSP_SHARED_sel_35;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_35 <= STATION_SLOW_IO_SSP_SHARED_SEL_35_RSTVAL;
    end else if (load_SSP_SHARED_sel_35 == 1'b1) begin
      rff_SSP_SHARED_sel_35 <= (wmask & SSP_SHARED_sel_35) | (wmask_inv & rff_SSP_SHARED_sel_35);
    end
  end
  assign out_SSP_SHARED_sel_35 = rff_SSP_SHARED_sel_35;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_36_WIDTH - 1 : 0] rff_SSP_SHARED_sel_36;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_36_WIDTH - 1 : 0] SSP_SHARED_sel_36;
  logic load_SSP_SHARED_sel_36;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_36 <= STATION_SLOW_IO_SSP_SHARED_SEL_36_RSTVAL;
    end else if (load_SSP_SHARED_sel_36 == 1'b1) begin
      rff_SSP_SHARED_sel_36 <= (wmask & SSP_SHARED_sel_36) | (wmask_inv & rff_SSP_SHARED_sel_36);
    end
  end
  assign out_SSP_SHARED_sel_36 = rff_SSP_SHARED_sel_36;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_37_WIDTH - 1 : 0] rff_SSP_SHARED_sel_37;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_37_WIDTH - 1 : 0] SSP_SHARED_sel_37;
  logic load_SSP_SHARED_sel_37;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_37 <= STATION_SLOW_IO_SSP_SHARED_SEL_37_RSTVAL;
    end else if (load_SSP_SHARED_sel_37 == 1'b1) begin
      rff_SSP_SHARED_sel_37 <= (wmask & SSP_SHARED_sel_37) | (wmask_inv & rff_SSP_SHARED_sel_37);
    end
  end
  assign out_SSP_SHARED_sel_37 = rff_SSP_SHARED_sel_37;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_38_WIDTH - 1 : 0] rff_SSP_SHARED_sel_38;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_38_WIDTH - 1 : 0] SSP_SHARED_sel_38;
  logic load_SSP_SHARED_sel_38;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_38 <= STATION_SLOW_IO_SSP_SHARED_SEL_38_RSTVAL;
    end else if (load_SSP_SHARED_sel_38 == 1'b1) begin
      rff_SSP_SHARED_sel_38 <= (wmask & SSP_SHARED_sel_38) | (wmask_inv & rff_SSP_SHARED_sel_38);
    end
  end
  assign out_SSP_SHARED_sel_38 = rff_SSP_SHARED_sel_38;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_39_WIDTH - 1 : 0] rff_SSP_SHARED_sel_39;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_39_WIDTH - 1 : 0] SSP_SHARED_sel_39;
  logic load_SSP_SHARED_sel_39;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_39 <= STATION_SLOW_IO_SSP_SHARED_SEL_39_RSTVAL;
    end else if (load_SSP_SHARED_sel_39 == 1'b1) begin
      rff_SSP_SHARED_sel_39 <= (wmask & SSP_SHARED_sel_39) | (wmask_inv & rff_SSP_SHARED_sel_39);
    end
  end
  assign out_SSP_SHARED_sel_39 = rff_SSP_SHARED_sel_39;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_40_WIDTH - 1 : 0] rff_SSP_SHARED_sel_40;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_40_WIDTH - 1 : 0] SSP_SHARED_sel_40;
  logic load_SSP_SHARED_sel_40;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_40 <= STATION_SLOW_IO_SSP_SHARED_SEL_40_RSTVAL;
    end else if (load_SSP_SHARED_sel_40 == 1'b1) begin
      rff_SSP_SHARED_sel_40 <= (wmask & SSP_SHARED_sel_40) | (wmask_inv & rff_SSP_SHARED_sel_40);
    end
  end
  assign out_SSP_SHARED_sel_40 = rff_SSP_SHARED_sel_40;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_41_WIDTH - 1 : 0] rff_SSP_SHARED_sel_41;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_41_WIDTH - 1 : 0] SSP_SHARED_sel_41;
  logic load_SSP_SHARED_sel_41;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_41 <= STATION_SLOW_IO_SSP_SHARED_SEL_41_RSTVAL;
    end else if (load_SSP_SHARED_sel_41 == 1'b1) begin
      rff_SSP_SHARED_sel_41 <= (wmask & SSP_SHARED_sel_41) | (wmask_inv & rff_SSP_SHARED_sel_41);
    end
  end
  assign out_SSP_SHARED_sel_41 = rff_SSP_SHARED_sel_41;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_42_WIDTH - 1 : 0] rff_SSP_SHARED_sel_42;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_42_WIDTH - 1 : 0] SSP_SHARED_sel_42;
  logic load_SSP_SHARED_sel_42;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_42 <= STATION_SLOW_IO_SSP_SHARED_SEL_42_RSTVAL;
    end else if (load_SSP_SHARED_sel_42 == 1'b1) begin
      rff_SSP_SHARED_sel_42 <= (wmask & SSP_SHARED_sel_42) | (wmask_inv & rff_SSP_SHARED_sel_42);
    end
  end
  assign out_SSP_SHARED_sel_42 = rff_SSP_SHARED_sel_42;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_43_WIDTH - 1 : 0] rff_SSP_SHARED_sel_43;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_43_WIDTH - 1 : 0] SSP_SHARED_sel_43;
  logic load_SSP_SHARED_sel_43;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_43 <= STATION_SLOW_IO_SSP_SHARED_SEL_43_RSTVAL;
    end else if (load_SSP_SHARED_sel_43 == 1'b1) begin
      rff_SSP_SHARED_sel_43 <= (wmask & SSP_SHARED_sel_43) | (wmask_inv & rff_SSP_SHARED_sel_43);
    end
  end
  assign out_SSP_SHARED_sel_43 = rff_SSP_SHARED_sel_43;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_44_WIDTH - 1 : 0] rff_SSP_SHARED_sel_44;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_44_WIDTH - 1 : 0] SSP_SHARED_sel_44;
  logic load_SSP_SHARED_sel_44;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_44 <= STATION_SLOW_IO_SSP_SHARED_SEL_44_RSTVAL;
    end else if (load_SSP_SHARED_sel_44 == 1'b1) begin
      rff_SSP_SHARED_sel_44 <= (wmask & SSP_SHARED_sel_44) | (wmask_inv & rff_SSP_SHARED_sel_44);
    end
  end
  assign out_SSP_SHARED_sel_44 = rff_SSP_SHARED_sel_44;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_45_WIDTH - 1 : 0] rff_SSP_SHARED_sel_45;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_45_WIDTH - 1 : 0] SSP_SHARED_sel_45;
  logic load_SSP_SHARED_sel_45;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_45 <= STATION_SLOW_IO_SSP_SHARED_SEL_45_RSTVAL;
    end else if (load_SSP_SHARED_sel_45 == 1'b1) begin
      rff_SSP_SHARED_sel_45 <= (wmask & SSP_SHARED_sel_45) | (wmask_inv & rff_SSP_SHARED_sel_45);
    end
  end
  assign out_SSP_SHARED_sel_45 = rff_SSP_SHARED_sel_45;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_46_WIDTH - 1 : 0] rff_SSP_SHARED_sel_46;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_46_WIDTH - 1 : 0] SSP_SHARED_sel_46;
  logic load_SSP_SHARED_sel_46;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_46 <= STATION_SLOW_IO_SSP_SHARED_SEL_46_RSTVAL;
    end else if (load_SSP_SHARED_sel_46 == 1'b1) begin
      rff_SSP_SHARED_sel_46 <= (wmask & SSP_SHARED_sel_46) | (wmask_inv & rff_SSP_SHARED_sel_46);
    end
  end
  assign out_SSP_SHARED_sel_46 = rff_SSP_SHARED_sel_46;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_47_WIDTH - 1 : 0] rff_SSP_SHARED_sel_47;
  logic [STATION_SLOW_IO_SSP_SHARED_SEL_47_WIDTH - 1 : 0] SSP_SHARED_sel_47;
  logic load_SSP_SHARED_sel_47;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_SSP_SHARED_sel_47 <= STATION_SLOW_IO_SSP_SHARED_SEL_47_RSTVAL;
    end else if (load_SSP_SHARED_sel_47 == 1'b1) begin
      rff_SSP_SHARED_sel_47 <= (wmask & SSP_SHARED_sel_47) | (wmask_inv & rff_SSP_SHARED_sel_47);
    end
  end
  assign out_SSP_SHARED_sel_47 = rff_SSP_SHARED_sel_47;
  logic [STATION_SLOW_IO_S2B_I2SM_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] rff_s2b_i2sm_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_S2B_I2SM_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] s2b_i2sm_clkdiv_divclk_sel;
  logic load_s2b_i2sm_clkdiv_divclk_sel;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2sm_clkdiv_divclk_sel <= STATION_SLOW_IO_S2B_I2SM_CLKDIV_DIVCLK_SEL_RSTVAL;
    end else if (load_s2b_i2sm_clkdiv_divclk_sel == 1'b1) begin
      rff_s2b_i2sm_clkdiv_divclk_sel <= (wmask & s2b_i2sm_clkdiv_divclk_sel) | (wmask_inv & rff_s2b_i2sm_clkdiv_divclk_sel);
    end
  end
  assign out_s2b_i2sm_clkdiv_divclk_sel = rff_s2b_i2sm_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_S2B_I2SS0_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] rff_s2b_i2ss0_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_S2B_I2SS0_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] s2b_i2ss0_clkdiv_divclk_sel;
  logic load_s2b_i2ss0_clkdiv_divclk_sel;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2ss0_clkdiv_divclk_sel <= STATION_SLOW_IO_S2B_I2SS0_CLKDIV_DIVCLK_SEL_RSTVAL;
    end else if (load_s2b_i2ss0_clkdiv_divclk_sel == 1'b1) begin
      rff_s2b_i2ss0_clkdiv_divclk_sel <= (wmask & s2b_i2ss0_clkdiv_divclk_sel) | (wmask_inv & rff_s2b_i2ss0_clkdiv_divclk_sel);
    end
  end
  assign out_s2b_i2ss0_clkdiv_divclk_sel = rff_s2b_i2ss0_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_S2B_I2SS1_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] rff_s2b_i2ss1_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_S2B_I2SS1_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] s2b_i2ss1_clkdiv_divclk_sel;
  logic load_s2b_i2ss1_clkdiv_divclk_sel;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2ss1_clkdiv_divclk_sel <= STATION_SLOW_IO_S2B_I2SS1_CLKDIV_DIVCLK_SEL_RSTVAL;
    end else if (load_s2b_i2ss1_clkdiv_divclk_sel == 1'b1) begin
      rff_s2b_i2ss1_clkdiv_divclk_sel <= (wmask & s2b_i2ss1_clkdiv_divclk_sel) | (wmask_inv & rff_s2b_i2ss1_clkdiv_divclk_sel);
    end
  end
  assign out_s2b_i2ss1_clkdiv_divclk_sel = rff_s2b_i2ss1_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_S2B_I2SS2_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] rff_s2b_i2ss2_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_S2B_I2SS2_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] s2b_i2ss2_clkdiv_divclk_sel;
  logic load_s2b_i2ss2_clkdiv_divclk_sel;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2ss2_clkdiv_divclk_sel <= STATION_SLOW_IO_S2B_I2SS2_CLKDIV_DIVCLK_SEL_RSTVAL;
    end else if (load_s2b_i2ss2_clkdiv_divclk_sel == 1'b1) begin
      rff_s2b_i2ss2_clkdiv_divclk_sel <= (wmask & s2b_i2ss2_clkdiv_divclk_sel) | (wmask_inv & rff_s2b_i2ss2_clkdiv_divclk_sel);
    end
  end
  assign out_s2b_i2ss2_clkdiv_divclk_sel = rff_s2b_i2ss2_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_S2B_I2SS3_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] rff_s2b_i2ss3_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_S2B_I2SS3_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] s2b_i2ss3_clkdiv_divclk_sel;
  logic load_s2b_i2ss3_clkdiv_divclk_sel;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2ss3_clkdiv_divclk_sel <= STATION_SLOW_IO_S2B_I2SS3_CLKDIV_DIVCLK_SEL_RSTVAL;
    end else if (load_s2b_i2ss3_clkdiv_divclk_sel == 1'b1) begin
      rff_s2b_i2ss3_clkdiv_divclk_sel <= (wmask & s2b_i2ss3_clkdiv_divclk_sel) | (wmask_inv & rff_s2b_i2ss3_clkdiv_divclk_sel);
    end
  end
  assign out_s2b_i2ss3_clkdiv_divclk_sel = rff_s2b_i2ss3_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_S2B_I2SS4_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] rff_s2b_i2ss4_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_S2B_I2SS4_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] s2b_i2ss4_clkdiv_divclk_sel;
  logic load_s2b_i2ss4_clkdiv_divclk_sel;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2ss4_clkdiv_divclk_sel <= STATION_SLOW_IO_S2B_I2SS4_CLKDIV_DIVCLK_SEL_RSTVAL;
    end else if (load_s2b_i2ss4_clkdiv_divclk_sel == 1'b1) begin
      rff_s2b_i2ss4_clkdiv_divclk_sel <= (wmask & s2b_i2ss4_clkdiv_divclk_sel) | (wmask_inv & rff_s2b_i2ss4_clkdiv_divclk_sel);
    end
  end
  assign out_s2b_i2ss4_clkdiv_divclk_sel = rff_s2b_i2ss4_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_S2B_I2SS5_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] rff_s2b_i2ss5_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_S2B_I2SS5_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0] s2b_i2ss5_clkdiv_divclk_sel;
  logic load_s2b_i2ss5_clkdiv_divclk_sel;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2ss5_clkdiv_divclk_sel <= STATION_SLOW_IO_S2B_I2SS5_CLKDIV_DIVCLK_SEL_RSTVAL;
    end else if (load_s2b_i2ss5_clkdiv_divclk_sel == 1'b1) begin
      rff_s2b_i2ss5_clkdiv_divclk_sel <= (wmask & s2b_i2ss5_clkdiv_divclk_sel) | (wmask_inv & rff_s2b_i2ss5_clkdiv_divclk_sel);
    end
  end
  assign out_s2b_i2ss5_clkdiv_divclk_sel = rff_s2b_i2ss5_clkdiv_divclk_sel;
  logic [STATION_SLOW_IO_B2S_QSPIM_SSI_BUSY_WIDTH - 1 : 0] rff_b2s_qspim_ssi_busy;
  logic [STATION_SLOW_IO_B2S_QSPIM_SSI_BUSY_WIDTH - 1 : 0] b2s_qspim_ssi_busy;
  logic load_b2s_qspim_ssi_busy;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_qspim_ssi_busy <= STATION_SLOW_IO_B2S_QSPIM_SSI_BUSY_RSTVAL;
    end else if (load_b2s_qspim_ssi_busy == 1'b1) begin
      rff_b2s_qspim_ssi_busy <= (wmask & b2s_qspim_ssi_busy) | (wmask_inv & rff_b2s_qspim_ssi_busy);

    end else if (vld_in_b2s_qspim_ssi_busy == 1'b1) begin
      rff_b2s_qspim_ssi_busy <= in_b2s_qspim_ssi_busy;
    end
  end
  assign out_b2s_qspim_ssi_busy = rff_b2s_qspim_ssi_busy;
  logic [STATION_SLOW_IO_B2S_QSPIM_SSI_SLEEP_WIDTH - 1 : 0] rff_b2s_qspim_ssi_sleep;
  logic [STATION_SLOW_IO_B2S_QSPIM_SSI_SLEEP_WIDTH - 1 : 0] b2s_qspim_ssi_sleep;
  logic load_b2s_qspim_ssi_sleep;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_qspim_ssi_sleep <= STATION_SLOW_IO_B2S_QSPIM_SSI_SLEEP_RSTVAL;
    end else if (load_b2s_qspim_ssi_sleep == 1'b1) begin
      rff_b2s_qspim_ssi_sleep <= (wmask & b2s_qspim_ssi_sleep) | (wmask_inv & rff_b2s_qspim_ssi_sleep);

    end else if (vld_in_b2s_qspim_ssi_sleep == 1'b1) begin
      rff_b2s_qspim_ssi_sleep <= in_b2s_qspim_ssi_sleep;
    end
  end
  assign out_b2s_qspim_ssi_sleep = rff_b2s_qspim_ssi_sleep;
  logic [STATION_SLOW_IO_S2B_QSPIM_SSI_CLK_EN_WIDTH - 1 : 0] rff_s2b_qspim_ssi_clk_en;
  logic [STATION_SLOW_IO_S2B_QSPIM_SSI_CLK_EN_WIDTH - 1 : 0] s2b_qspim_ssi_clk_en;
  logic load_s2b_qspim_ssi_clk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_qspim_ssi_clk_en <= STATION_SLOW_IO_S2B_QSPIM_SSI_CLK_EN_RSTVAL;
    end else if (load_s2b_qspim_ssi_clk_en == 1'b1) begin
      rff_s2b_qspim_ssi_clk_en <= (wmask & s2b_qspim_ssi_clk_en) | (wmask_inv & rff_s2b_qspim_ssi_clk_en);
    end
  end
  assign out_s2b_qspim_ssi_clk_en = rff_s2b_qspim_ssi_clk_en;
  logic [STATION_SLOW_IO_B2S_SSPIM0_SSI_SLEEP_WIDTH - 1 : 0] rff_b2s_sspim0_ssi_sleep;
  logic [STATION_SLOW_IO_B2S_SSPIM0_SSI_SLEEP_WIDTH - 1 : 0] b2s_sspim0_ssi_sleep;
  logic load_b2s_sspim0_ssi_sleep;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_sspim0_ssi_sleep <= STATION_SLOW_IO_B2S_SSPIM0_SSI_SLEEP_RSTVAL;
    end else if (load_b2s_sspim0_ssi_sleep == 1'b1) begin
      rff_b2s_sspim0_ssi_sleep <= (wmask & b2s_sspim0_ssi_sleep) | (wmask_inv & rff_b2s_sspim0_ssi_sleep);

    end else if (vld_in_b2s_sspim0_ssi_sleep == 1'b1) begin
      rff_b2s_sspim0_ssi_sleep <= in_b2s_sspim0_ssi_sleep;
    end
  end
  assign out_b2s_sspim0_ssi_sleep = rff_b2s_sspim0_ssi_sleep;
  logic [STATION_SLOW_IO_S2B_SSPIM0_SSI_CLK_EN_WIDTH - 1 : 0] rff_s2b_sspim0_ssi_clk_en;
  logic [STATION_SLOW_IO_S2B_SSPIM0_SSI_CLK_EN_WIDTH - 1 : 0] s2b_sspim0_ssi_clk_en;
  logic load_s2b_sspim0_ssi_clk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_sspim0_ssi_clk_en <= STATION_SLOW_IO_S2B_SSPIM0_SSI_CLK_EN_RSTVAL;
    end else if (load_s2b_sspim0_ssi_clk_en == 1'b1) begin
      rff_s2b_sspim0_ssi_clk_en <= (wmask & s2b_sspim0_ssi_clk_en) | (wmask_inv & rff_s2b_sspim0_ssi_clk_en);
    end
  end
  assign out_s2b_sspim0_ssi_clk_en = rff_s2b_sspim0_ssi_clk_en;
  logic [STATION_SLOW_IO_B2S_SSPIM1_SSI_SLEEP_WIDTH - 1 : 0] rff_b2s_sspim1_ssi_sleep;
  logic [STATION_SLOW_IO_B2S_SSPIM1_SSI_SLEEP_WIDTH - 1 : 0] b2s_sspim1_ssi_sleep;
  logic load_b2s_sspim1_ssi_sleep;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_sspim1_ssi_sleep <= STATION_SLOW_IO_B2S_SSPIM1_SSI_SLEEP_RSTVAL;
    end else if (load_b2s_sspim1_ssi_sleep == 1'b1) begin
      rff_b2s_sspim1_ssi_sleep <= (wmask & b2s_sspim1_ssi_sleep) | (wmask_inv & rff_b2s_sspim1_ssi_sleep);

    end else if (vld_in_b2s_sspim1_ssi_sleep == 1'b1) begin
      rff_b2s_sspim1_ssi_sleep <= in_b2s_sspim1_ssi_sleep;
    end
  end
  assign out_b2s_sspim1_ssi_sleep = rff_b2s_sspim1_ssi_sleep;
  logic [STATION_SLOW_IO_S2B_SSPIM1_SSI_CLK_EN_WIDTH - 1 : 0] rff_s2b_sspim1_ssi_clk_en;
  logic [STATION_SLOW_IO_S2B_SSPIM1_SSI_CLK_EN_WIDTH - 1 : 0] s2b_sspim1_ssi_clk_en;
  logic load_s2b_sspim1_ssi_clk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_sspim1_ssi_clk_en <= STATION_SLOW_IO_S2B_SSPIM1_SSI_CLK_EN_RSTVAL;
    end else if (load_s2b_sspim1_ssi_clk_en == 1'b1) begin
      rff_s2b_sspim1_ssi_clk_en <= (wmask & s2b_sspim1_ssi_clk_en) | (wmask_inv & rff_s2b_sspim1_ssi_clk_en);
    end
  end
  assign out_s2b_sspim1_ssi_clk_en = rff_s2b_sspim1_ssi_clk_en;
  logic [STATION_SLOW_IO_B2S_SSPIM2_SSI_SLEEP_WIDTH - 1 : 0] rff_b2s_sspim2_ssi_sleep;
  logic [STATION_SLOW_IO_B2S_SSPIM2_SSI_SLEEP_WIDTH - 1 : 0] b2s_sspim2_ssi_sleep;
  logic load_b2s_sspim2_ssi_sleep;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_sspim2_ssi_sleep <= STATION_SLOW_IO_B2S_SSPIM2_SSI_SLEEP_RSTVAL;
    end else if (load_b2s_sspim2_ssi_sleep == 1'b1) begin
      rff_b2s_sspim2_ssi_sleep <= (wmask & b2s_sspim2_ssi_sleep) | (wmask_inv & rff_b2s_sspim2_ssi_sleep);

    end else if (vld_in_b2s_sspim2_ssi_sleep == 1'b1) begin
      rff_b2s_sspim2_ssi_sleep <= in_b2s_sspim2_ssi_sleep;
    end
  end
  assign out_b2s_sspim2_ssi_sleep = rff_b2s_sspim2_ssi_sleep;
  logic [STATION_SLOW_IO_S2B_SSPIM2_SSI_CLK_EN_WIDTH - 1 : 0] rff_s2b_sspim2_ssi_clk_en;
  logic [STATION_SLOW_IO_S2B_SSPIM2_SSI_CLK_EN_WIDTH - 1 : 0] s2b_sspim2_ssi_clk_en;
  logic load_s2b_sspim2_ssi_clk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_sspim2_ssi_clk_en <= STATION_SLOW_IO_S2B_SSPIM2_SSI_CLK_EN_RSTVAL;
    end else if (load_s2b_sspim2_ssi_clk_en == 1'b1) begin
      rff_s2b_sspim2_ssi_clk_en <= (wmask & s2b_sspim2_ssi_clk_en) | (wmask_inv & rff_s2b_sspim2_ssi_clk_en);
    end
  end
  assign out_s2b_sspim2_ssi_clk_en = rff_s2b_sspim2_ssi_clk_en;
  logic [STATION_SLOW_IO_B2S_SPIS_SSI_SLEEP_WIDTH - 1 : 0] rff_b2s_spis_ssi_sleep;
  logic [STATION_SLOW_IO_B2S_SPIS_SSI_SLEEP_WIDTH - 1 : 0] b2s_spis_ssi_sleep;
  logic load_b2s_spis_ssi_sleep;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_spis_ssi_sleep <= STATION_SLOW_IO_B2S_SPIS_SSI_SLEEP_RSTVAL;
    end else if (load_b2s_spis_ssi_sleep == 1'b1) begin
      rff_b2s_spis_ssi_sleep <= (wmask & b2s_spis_ssi_sleep) | (wmask_inv & rff_b2s_spis_ssi_sleep);

    end else if (vld_in_b2s_spis_ssi_sleep == 1'b1) begin
      rff_b2s_spis_ssi_sleep <= in_b2s_spis_ssi_sleep;
    end
  end
  assign out_b2s_spis_ssi_sleep = rff_b2s_spis_ssi_sleep;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_WIDTH - 1 : 0] rff_b2s_i2c0_debug_addr;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_WIDTH - 1 : 0] b2s_i2c0_debug_addr;
  logic load_b2s_i2c0_debug_addr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c0_debug_addr <= STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_RSTVAL;
    end else if (load_b2s_i2c0_debug_addr == 1'b1) begin
      rff_b2s_i2c0_debug_addr <= (wmask & b2s_i2c0_debug_addr) | (wmask_inv & rff_b2s_i2c0_debug_addr);

    end else if (vld_in_b2s_i2c0_debug_addr == 1'b1) begin
      rff_b2s_i2c0_debug_addr <= in_b2s_i2c0_debug_addr;
    end
  end
  assign out_b2s_i2c0_debug_addr = rff_b2s_i2c0_debug_addr;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_10BIT_WIDTH - 1 : 0] rff_b2s_i2c0_debug_addr_10bit;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_10BIT_WIDTH - 1 : 0] b2s_i2c0_debug_addr_10bit;
  logic load_b2s_i2c0_debug_addr_10bit;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c0_debug_addr_10bit <= STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_10BIT_RSTVAL;
    end else if (load_b2s_i2c0_debug_addr_10bit == 1'b1) begin
      rff_b2s_i2c0_debug_addr_10bit <= (wmask & b2s_i2c0_debug_addr_10bit) | (wmask_inv & rff_b2s_i2c0_debug_addr_10bit);

    end else if (vld_in_b2s_i2c0_debug_addr_10bit == 1'b1) begin
      rff_b2s_i2c0_debug_addr_10bit <= in_b2s_i2c0_debug_addr_10bit;
    end
  end
  assign out_b2s_i2c0_debug_addr_10bit = rff_b2s_i2c0_debug_addr_10bit;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_DATA_WIDTH - 1 : 0] rff_b2s_i2c0_debug_data;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_DATA_WIDTH - 1 : 0] b2s_i2c0_debug_data;
  logic load_b2s_i2c0_debug_data;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c0_debug_data <= STATION_SLOW_IO_B2S_I2C0_DEBUG_DATA_RSTVAL;
    end else if (load_b2s_i2c0_debug_data == 1'b1) begin
      rff_b2s_i2c0_debug_data <= (wmask & b2s_i2c0_debug_data) | (wmask_inv & rff_b2s_i2c0_debug_data);

    end else if (vld_in_b2s_i2c0_debug_data == 1'b1) begin
      rff_b2s_i2c0_debug_data <= in_b2s_i2c0_debug_data;
    end
  end
  assign out_b2s_i2c0_debug_data = rff_b2s_i2c0_debug_data;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_HS_WIDTH - 1 : 0] rff_b2s_i2c0_debug_hs;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_HS_WIDTH - 1 : 0] b2s_i2c0_debug_hs;
  logic load_b2s_i2c0_debug_hs;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c0_debug_hs <= STATION_SLOW_IO_B2S_I2C0_DEBUG_HS_RSTVAL;
    end else if (load_b2s_i2c0_debug_hs == 1'b1) begin
      rff_b2s_i2c0_debug_hs <= (wmask & b2s_i2c0_debug_hs) | (wmask_inv & rff_b2s_i2c0_debug_hs);

    end else if (vld_in_b2s_i2c0_debug_hs == 1'b1) begin
      rff_b2s_i2c0_debug_hs <= in_b2s_i2c0_debug_hs;
    end
  end
  assign out_b2s_i2c0_debug_hs = rff_b2s_i2c0_debug_hs;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_MASTER_ACT_WIDTH - 1 : 0] rff_b2s_i2c0_debug_master_act;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_MASTER_ACT_WIDTH - 1 : 0] b2s_i2c0_debug_master_act;
  logic load_b2s_i2c0_debug_master_act;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c0_debug_master_act <= STATION_SLOW_IO_B2S_I2C0_DEBUG_MASTER_ACT_RSTVAL;
    end else if (load_b2s_i2c0_debug_master_act == 1'b1) begin
      rff_b2s_i2c0_debug_master_act <= (wmask & b2s_i2c0_debug_master_act) | (wmask_inv & rff_b2s_i2c0_debug_master_act);

    end else if (vld_in_b2s_i2c0_debug_master_act == 1'b1) begin
      rff_b2s_i2c0_debug_master_act <= in_b2s_i2c0_debug_master_act;
    end
  end
  assign out_b2s_i2c0_debug_master_act = rff_b2s_i2c0_debug_master_act;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_P_GEN_WIDTH - 1 : 0] rff_b2s_i2c0_debug_p_gen;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_P_GEN_WIDTH - 1 : 0] b2s_i2c0_debug_p_gen;
  logic load_b2s_i2c0_debug_p_gen;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c0_debug_p_gen <= STATION_SLOW_IO_B2S_I2C0_DEBUG_P_GEN_RSTVAL;
    end else if (load_b2s_i2c0_debug_p_gen == 1'b1) begin
      rff_b2s_i2c0_debug_p_gen <= (wmask & b2s_i2c0_debug_p_gen) | (wmask_inv & rff_b2s_i2c0_debug_p_gen);

    end else if (vld_in_b2s_i2c0_debug_p_gen == 1'b1) begin
      rff_b2s_i2c0_debug_p_gen <= in_b2s_i2c0_debug_p_gen;
    end
  end
  assign out_b2s_i2c0_debug_p_gen = rff_b2s_i2c0_debug_p_gen;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_RD_WIDTH - 1 : 0] rff_b2s_i2c0_debug_rd;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_RD_WIDTH - 1 : 0] b2s_i2c0_debug_rd;
  logic load_b2s_i2c0_debug_rd;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c0_debug_rd <= STATION_SLOW_IO_B2S_I2C0_DEBUG_RD_RSTVAL;
    end else if (load_b2s_i2c0_debug_rd == 1'b1) begin
      rff_b2s_i2c0_debug_rd <= (wmask & b2s_i2c0_debug_rd) | (wmask_inv & rff_b2s_i2c0_debug_rd);

    end else if (vld_in_b2s_i2c0_debug_rd == 1'b1) begin
      rff_b2s_i2c0_debug_rd <= in_b2s_i2c0_debug_rd;
    end
  end
  assign out_b2s_i2c0_debug_rd = rff_b2s_i2c0_debug_rd;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_S_GEN_WIDTH - 1 : 0] rff_b2s_i2c0_debug_s_gen;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_S_GEN_WIDTH - 1 : 0] b2s_i2c0_debug_s_gen;
  logic load_b2s_i2c0_debug_s_gen;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c0_debug_s_gen <= STATION_SLOW_IO_B2S_I2C0_DEBUG_S_GEN_RSTVAL;
    end else if (load_b2s_i2c0_debug_s_gen == 1'b1) begin
      rff_b2s_i2c0_debug_s_gen <= (wmask & b2s_i2c0_debug_s_gen) | (wmask_inv & rff_b2s_i2c0_debug_s_gen);

    end else if (vld_in_b2s_i2c0_debug_s_gen == 1'b1) begin
      rff_b2s_i2c0_debug_s_gen <= in_b2s_i2c0_debug_s_gen;
    end
  end
  assign out_b2s_i2c0_debug_s_gen = rff_b2s_i2c0_debug_s_gen;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_SLAVE_ACT_WIDTH - 1 : 0] rff_b2s_i2c0_debug_slave_act;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_SLAVE_ACT_WIDTH - 1 : 0] b2s_i2c0_debug_slave_act;
  logic load_b2s_i2c0_debug_slave_act;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c0_debug_slave_act <= STATION_SLOW_IO_B2S_I2C0_DEBUG_SLAVE_ACT_RSTVAL;
    end else if (load_b2s_i2c0_debug_slave_act == 1'b1) begin
      rff_b2s_i2c0_debug_slave_act <= (wmask & b2s_i2c0_debug_slave_act) | (wmask_inv & rff_b2s_i2c0_debug_slave_act);

    end else if (vld_in_b2s_i2c0_debug_slave_act == 1'b1) begin
      rff_b2s_i2c0_debug_slave_act <= in_b2s_i2c0_debug_slave_act;
    end
  end
  assign out_b2s_i2c0_debug_slave_act = rff_b2s_i2c0_debug_slave_act;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_WR_WIDTH - 1 : 0] rff_b2s_i2c0_debug_wr;
  logic [STATION_SLOW_IO_B2S_I2C0_DEBUG_WR_WIDTH - 1 : 0] b2s_i2c0_debug_wr;
  logic load_b2s_i2c0_debug_wr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c0_debug_wr <= STATION_SLOW_IO_B2S_I2C0_DEBUG_WR_RSTVAL;
    end else if (load_b2s_i2c0_debug_wr == 1'b1) begin
      rff_b2s_i2c0_debug_wr <= (wmask & b2s_i2c0_debug_wr) | (wmask_inv & rff_b2s_i2c0_debug_wr);

    end else if (vld_in_b2s_i2c0_debug_wr == 1'b1) begin
      rff_b2s_i2c0_debug_wr <= in_b2s_i2c0_debug_wr;
    end
  end
  assign out_b2s_i2c0_debug_wr = rff_b2s_i2c0_debug_wr;
  logic [STATION_SLOW_IO_S2B_I2C0_CLK_EN_WIDTH - 1 : 0] rff_s2b_i2c0_clk_en;
  logic [STATION_SLOW_IO_S2B_I2C0_CLK_EN_WIDTH - 1 : 0] s2b_i2c0_clk_en;
  logic load_s2b_i2c0_clk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2c0_clk_en <= STATION_SLOW_IO_S2B_I2C0_CLK_EN_RSTVAL;
    end else if (load_s2b_i2c0_clk_en == 1'b1) begin
      rff_s2b_i2c0_clk_en <= (wmask & s2b_i2c0_clk_en) | (wmask_inv & rff_s2b_i2c0_clk_en);
    end
  end
  assign out_s2b_i2c0_clk_en = rff_s2b_i2c0_clk_en;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_WIDTH - 1 : 0] rff_b2s_i2c1_debug_addr;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_WIDTH - 1 : 0] b2s_i2c1_debug_addr;
  logic load_b2s_i2c1_debug_addr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c1_debug_addr <= STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_RSTVAL;
    end else if (load_b2s_i2c1_debug_addr == 1'b1) begin
      rff_b2s_i2c1_debug_addr <= (wmask & b2s_i2c1_debug_addr) | (wmask_inv & rff_b2s_i2c1_debug_addr);

    end else if (vld_in_b2s_i2c1_debug_addr == 1'b1) begin
      rff_b2s_i2c1_debug_addr <= in_b2s_i2c1_debug_addr;
    end
  end
  assign out_b2s_i2c1_debug_addr = rff_b2s_i2c1_debug_addr;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_10BIT_WIDTH - 1 : 0] rff_b2s_i2c1_debug_addr_10bit;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_10BIT_WIDTH - 1 : 0] b2s_i2c1_debug_addr_10bit;
  logic load_b2s_i2c1_debug_addr_10bit;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c1_debug_addr_10bit <= STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_10BIT_RSTVAL;
    end else if (load_b2s_i2c1_debug_addr_10bit == 1'b1) begin
      rff_b2s_i2c1_debug_addr_10bit <= (wmask & b2s_i2c1_debug_addr_10bit) | (wmask_inv & rff_b2s_i2c1_debug_addr_10bit);

    end else if (vld_in_b2s_i2c1_debug_addr_10bit == 1'b1) begin
      rff_b2s_i2c1_debug_addr_10bit <= in_b2s_i2c1_debug_addr_10bit;
    end
  end
  assign out_b2s_i2c1_debug_addr_10bit = rff_b2s_i2c1_debug_addr_10bit;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_DATA_WIDTH - 1 : 0] rff_b2s_i2c1_debug_data;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_DATA_WIDTH - 1 : 0] b2s_i2c1_debug_data;
  logic load_b2s_i2c1_debug_data;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c1_debug_data <= STATION_SLOW_IO_B2S_I2C1_DEBUG_DATA_RSTVAL;
    end else if (load_b2s_i2c1_debug_data == 1'b1) begin
      rff_b2s_i2c1_debug_data <= (wmask & b2s_i2c1_debug_data) | (wmask_inv & rff_b2s_i2c1_debug_data);

    end else if (vld_in_b2s_i2c1_debug_data == 1'b1) begin
      rff_b2s_i2c1_debug_data <= in_b2s_i2c1_debug_data;
    end
  end
  assign out_b2s_i2c1_debug_data = rff_b2s_i2c1_debug_data;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_HS_WIDTH - 1 : 0] rff_b2s_i2c1_debug_hs;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_HS_WIDTH - 1 : 0] b2s_i2c1_debug_hs;
  logic load_b2s_i2c1_debug_hs;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c1_debug_hs <= STATION_SLOW_IO_B2S_I2C1_DEBUG_HS_RSTVAL;
    end else if (load_b2s_i2c1_debug_hs == 1'b1) begin
      rff_b2s_i2c1_debug_hs <= (wmask & b2s_i2c1_debug_hs) | (wmask_inv & rff_b2s_i2c1_debug_hs);

    end else if (vld_in_b2s_i2c1_debug_hs == 1'b1) begin
      rff_b2s_i2c1_debug_hs <= in_b2s_i2c1_debug_hs;
    end
  end
  assign out_b2s_i2c1_debug_hs = rff_b2s_i2c1_debug_hs;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_MASTER_ACT_WIDTH - 1 : 0] rff_b2s_i2c1_debug_master_act;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_MASTER_ACT_WIDTH - 1 : 0] b2s_i2c1_debug_master_act;
  logic load_b2s_i2c1_debug_master_act;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c1_debug_master_act <= STATION_SLOW_IO_B2S_I2C1_DEBUG_MASTER_ACT_RSTVAL;
    end else if (load_b2s_i2c1_debug_master_act == 1'b1) begin
      rff_b2s_i2c1_debug_master_act <= (wmask & b2s_i2c1_debug_master_act) | (wmask_inv & rff_b2s_i2c1_debug_master_act);

    end else if (vld_in_b2s_i2c1_debug_master_act == 1'b1) begin
      rff_b2s_i2c1_debug_master_act <= in_b2s_i2c1_debug_master_act;
    end
  end
  assign out_b2s_i2c1_debug_master_act = rff_b2s_i2c1_debug_master_act;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_P_GEN_WIDTH - 1 : 0] rff_b2s_i2c1_debug_p_gen;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_P_GEN_WIDTH - 1 : 0] b2s_i2c1_debug_p_gen;
  logic load_b2s_i2c1_debug_p_gen;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c1_debug_p_gen <= STATION_SLOW_IO_B2S_I2C1_DEBUG_P_GEN_RSTVAL;
    end else if (load_b2s_i2c1_debug_p_gen == 1'b1) begin
      rff_b2s_i2c1_debug_p_gen <= (wmask & b2s_i2c1_debug_p_gen) | (wmask_inv & rff_b2s_i2c1_debug_p_gen);

    end else if (vld_in_b2s_i2c1_debug_p_gen == 1'b1) begin
      rff_b2s_i2c1_debug_p_gen <= in_b2s_i2c1_debug_p_gen;
    end
  end
  assign out_b2s_i2c1_debug_p_gen = rff_b2s_i2c1_debug_p_gen;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_RD_WIDTH - 1 : 0] rff_b2s_i2c1_debug_rd;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_RD_WIDTH - 1 : 0] b2s_i2c1_debug_rd;
  logic load_b2s_i2c1_debug_rd;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c1_debug_rd <= STATION_SLOW_IO_B2S_I2C1_DEBUG_RD_RSTVAL;
    end else if (load_b2s_i2c1_debug_rd == 1'b1) begin
      rff_b2s_i2c1_debug_rd <= (wmask & b2s_i2c1_debug_rd) | (wmask_inv & rff_b2s_i2c1_debug_rd);

    end else if (vld_in_b2s_i2c1_debug_rd == 1'b1) begin
      rff_b2s_i2c1_debug_rd <= in_b2s_i2c1_debug_rd;
    end
  end
  assign out_b2s_i2c1_debug_rd = rff_b2s_i2c1_debug_rd;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_S_GEN_WIDTH - 1 : 0] rff_b2s_i2c1_debug_s_gen;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_S_GEN_WIDTH - 1 : 0] b2s_i2c1_debug_s_gen;
  logic load_b2s_i2c1_debug_s_gen;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c1_debug_s_gen <= STATION_SLOW_IO_B2S_I2C1_DEBUG_S_GEN_RSTVAL;
    end else if (load_b2s_i2c1_debug_s_gen == 1'b1) begin
      rff_b2s_i2c1_debug_s_gen <= (wmask & b2s_i2c1_debug_s_gen) | (wmask_inv & rff_b2s_i2c1_debug_s_gen);

    end else if (vld_in_b2s_i2c1_debug_s_gen == 1'b1) begin
      rff_b2s_i2c1_debug_s_gen <= in_b2s_i2c1_debug_s_gen;
    end
  end
  assign out_b2s_i2c1_debug_s_gen = rff_b2s_i2c1_debug_s_gen;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_SLAVE_ACT_WIDTH - 1 : 0] rff_b2s_i2c1_debug_slave_act;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_SLAVE_ACT_WIDTH - 1 : 0] b2s_i2c1_debug_slave_act;
  logic load_b2s_i2c1_debug_slave_act;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c1_debug_slave_act <= STATION_SLOW_IO_B2S_I2C1_DEBUG_SLAVE_ACT_RSTVAL;
    end else if (load_b2s_i2c1_debug_slave_act == 1'b1) begin
      rff_b2s_i2c1_debug_slave_act <= (wmask & b2s_i2c1_debug_slave_act) | (wmask_inv & rff_b2s_i2c1_debug_slave_act);

    end else if (vld_in_b2s_i2c1_debug_slave_act == 1'b1) begin
      rff_b2s_i2c1_debug_slave_act <= in_b2s_i2c1_debug_slave_act;
    end
  end
  assign out_b2s_i2c1_debug_slave_act = rff_b2s_i2c1_debug_slave_act;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_WR_WIDTH - 1 : 0] rff_b2s_i2c1_debug_wr;
  logic [STATION_SLOW_IO_B2S_I2C1_DEBUG_WR_WIDTH - 1 : 0] b2s_i2c1_debug_wr;
  logic load_b2s_i2c1_debug_wr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c1_debug_wr <= STATION_SLOW_IO_B2S_I2C1_DEBUG_WR_RSTVAL;
    end else if (load_b2s_i2c1_debug_wr == 1'b1) begin
      rff_b2s_i2c1_debug_wr <= (wmask & b2s_i2c1_debug_wr) | (wmask_inv & rff_b2s_i2c1_debug_wr);

    end else if (vld_in_b2s_i2c1_debug_wr == 1'b1) begin
      rff_b2s_i2c1_debug_wr <= in_b2s_i2c1_debug_wr;
    end
  end
  assign out_b2s_i2c1_debug_wr = rff_b2s_i2c1_debug_wr;
  logic [STATION_SLOW_IO_S2B_I2C1_CLK_EN_WIDTH - 1 : 0] rff_s2b_i2c1_clk_en;
  logic [STATION_SLOW_IO_S2B_I2C1_CLK_EN_WIDTH - 1 : 0] s2b_i2c1_clk_en;
  logic load_s2b_i2c1_clk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2c1_clk_en <= STATION_SLOW_IO_S2B_I2C1_CLK_EN_RSTVAL;
    end else if (load_s2b_i2c1_clk_en == 1'b1) begin
      rff_s2b_i2c1_clk_en <= (wmask & s2b_i2c1_clk_en) | (wmask_inv & rff_s2b_i2c1_clk_en);
    end
  end
  assign out_s2b_i2c1_clk_en = rff_s2b_i2c1_clk_en;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_WIDTH - 1 : 0] rff_b2s_i2c2_debug_addr;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_WIDTH - 1 : 0] b2s_i2c2_debug_addr;
  logic load_b2s_i2c2_debug_addr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c2_debug_addr <= STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_RSTVAL;
    end else if (load_b2s_i2c2_debug_addr == 1'b1) begin
      rff_b2s_i2c2_debug_addr <= (wmask & b2s_i2c2_debug_addr) | (wmask_inv & rff_b2s_i2c2_debug_addr);

    end else if (vld_in_b2s_i2c2_debug_addr == 1'b1) begin
      rff_b2s_i2c2_debug_addr <= in_b2s_i2c2_debug_addr;
    end
  end
  assign out_b2s_i2c2_debug_addr = rff_b2s_i2c2_debug_addr;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_10BIT_WIDTH - 1 : 0] rff_b2s_i2c2_debug_addr_10bit;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_10BIT_WIDTH - 1 : 0] b2s_i2c2_debug_addr_10bit;
  logic load_b2s_i2c2_debug_addr_10bit;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c2_debug_addr_10bit <= STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_10BIT_RSTVAL;
    end else if (load_b2s_i2c2_debug_addr_10bit == 1'b1) begin
      rff_b2s_i2c2_debug_addr_10bit <= (wmask & b2s_i2c2_debug_addr_10bit) | (wmask_inv & rff_b2s_i2c2_debug_addr_10bit);

    end else if (vld_in_b2s_i2c2_debug_addr_10bit == 1'b1) begin
      rff_b2s_i2c2_debug_addr_10bit <= in_b2s_i2c2_debug_addr_10bit;
    end
  end
  assign out_b2s_i2c2_debug_addr_10bit = rff_b2s_i2c2_debug_addr_10bit;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_DATA_WIDTH - 1 : 0] rff_b2s_i2c2_debug_data;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_DATA_WIDTH - 1 : 0] b2s_i2c2_debug_data;
  logic load_b2s_i2c2_debug_data;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c2_debug_data <= STATION_SLOW_IO_B2S_I2C2_DEBUG_DATA_RSTVAL;
    end else if (load_b2s_i2c2_debug_data == 1'b1) begin
      rff_b2s_i2c2_debug_data <= (wmask & b2s_i2c2_debug_data) | (wmask_inv & rff_b2s_i2c2_debug_data);

    end else if (vld_in_b2s_i2c2_debug_data == 1'b1) begin
      rff_b2s_i2c2_debug_data <= in_b2s_i2c2_debug_data;
    end
  end
  assign out_b2s_i2c2_debug_data = rff_b2s_i2c2_debug_data;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_HS_WIDTH - 1 : 0] rff_b2s_i2c2_debug_hs;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_HS_WIDTH - 1 : 0] b2s_i2c2_debug_hs;
  logic load_b2s_i2c2_debug_hs;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c2_debug_hs <= STATION_SLOW_IO_B2S_I2C2_DEBUG_HS_RSTVAL;
    end else if (load_b2s_i2c2_debug_hs == 1'b1) begin
      rff_b2s_i2c2_debug_hs <= (wmask & b2s_i2c2_debug_hs) | (wmask_inv & rff_b2s_i2c2_debug_hs);

    end else if (vld_in_b2s_i2c2_debug_hs == 1'b1) begin
      rff_b2s_i2c2_debug_hs <= in_b2s_i2c2_debug_hs;
    end
  end
  assign out_b2s_i2c2_debug_hs = rff_b2s_i2c2_debug_hs;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_MASTER_ACT_WIDTH - 1 : 0] rff_b2s_i2c2_debug_master_act;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_MASTER_ACT_WIDTH - 1 : 0] b2s_i2c2_debug_master_act;
  logic load_b2s_i2c2_debug_master_act;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c2_debug_master_act <= STATION_SLOW_IO_B2S_I2C2_DEBUG_MASTER_ACT_RSTVAL;
    end else if (load_b2s_i2c2_debug_master_act == 1'b1) begin
      rff_b2s_i2c2_debug_master_act <= (wmask & b2s_i2c2_debug_master_act) | (wmask_inv & rff_b2s_i2c2_debug_master_act);

    end else if (vld_in_b2s_i2c2_debug_master_act == 1'b1) begin
      rff_b2s_i2c2_debug_master_act <= in_b2s_i2c2_debug_master_act;
    end
  end
  assign out_b2s_i2c2_debug_master_act = rff_b2s_i2c2_debug_master_act;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_P_GEN_WIDTH - 1 : 0] rff_b2s_i2c2_debug_p_gen;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_P_GEN_WIDTH - 1 : 0] b2s_i2c2_debug_p_gen;
  logic load_b2s_i2c2_debug_p_gen;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c2_debug_p_gen <= STATION_SLOW_IO_B2S_I2C2_DEBUG_P_GEN_RSTVAL;
    end else if (load_b2s_i2c2_debug_p_gen == 1'b1) begin
      rff_b2s_i2c2_debug_p_gen <= (wmask & b2s_i2c2_debug_p_gen) | (wmask_inv & rff_b2s_i2c2_debug_p_gen);

    end else if (vld_in_b2s_i2c2_debug_p_gen == 1'b1) begin
      rff_b2s_i2c2_debug_p_gen <= in_b2s_i2c2_debug_p_gen;
    end
  end
  assign out_b2s_i2c2_debug_p_gen = rff_b2s_i2c2_debug_p_gen;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_RD_WIDTH - 1 : 0] rff_b2s_i2c2_debug_rd;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_RD_WIDTH - 1 : 0] b2s_i2c2_debug_rd;
  logic load_b2s_i2c2_debug_rd;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c2_debug_rd <= STATION_SLOW_IO_B2S_I2C2_DEBUG_RD_RSTVAL;
    end else if (load_b2s_i2c2_debug_rd == 1'b1) begin
      rff_b2s_i2c2_debug_rd <= (wmask & b2s_i2c2_debug_rd) | (wmask_inv & rff_b2s_i2c2_debug_rd);

    end else if (vld_in_b2s_i2c2_debug_rd == 1'b1) begin
      rff_b2s_i2c2_debug_rd <= in_b2s_i2c2_debug_rd;
    end
  end
  assign out_b2s_i2c2_debug_rd = rff_b2s_i2c2_debug_rd;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_S_GEN_WIDTH - 1 : 0] rff_b2s_i2c2_debug_s_gen;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_S_GEN_WIDTH - 1 : 0] b2s_i2c2_debug_s_gen;
  logic load_b2s_i2c2_debug_s_gen;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c2_debug_s_gen <= STATION_SLOW_IO_B2S_I2C2_DEBUG_S_GEN_RSTVAL;
    end else if (load_b2s_i2c2_debug_s_gen == 1'b1) begin
      rff_b2s_i2c2_debug_s_gen <= (wmask & b2s_i2c2_debug_s_gen) | (wmask_inv & rff_b2s_i2c2_debug_s_gen);

    end else if (vld_in_b2s_i2c2_debug_s_gen == 1'b1) begin
      rff_b2s_i2c2_debug_s_gen <= in_b2s_i2c2_debug_s_gen;
    end
  end
  assign out_b2s_i2c2_debug_s_gen = rff_b2s_i2c2_debug_s_gen;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_SLAVE_ACT_WIDTH - 1 : 0] rff_b2s_i2c2_debug_slave_act;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_SLAVE_ACT_WIDTH - 1 : 0] b2s_i2c2_debug_slave_act;
  logic load_b2s_i2c2_debug_slave_act;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c2_debug_slave_act <= STATION_SLOW_IO_B2S_I2C2_DEBUG_SLAVE_ACT_RSTVAL;
    end else if (load_b2s_i2c2_debug_slave_act == 1'b1) begin
      rff_b2s_i2c2_debug_slave_act <= (wmask & b2s_i2c2_debug_slave_act) | (wmask_inv & rff_b2s_i2c2_debug_slave_act);

    end else if (vld_in_b2s_i2c2_debug_slave_act == 1'b1) begin
      rff_b2s_i2c2_debug_slave_act <= in_b2s_i2c2_debug_slave_act;
    end
  end
  assign out_b2s_i2c2_debug_slave_act = rff_b2s_i2c2_debug_slave_act;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_WR_WIDTH - 1 : 0] rff_b2s_i2c2_debug_wr;
  logic [STATION_SLOW_IO_B2S_I2C2_DEBUG_WR_WIDTH - 1 : 0] b2s_i2c2_debug_wr;
  logic load_b2s_i2c2_debug_wr;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_i2c2_debug_wr <= STATION_SLOW_IO_B2S_I2C2_DEBUG_WR_RSTVAL;
    end else if (load_b2s_i2c2_debug_wr == 1'b1) begin
      rff_b2s_i2c2_debug_wr <= (wmask & b2s_i2c2_debug_wr) | (wmask_inv & rff_b2s_i2c2_debug_wr);

    end else if (vld_in_b2s_i2c2_debug_wr == 1'b1) begin
      rff_b2s_i2c2_debug_wr <= in_b2s_i2c2_debug_wr;
    end
  end
  assign out_b2s_i2c2_debug_wr = rff_b2s_i2c2_debug_wr;
  logic [STATION_SLOW_IO_S2B_I2C2_CLK_EN_WIDTH - 1 : 0] rff_s2b_i2c2_clk_en;
  logic [STATION_SLOW_IO_S2B_I2C2_CLK_EN_WIDTH - 1 : 0] s2b_i2c2_clk_en;
  logic load_s2b_i2c2_clk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_i2c2_clk_en <= STATION_SLOW_IO_S2B_I2C2_CLK_EN_RSTVAL;
    end else if (load_s2b_i2c2_clk_en == 1'b1) begin
      rff_s2b_i2c2_clk_en <= (wmask & s2b_i2c2_clk_en) | (wmask_inv & rff_s2b_i2c2_clk_en);
    end
  end
  assign out_s2b_i2c2_clk_en = rff_s2b_i2c2_clk_en;
  logic [STATION_SLOW_IO_S2B_GPIO_CLK_EN_WIDTH - 1 : 0] rff_s2b_gpio_clk_en;
  logic [STATION_SLOW_IO_S2B_GPIO_CLK_EN_WIDTH - 1 : 0] s2b_gpio_clk_en;
  logic load_s2b_gpio_clk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_gpio_clk_en <= STATION_SLOW_IO_S2B_GPIO_CLK_EN_RSTVAL;
    end else if (load_s2b_gpio_clk_en == 1'b1) begin
      rff_s2b_gpio_clk_en <= (wmask & s2b_gpio_clk_en) | (wmask_inv & rff_s2b_gpio_clk_en);
    end
  end
  assign out_s2b_gpio_clk_en = rff_s2b_gpio_clk_en;
  logic [STATION_SLOW_IO_S2B_RTC_CLK_EN_WIDTH - 1 : 0] rff_s2b_rtc_clk_en;
  logic [STATION_SLOW_IO_S2B_RTC_CLK_EN_WIDTH - 1 : 0] s2b_rtc_clk_en;
  logic load_s2b_rtc_clk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_rtc_clk_en <= STATION_SLOW_IO_S2B_RTC_CLK_EN_RSTVAL;
    end else if (load_s2b_rtc_clk_en == 1'b1) begin
      rff_s2b_rtc_clk_en <= (wmask & s2b_rtc_clk_en) | (wmask_inv & rff_s2b_rtc_clk_en);
    end
  end
  assign out_s2b_rtc_clk_en = rff_s2b_rtc_clk_en;
  logic [STATION_SLOW_IO_B2S_RTC_EN_WIDTH - 1 : 0] rff_b2s_rtc_en;
  logic [STATION_SLOW_IO_B2S_RTC_EN_WIDTH - 1 : 0] b2s_rtc_en;
  logic load_b2s_rtc_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_b2s_rtc_en <= STATION_SLOW_IO_B2S_RTC_EN_RSTVAL;
    end else if (load_b2s_rtc_en == 1'b1) begin
      rff_b2s_rtc_en <= (wmask & b2s_rtc_en) | (wmask_inv & rff_b2s_rtc_en);

    end else if (vld_in_b2s_rtc_en == 1'b1) begin
      rff_b2s_rtc_en <= in_b2s_rtc_en;
    end
  end
  assign out_b2s_rtc_en = rff_b2s_rtc_en;
  logic [STATION_SLOW_IO_S2B_TIMERS_1_RESETN_WIDTH - 1 : 0] rff_s2b_timers_1_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_1_RESETN_WIDTH - 1 : 0] s2b_timers_1_resetn;
  logic load_s2b_timers_1_resetn;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_timers_1_resetn <= STATION_SLOW_IO_S2B_TIMERS_1_RESETN_RSTVAL;
    end else if (load_s2b_timers_1_resetn == 1'b1) begin
      rff_s2b_timers_1_resetn <= (wmask & s2b_timers_1_resetn) | (wmask_inv & rff_s2b_timers_1_resetn);
    end
  end
  assign out_s2b_timers_1_resetn = rff_s2b_timers_1_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_2_RESETN_WIDTH - 1 : 0] rff_s2b_timers_2_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_2_RESETN_WIDTH - 1 : 0] s2b_timers_2_resetn;
  logic load_s2b_timers_2_resetn;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_timers_2_resetn <= STATION_SLOW_IO_S2B_TIMERS_2_RESETN_RSTVAL;
    end else if (load_s2b_timers_2_resetn == 1'b1) begin
      rff_s2b_timers_2_resetn <= (wmask & s2b_timers_2_resetn) | (wmask_inv & rff_s2b_timers_2_resetn);
    end
  end
  assign out_s2b_timers_2_resetn = rff_s2b_timers_2_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_3_RESETN_WIDTH - 1 : 0] rff_s2b_timers_3_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_3_RESETN_WIDTH - 1 : 0] s2b_timers_3_resetn;
  logic load_s2b_timers_3_resetn;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_timers_3_resetn <= STATION_SLOW_IO_S2B_TIMERS_3_RESETN_RSTVAL;
    end else if (load_s2b_timers_3_resetn == 1'b1) begin
      rff_s2b_timers_3_resetn <= (wmask & s2b_timers_3_resetn) | (wmask_inv & rff_s2b_timers_3_resetn);
    end
  end
  assign out_s2b_timers_3_resetn = rff_s2b_timers_3_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_4_RESETN_WIDTH - 1 : 0] rff_s2b_timers_4_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_4_RESETN_WIDTH - 1 : 0] s2b_timers_4_resetn;
  logic load_s2b_timers_4_resetn;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_timers_4_resetn <= STATION_SLOW_IO_S2B_TIMERS_4_RESETN_RSTVAL;
    end else if (load_s2b_timers_4_resetn == 1'b1) begin
      rff_s2b_timers_4_resetn <= (wmask & s2b_timers_4_resetn) | (wmask_inv & rff_s2b_timers_4_resetn);
    end
  end
  assign out_s2b_timers_4_resetn = rff_s2b_timers_4_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_5_RESETN_WIDTH - 1 : 0] rff_s2b_timers_5_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_5_RESETN_WIDTH - 1 : 0] s2b_timers_5_resetn;
  logic load_s2b_timers_5_resetn;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_timers_5_resetn <= STATION_SLOW_IO_S2B_TIMERS_5_RESETN_RSTVAL;
    end else if (load_s2b_timers_5_resetn == 1'b1) begin
      rff_s2b_timers_5_resetn <= (wmask & s2b_timers_5_resetn) | (wmask_inv & rff_s2b_timers_5_resetn);
    end
  end
  assign out_s2b_timers_5_resetn = rff_s2b_timers_5_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_6_RESETN_WIDTH - 1 : 0] rff_s2b_timers_6_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_6_RESETN_WIDTH - 1 : 0] s2b_timers_6_resetn;
  logic load_s2b_timers_6_resetn;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_timers_6_resetn <= STATION_SLOW_IO_S2B_TIMERS_6_RESETN_RSTVAL;
    end else if (load_s2b_timers_6_resetn == 1'b1) begin
      rff_s2b_timers_6_resetn <= (wmask & s2b_timers_6_resetn) | (wmask_inv & rff_s2b_timers_6_resetn);
    end
  end
  assign out_s2b_timers_6_resetn = rff_s2b_timers_6_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_7_RESETN_WIDTH - 1 : 0] rff_s2b_timers_7_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_7_RESETN_WIDTH - 1 : 0] s2b_timers_7_resetn;
  logic load_s2b_timers_7_resetn;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_timers_7_resetn <= STATION_SLOW_IO_S2B_TIMERS_7_RESETN_RSTVAL;
    end else if (load_s2b_timers_7_resetn == 1'b1) begin
      rff_s2b_timers_7_resetn <= (wmask & s2b_timers_7_resetn) | (wmask_inv & rff_s2b_timers_7_resetn);
    end
  end
  assign out_s2b_timers_7_resetn = rff_s2b_timers_7_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_8_RESETN_WIDTH - 1 : 0] rff_s2b_timers_8_resetn;
  logic [STATION_SLOW_IO_S2B_TIMERS_8_RESETN_WIDTH - 1 : 0] s2b_timers_8_resetn;
  logic load_s2b_timers_8_resetn;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_timers_8_resetn <= STATION_SLOW_IO_S2B_TIMERS_8_RESETN_RSTVAL;
    end else if (load_s2b_timers_8_resetn == 1'b1) begin
      rff_s2b_timers_8_resetn <= (wmask & s2b_timers_8_resetn) | (wmask_inv & rff_s2b_timers_8_resetn);
    end
  end
  assign out_s2b_timers_8_resetn = rff_s2b_timers_8_resetn;
  logic [STATION_SLOW_IO_S2B_WDT_CLK_EN_WIDTH - 1 : 0] rff_s2b_wdt_clk_en;
  logic [STATION_SLOW_IO_S2B_WDT_CLK_EN_WIDTH - 1 : 0] s2b_wdt_clk_en;
  logic load_s2b_wdt_clk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_wdt_clk_en <= STATION_SLOW_IO_S2B_WDT_CLK_EN_RSTVAL;
    end else if (load_s2b_wdt_clk_en == 1'b1) begin
      rff_s2b_wdt_clk_en <= (wmask & s2b_wdt_clk_en) | (wmask_inv & rff_s2b_wdt_clk_en);
    end
  end
  assign out_s2b_wdt_clk_en = rff_s2b_wdt_clk_en;
  logic [STATION_SLOW_IO_S2B_WDT_PAUSE_WIDTH - 1 : 0] rff_s2b_wdt_pause;
  logic [STATION_SLOW_IO_S2B_WDT_PAUSE_WIDTH - 1 : 0] s2b_wdt_pause;
  logic load_s2b_wdt_pause;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_wdt_pause <= STATION_SLOW_IO_S2B_WDT_PAUSE_RSTVAL;
    end else if (load_s2b_wdt_pause == 1'b1) begin
      rff_s2b_wdt_pause <= (wmask & s2b_wdt_pause) | (wmask_inv & rff_s2b_wdt_pause);
    end
  end
  assign out_s2b_wdt_pause = rff_s2b_wdt_pause;
  logic [STATION_SLOW_IO_S2B_WDT_SPEED_UP_WIDTH - 1 : 0] rff_s2b_wdt_speed_up;
  logic [STATION_SLOW_IO_S2B_WDT_SPEED_UP_WIDTH - 1 : 0] s2b_wdt_speed_up;
  logic load_s2b_wdt_speed_up;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_wdt_speed_up <= STATION_SLOW_IO_S2B_WDT_SPEED_UP_RSTVAL;
    end else if (load_s2b_wdt_speed_up == 1'b1) begin
      rff_s2b_wdt_speed_up <= (wmask & s2b_wdt_speed_up) | (wmask_inv & rff_s2b_wdt_speed_up);
    end
  end
  assign out_s2b_wdt_speed_up = rff_s2b_wdt_speed_up;
  logic [STATION_SLOW_IO_S2B_BOOTUP_ENA_WIDTH - 1 : 0] rff_s2b_bootup_ena;
  logic [STATION_SLOW_IO_S2B_BOOTUP_ENA_WIDTH - 1 : 0] s2b_bootup_ena;
  logic load_s2b_bootup_ena;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_bootup_ena <= STATION_SLOW_IO_S2B_BOOTUP_ENA_RSTVAL;
    end else if (load_s2b_bootup_ena == 1'b1) begin
      rff_s2b_bootup_ena <= (wmask & s2b_bootup_ena) | (wmask_inv & rff_s2b_bootup_ena);
    end
  end
  assign out_s2b_bootup_ena = rff_s2b_bootup_ena;
  logic [STATION_SLOW_IO_S2B_BOOTUP_ENA_SW_CTRL_WIDTH - 1 : 0] rff_s2b_bootup_ena_sw_ctrl;
  logic [STATION_SLOW_IO_S2B_BOOTUP_ENA_SW_CTRL_WIDTH - 1 : 0] s2b_bootup_ena_sw_ctrl;
  logic load_s2b_bootup_ena_sw_ctrl;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_bootup_ena_sw_ctrl <= STATION_SLOW_IO_S2B_BOOTUP_ENA_SW_CTRL_RSTVAL;
    end else if (load_s2b_bootup_ena_sw_ctrl == 1'b1) begin
      rff_s2b_bootup_ena_sw_ctrl <= (wmask & s2b_bootup_ena_sw_ctrl) | (wmask_inv & rff_s2b_bootup_ena_sw_ctrl);
    end
  end
  assign out_s2b_bootup_ena_sw_ctrl = rff_s2b_bootup_ena_sw_ctrl;
  logic [STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_WIDTH - 1 : 0] rff_s2b_boot_from_flash_ena;
  logic [STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_WIDTH - 1 : 0] s2b_boot_from_flash_ena;
  logic load_s2b_boot_from_flash_ena;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_boot_from_flash_ena <= STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_RSTVAL;
    end else if (load_s2b_boot_from_flash_ena == 1'b1) begin
      rff_s2b_boot_from_flash_ena <= (wmask & s2b_boot_from_flash_ena) | (wmask_inv & rff_s2b_boot_from_flash_ena);
    end
  end
  assign out_s2b_boot_from_flash_ena = rff_s2b_boot_from_flash_ena;
  logic [STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_SW_CTRL_WIDTH - 1 : 0] rff_s2b_boot_from_flash_ena_sw_ctrl;
  logic [STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_SW_CTRL_WIDTH - 1 : 0] s2b_boot_from_flash_ena_sw_ctrl;
  logic load_s2b_boot_from_flash_ena_sw_ctrl;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2b_boot_from_flash_ena_sw_ctrl <= STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_SW_CTRL_RSTVAL;
    end else if (load_s2b_boot_from_flash_ena_sw_ctrl == 1'b1) begin
      rff_s2b_boot_from_flash_ena_sw_ctrl <= (wmask & s2b_boot_from_flash_ena_sw_ctrl) | (wmask_inv & rff_s2b_boot_from_flash_ena_sw_ctrl);
    end
  end
  assign out_s2b_boot_from_flash_ena_sw_ctrl = rff_s2b_boot_from_flash_ena_sw_ctrl;
  logic [STATION_SLOW_IO_S2ICG_QSPIM_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_qspim_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_QSPIM_PCLK_EN_WIDTH - 1 : 0] s2icg_qspim_pclk_en;
  logic load_s2icg_qspim_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_qspim_pclk_en <= STATION_SLOW_IO_S2ICG_QSPIM_PCLK_EN_RSTVAL;
    end else if (load_s2icg_qspim_pclk_en == 1'b1) begin
      rff_s2icg_qspim_pclk_en <= (wmask & s2icg_qspim_pclk_en) | (wmask_inv & rff_s2icg_qspim_pclk_en);
    end
  end
  assign out_s2icg_qspim_pclk_en = rff_s2icg_qspim_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_SSPIM0_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_sspim0_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_SSPIM0_PCLK_EN_WIDTH - 1 : 0] s2icg_sspim0_pclk_en;
  logic load_s2icg_sspim0_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_sspim0_pclk_en <= STATION_SLOW_IO_S2ICG_SSPIM0_PCLK_EN_RSTVAL;
    end else if (load_s2icg_sspim0_pclk_en == 1'b1) begin
      rff_s2icg_sspim0_pclk_en <= (wmask & s2icg_sspim0_pclk_en) | (wmask_inv & rff_s2icg_sspim0_pclk_en);
    end
  end
  assign out_s2icg_sspim0_pclk_en = rff_s2icg_sspim0_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_SSPIM1_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_sspim1_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_SSPIM1_PCLK_EN_WIDTH - 1 : 0] s2icg_sspim1_pclk_en;
  logic load_s2icg_sspim1_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_sspim1_pclk_en <= STATION_SLOW_IO_S2ICG_SSPIM1_PCLK_EN_RSTVAL;
    end else if (load_s2icg_sspim1_pclk_en == 1'b1) begin
      rff_s2icg_sspim1_pclk_en <= (wmask & s2icg_sspim1_pclk_en) | (wmask_inv & rff_s2icg_sspim1_pclk_en);
    end
  end
  assign out_s2icg_sspim1_pclk_en = rff_s2icg_sspim1_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_SSPIM2_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_sspim2_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_SSPIM2_PCLK_EN_WIDTH - 1 : 0] s2icg_sspim2_pclk_en;
  logic load_s2icg_sspim2_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_sspim2_pclk_en <= STATION_SLOW_IO_S2ICG_SSPIM2_PCLK_EN_RSTVAL;
    end else if (load_s2icg_sspim2_pclk_en == 1'b1) begin
      rff_s2icg_sspim2_pclk_en <= (wmask & s2icg_sspim2_pclk_en) | (wmask_inv & rff_s2icg_sspim2_pclk_en);
    end
  end
  assign out_s2icg_sspim2_pclk_en = rff_s2icg_sspim2_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_SPIS_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_spis_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_SPIS_PCLK_EN_WIDTH - 1 : 0] s2icg_spis_pclk_en;
  logic load_s2icg_spis_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_spis_pclk_en <= STATION_SLOW_IO_S2ICG_SPIS_PCLK_EN_RSTVAL;
    end else if (load_s2icg_spis_pclk_en == 1'b1) begin
      rff_s2icg_spis_pclk_en <= (wmask & s2icg_spis_pclk_en) | (wmask_inv & rff_s2icg_spis_pclk_en);
    end
  end
  assign out_s2icg_spis_pclk_en = rff_s2icg_spis_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_UART0_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_uart0_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_UART0_PCLK_EN_WIDTH - 1 : 0] s2icg_uart0_pclk_en;
  logic load_s2icg_uart0_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_uart0_pclk_en <= STATION_SLOW_IO_S2ICG_UART0_PCLK_EN_RSTVAL;
    end else if (load_s2icg_uart0_pclk_en == 1'b1) begin
      rff_s2icg_uart0_pclk_en <= (wmask & s2icg_uart0_pclk_en) | (wmask_inv & rff_s2icg_uart0_pclk_en);
    end
  end
  assign out_s2icg_uart0_pclk_en = rff_s2icg_uart0_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_UART1_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_uart1_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_UART1_PCLK_EN_WIDTH - 1 : 0] s2icg_uart1_pclk_en;
  logic load_s2icg_uart1_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_uart1_pclk_en <= STATION_SLOW_IO_S2ICG_UART1_PCLK_EN_RSTVAL;
    end else if (load_s2icg_uart1_pclk_en == 1'b1) begin
      rff_s2icg_uart1_pclk_en <= (wmask & s2icg_uart1_pclk_en) | (wmask_inv & rff_s2icg_uart1_pclk_en);
    end
  end
  assign out_s2icg_uart1_pclk_en = rff_s2icg_uart1_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_UART2_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_uart2_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_UART2_PCLK_EN_WIDTH - 1 : 0] s2icg_uart2_pclk_en;
  logic load_s2icg_uart2_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_uart2_pclk_en <= STATION_SLOW_IO_S2ICG_UART2_PCLK_EN_RSTVAL;
    end else if (load_s2icg_uart2_pclk_en == 1'b1) begin
      rff_s2icg_uart2_pclk_en <= (wmask & s2icg_uart2_pclk_en) | (wmask_inv & rff_s2icg_uart2_pclk_en);
    end
  end
  assign out_s2icg_uart2_pclk_en = rff_s2icg_uart2_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_UART3_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_uart3_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_UART3_PCLK_EN_WIDTH - 1 : 0] s2icg_uart3_pclk_en;
  logic load_s2icg_uart3_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_uart3_pclk_en <= STATION_SLOW_IO_S2ICG_UART3_PCLK_EN_RSTVAL;
    end else if (load_s2icg_uart3_pclk_en == 1'b1) begin
      rff_s2icg_uart3_pclk_en <= (wmask & s2icg_uart3_pclk_en) | (wmask_inv & rff_s2icg_uart3_pclk_en);
    end
  end
  assign out_s2icg_uart3_pclk_en = rff_s2icg_uart3_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SM_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_i2sm_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SM_PCLK_EN_WIDTH - 1 : 0] s2icg_i2sm_pclk_en;
  logic load_s2icg_i2sm_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_i2sm_pclk_en <= STATION_SLOW_IO_S2ICG_I2SM_PCLK_EN_RSTVAL;
    end else if (load_s2icg_i2sm_pclk_en == 1'b1) begin
      rff_s2icg_i2sm_pclk_en <= (wmask & s2icg_i2sm_pclk_en) | (wmask_inv & rff_s2icg_i2sm_pclk_en);
    end
  end
  assign out_s2icg_i2sm_pclk_en = rff_s2icg_i2sm_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SS0_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_i2ss0_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SS0_PCLK_EN_WIDTH - 1 : 0] s2icg_i2ss0_pclk_en;
  logic load_s2icg_i2ss0_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_i2ss0_pclk_en <= STATION_SLOW_IO_S2ICG_I2SS0_PCLK_EN_RSTVAL;
    end else if (load_s2icg_i2ss0_pclk_en == 1'b1) begin
      rff_s2icg_i2ss0_pclk_en <= (wmask & s2icg_i2ss0_pclk_en) | (wmask_inv & rff_s2icg_i2ss0_pclk_en);
    end
  end
  assign out_s2icg_i2ss0_pclk_en = rff_s2icg_i2ss0_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SS1_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_i2ss1_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SS1_PCLK_EN_WIDTH - 1 : 0] s2icg_i2ss1_pclk_en;
  logic load_s2icg_i2ss1_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_i2ss1_pclk_en <= STATION_SLOW_IO_S2ICG_I2SS1_PCLK_EN_RSTVAL;
    end else if (load_s2icg_i2ss1_pclk_en == 1'b1) begin
      rff_s2icg_i2ss1_pclk_en <= (wmask & s2icg_i2ss1_pclk_en) | (wmask_inv & rff_s2icg_i2ss1_pclk_en);
    end
  end
  assign out_s2icg_i2ss1_pclk_en = rff_s2icg_i2ss1_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SS2_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_i2ss2_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SS2_PCLK_EN_WIDTH - 1 : 0] s2icg_i2ss2_pclk_en;
  logic load_s2icg_i2ss2_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_i2ss2_pclk_en <= STATION_SLOW_IO_S2ICG_I2SS2_PCLK_EN_RSTVAL;
    end else if (load_s2icg_i2ss2_pclk_en == 1'b1) begin
      rff_s2icg_i2ss2_pclk_en <= (wmask & s2icg_i2ss2_pclk_en) | (wmask_inv & rff_s2icg_i2ss2_pclk_en);
    end
  end
  assign out_s2icg_i2ss2_pclk_en = rff_s2icg_i2ss2_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SS3_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_i2ss3_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SS3_PCLK_EN_WIDTH - 1 : 0] s2icg_i2ss3_pclk_en;
  logic load_s2icg_i2ss3_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_i2ss3_pclk_en <= STATION_SLOW_IO_S2ICG_I2SS3_PCLK_EN_RSTVAL;
    end else if (load_s2icg_i2ss3_pclk_en == 1'b1) begin
      rff_s2icg_i2ss3_pclk_en <= (wmask & s2icg_i2ss3_pclk_en) | (wmask_inv & rff_s2icg_i2ss3_pclk_en);
    end
  end
  assign out_s2icg_i2ss3_pclk_en = rff_s2icg_i2ss3_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SS4_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_i2ss4_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SS4_PCLK_EN_WIDTH - 1 : 0] s2icg_i2ss4_pclk_en;
  logic load_s2icg_i2ss4_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_i2ss4_pclk_en <= STATION_SLOW_IO_S2ICG_I2SS4_PCLK_EN_RSTVAL;
    end else if (load_s2icg_i2ss4_pclk_en == 1'b1) begin
      rff_s2icg_i2ss4_pclk_en <= (wmask & s2icg_i2ss4_pclk_en) | (wmask_inv & rff_s2icg_i2ss4_pclk_en);
    end
  end
  assign out_s2icg_i2ss4_pclk_en = rff_s2icg_i2ss4_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SS5_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_i2ss5_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2SS5_PCLK_EN_WIDTH - 1 : 0] s2icg_i2ss5_pclk_en;
  logic load_s2icg_i2ss5_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_i2ss5_pclk_en <= STATION_SLOW_IO_S2ICG_I2SS5_PCLK_EN_RSTVAL;
    end else if (load_s2icg_i2ss5_pclk_en == 1'b1) begin
      rff_s2icg_i2ss5_pclk_en <= (wmask & s2icg_i2ss5_pclk_en) | (wmask_inv & rff_s2icg_i2ss5_pclk_en);
    end
  end
  assign out_s2icg_i2ss5_pclk_en = rff_s2icg_i2ss5_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2C0_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_i2c0_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2C0_PCLK_EN_WIDTH - 1 : 0] s2icg_i2c0_pclk_en;
  logic load_s2icg_i2c0_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_i2c0_pclk_en <= STATION_SLOW_IO_S2ICG_I2C0_PCLK_EN_RSTVAL;
    end else if (load_s2icg_i2c0_pclk_en == 1'b1) begin
      rff_s2icg_i2c0_pclk_en <= (wmask & s2icg_i2c0_pclk_en) | (wmask_inv & rff_s2icg_i2c0_pclk_en);
    end
  end
  assign out_s2icg_i2c0_pclk_en = rff_s2icg_i2c0_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2C1_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_i2c1_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2C1_PCLK_EN_WIDTH - 1 : 0] s2icg_i2c1_pclk_en;
  logic load_s2icg_i2c1_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_i2c1_pclk_en <= STATION_SLOW_IO_S2ICG_I2C1_PCLK_EN_RSTVAL;
    end else if (load_s2icg_i2c1_pclk_en == 1'b1) begin
      rff_s2icg_i2c1_pclk_en <= (wmask & s2icg_i2c1_pclk_en) | (wmask_inv & rff_s2icg_i2c1_pclk_en);
    end
  end
  assign out_s2icg_i2c1_pclk_en = rff_s2icg_i2c1_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2C2_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_i2c2_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_I2C2_PCLK_EN_WIDTH - 1 : 0] s2icg_i2c2_pclk_en;
  logic load_s2icg_i2c2_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_i2c2_pclk_en <= STATION_SLOW_IO_S2ICG_I2C2_PCLK_EN_RSTVAL;
    end else if (load_s2icg_i2c2_pclk_en == 1'b1) begin
      rff_s2icg_i2c2_pclk_en <= (wmask & s2icg_i2c2_pclk_en) | (wmask_inv & rff_s2icg_i2c2_pclk_en);
    end
  end
  assign out_s2icg_i2c2_pclk_en = rff_s2icg_i2c2_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_GPIO_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_gpio_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_GPIO_PCLK_EN_WIDTH - 1 : 0] s2icg_gpio_pclk_en;
  logic load_s2icg_gpio_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_gpio_pclk_en <= STATION_SLOW_IO_S2ICG_GPIO_PCLK_EN_RSTVAL;
    end else if (load_s2icg_gpio_pclk_en == 1'b1) begin
      rff_s2icg_gpio_pclk_en <= (wmask & s2icg_gpio_pclk_en) | (wmask_inv & rff_s2icg_gpio_pclk_en);
    end
  end
  assign out_s2icg_gpio_pclk_en = rff_s2icg_gpio_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_RTC_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_rtc_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_RTC_PCLK_EN_WIDTH - 1 : 0] s2icg_rtc_pclk_en;
  logic load_s2icg_rtc_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_rtc_pclk_en <= STATION_SLOW_IO_S2ICG_RTC_PCLK_EN_RSTVAL;
    end else if (load_s2icg_rtc_pclk_en == 1'b1) begin
      rff_s2icg_rtc_pclk_en <= (wmask & s2icg_rtc_pclk_en) | (wmask_inv & rff_s2icg_rtc_pclk_en);
    end
  end
  assign out_s2icg_rtc_pclk_en = rff_s2icg_rtc_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_TIMERS_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_timers_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_TIMERS_PCLK_EN_WIDTH - 1 : 0] s2icg_timers_pclk_en;
  logic load_s2icg_timers_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_timers_pclk_en <= STATION_SLOW_IO_S2ICG_TIMERS_PCLK_EN_RSTVAL;
    end else if (load_s2icg_timers_pclk_en == 1'b1) begin
      rff_s2icg_timers_pclk_en <= (wmask & s2icg_timers_pclk_en) | (wmask_inv & rff_s2icg_timers_pclk_en);
    end
  end
  assign out_s2icg_timers_pclk_en = rff_s2icg_timers_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_WDT_PCLK_EN_WIDTH - 1 : 0] rff_s2icg_wdt_pclk_en;
  logic [STATION_SLOW_IO_S2ICG_WDT_PCLK_EN_WIDTH - 1 : 0] s2icg_wdt_pclk_en;
  logic load_s2icg_wdt_pclk_en;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_s2icg_wdt_pclk_en <= STATION_SLOW_IO_S2ICG_WDT_PCLK_EN_RSTVAL;
    end else if (load_s2icg_wdt_pclk_en == 1'b1) begin
      rff_s2icg_wdt_pclk_en <= (wmask & s2icg_wdt_pclk_en) | (wmask_inv & rff_s2icg_wdt_pclk_en);
    end
  end
  assign out_s2icg_wdt_pclk_en = rff_s2icg_wdt_pclk_en;
  logic [STATION_SLOW_IO_DEBUG_INFO_ENABLE_WIDTH - 1 : 0] rff_debug_info_enable;
  logic [STATION_SLOW_IO_DEBUG_INFO_ENABLE_WIDTH - 1 : 0] debug_info_enable;
  logic load_debug_info_enable;

  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_debug_info_enable <= STATION_SLOW_IO_DEBUG_INFO_ENABLE_RSTVAL;
    end else if (load_debug_info_enable == 1'b1) begin
      rff_debug_info_enable <= (wmask & debug_info_enable) | (wmask_inv & rff_debug_info_enable);
    end
  end
  assign out_debug_info_enable = rff_debug_info_enable;

  logic                         rdec;
  logic                         bdec;
  axi4_resp_t                   rresp;
  axi4_resp_t                   bresp;
  logic [STATION_SLOW_IO_DATA_WIDTH - 1 : 0] data;

  always_comb begin
    rdec  = 1'b0;
    bdec  = 1'b0;
    rresp = AXI_RESP_DECERR;
    bresp = AXI_RESP_DECERR;
    data  = {STATION_SLOW_IO_DATA_WIDTH{1'b0}};
    s2b_i2sm_clkdiv_half_div_less_1 = rff_s2b_i2sm_clkdiv_half_div_less_1;
    load_s2b_i2sm_clkdiv_half_div_less_1 = 1'b0;
    s2b_i2ss0_clkdiv_half_div_less_1 = rff_s2b_i2ss0_clkdiv_half_div_less_1;
    load_s2b_i2ss0_clkdiv_half_div_less_1 = 1'b0;
    s2b_i2ss1_clkdiv_half_div_less_1 = rff_s2b_i2ss1_clkdiv_half_div_less_1;
    load_s2b_i2ss1_clkdiv_half_div_less_1 = 1'b0;
    s2b_i2ss2_clkdiv_half_div_less_1 = rff_s2b_i2ss2_clkdiv_half_div_less_1;
    load_s2b_i2ss2_clkdiv_half_div_less_1 = 1'b0;
    s2b_i2ss3_clkdiv_half_div_less_1 = rff_s2b_i2ss3_clkdiv_half_div_less_1;
    load_s2b_i2ss3_clkdiv_half_div_less_1 = 1'b0;
    s2b_i2ss4_clkdiv_half_div_less_1 = rff_s2b_i2ss4_clkdiv_half_div_less_1;
    load_s2b_i2ss4_clkdiv_half_div_less_1 = 1'b0;
    s2b_i2ss5_clkdiv_half_div_less_1 = rff_s2b_i2ss5_clkdiv_half_div_less_1;
    load_s2b_i2ss5_clkdiv_half_div_less_1 = 1'b0;
    b2s_timer_en = rff_b2s_timer_en;
    load_b2s_timer_en = 1'b0;
    b2s_i2c0_debug_mst_cstate = rff_b2s_i2c0_debug_mst_cstate;
    load_b2s_i2c0_debug_mst_cstate = 1'b0;
    b2s_i2c1_debug_mst_cstate = rff_b2s_i2c1_debug_mst_cstate;
    load_b2s_i2c1_debug_mst_cstate = 1'b0;
    b2s_i2c2_debug_mst_cstate = rff_b2s_i2c2_debug_mst_cstate;
    load_b2s_i2c2_debug_mst_cstate = 1'b0;
    b2s_i2c0_debug_slv_cstate = rff_b2s_i2c0_debug_slv_cstate;
    load_b2s_i2c0_debug_slv_cstate = 1'b0;
    b2s_i2c1_debug_slv_cstate = rff_b2s_i2c1_debug_slv_cstate;
    load_b2s_i2c1_debug_slv_cstate = 1'b0;
    b2s_i2c2_debug_slv_cstate = rff_b2s_i2c2_debug_slv_cstate;
    load_b2s_i2c2_debug_slv_cstate = 1'b0;
    SSP_SHARED_sel_0 = rff_SSP_SHARED_sel_0;
    load_SSP_SHARED_sel_0 = 1'b0;
    SSP_SHARED_sel_1 = rff_SSP_SHARED_sel_1;
    load_SSP_SHARED_sel_1 = 1'b0;
    SSP_SHARED_sel_2 = rff_SSP_SHARED_sel_2;
    load_SSP_SHARED_sel_2 = 1'b0;
    SSP_SHARED_sel_3 = rff_SSP_SHARED_sel_3;
    load_SSP_SHARED_sel_3 = 1'b0;
    SSP_SHARED_sel_4 = rff_SSP_SHARED_sel_4;
    load_SSP_SHARED_sel_4 = 1'b0;
    SSP_SHARED_sel_5 = rff_SSP_SHARED_sel_5;
    load_SSP_SHARED_sel_5 = 1'b0;
    SSP_SHARED_sel_6 = rff_SSP_SHARED_sel_6;
    load_SSP_SHARED_sel_6 = 1'b0;
    SSP_SHARED_sel_7 = rff_SSP_SHARED_sel_7;
    load_SSP_SHARED_sel_7 = 1'b0;
    SSP_SHARED_sel_8 = rff_SSP_SHARED_sel_8;
    load_SSP_SHARED_sel_8 = 1'b0;
    SSP_SHARED_sel_9 = rff_SSP_SHARED_sel_9;
    load_SSP_SHARED_sel_9 = 1'b0;
    SSP_SHARED_sel_10 = rff_SSP_SHARED_sel_10;
    load_SSP_SHARED_sel_10 = 1'b0;
    SSP_SHARED_sel_11 = rff_SSP_SHARED_sel_11;
    load_SSP_SHARED_sel_11 = 1'b0;
    SSP_SHARED_sel_12 = rff_SSP_SHARED_sel_12;
    load_SSP_SHARED_sel_12 = 1'b0;
    SSP_SHARED_sel_13 = rff_SSP_SHARED_sel_13;
    load_SSP_SHARED_sel_13 = 1'b0;
    SSP_SHARED_sel_14 = rff_SSP_SHARED_sel_14;
    load_SSP_SHARED_sel_14 = 1'b0;
    SSP_SHARED_sel_15 = rff_SSP_SHARED_sel_15;
    load_SSP_SHARED_sel_15 = 1'b0;
    SSP_SHARED_sel_16 = rff_SSP_SHARED_sel_16;
    load_SSP_SHARED_sel_16 = 1'b0;
    SSP_SHARED_sel_17 = rff_SSP_SHARED_sel_17;
    load_SSP_SHARED_sel_17 = 1'b0;
    SSP_SHARED_sel_18 = rff_SSP_SHARED_sel_18;
    load_SSP_SHARED_sel_18 = 1'b0;
    SSP_SHARED_sel_19 = rff_SSP_SHARED_sel_19;
    load_SSP_SHARED_sel_19 = 1'b0;
    SSP_SHARED_sel_20 = rff_SSP_SHARED_sel_20;
    load_SSP_SHARED_sel_20 = 1'b0;
    SSP_SHARED_sel_21 = rff_SSP_SHARED_sel_21;
    load_SSP_SHARED_sel_21 = 1'b0;
    SSP_SHARED_sel_22 = rff_SSP_SHARED_sel_22;
    load_SSP_SHARED_sel_22 = 1'b0;
    SSP_SHARED_sel_23 = rff_SSP_SHARED_sel_23;
    load_SSP_SHARED_sel_23 = 1'b0;
    SSP_SHARED_sel_24 = rff_SSP_SHARED_sel_24;
    load_SSP_SHARED_sel_24 = 1'b0;
    SSP_SHARED_sel_25 = rff_SSP_SHARED_sel_25;
    load_SSP_SHARED_sel_25 = 1'b0;
    SSP_SHARED_sel_26 = rff_SSP_SHARED_sel_26;
    load_SSP_SHARED_sel_26 = 1'b0;
    SSP_SHARED_sel_27 = rff_SSP_SHARED_sel_27;
    load_SSP_SHARED_sel_27 = 1'b0;
    SSP_SHARED_sel_28 = rff_SSP_SHARED_sel_28;
    load_SSP_SHARED_sel_28 = 1'b0;
    SSP_SHARED_sel_29 = rff_SSP_SHARED_sel_29;
    load_SSP_SHARED_sel_29 = 1'b0;
    SSP_SHARED_sel_30 = rff_SSP_SHARED_sel_30;
    load_SSP_SHARED_sel_30 = 1'b0;
    SSP_SHARED_sel_31 = rff_SSP_SHARED_sel_31;
    load_SSP_SHARED_sel_31 = 1'b0;
    SSP_SHARED_sel_32 = rff_SSP_SHARED_sel_32;
    load_SSP_SHARED_sel_32 = 1'b0;
    SSP_SHARED_sel_33 = rff_SSP_SHARED_sel_33;
    load_SSP_SHARED_sel_33 = 1'b0;
    SSP_SHARED_sel_34 = rff_SSP_SHARED_sel_34;
    load_SSP_SHARED_sel_34 = 1'b0;
    SSP_SHARED_sel_35 = rff_SSP_SHARED_sel_35;
    load_SSP_SHARED_sel_35 = 1'b0;
    SSP_SHARED_sel_36 = rff_SSP_SHARED_sel_36;
    load_SSP_SHARED_sel_36 = 1'b0;
    SSP_SHARED_sel_37 = rff_SSP_SHARED_sel_37;
    load_SSP_SHARED_sel_37 = 1'b0;
    SSP_SHARED_sel_38 = rff_SSP_SHARED_sel_38;
    load_SSP_SHARED_sel_38 = 1'b0;
    SSP_SHARED_sel_39 = rff_SSP_SHARED_sel_39;
    load_SSP_SHARED_sel_39 = 1'b0;
    SSP_SHARED_sel_40 = rff_SSP_SHARED_sel_40;
    load_SSP_SHARED_sel_40 = 1'b0;
    SSP_SHARED_sel_41 = rff_SSP_SHARED_sel_41;
    load_SSP_SHARED_sel_41 = 1'b0;
    SSP_SHARED_sel_42 = rff_SSP_SHARED_sel_42;
    load_SSP_SHARED_sel_42 = 1'b0;
    SSP_SHARED_sel_43 = rff_SSP_SHARED_sel_43;
    load_SSP_SHARED_sel_43 = 1'b0;
    SSP_SHARED_sel_44 = rff_SSP_SHARED_sel_44;
    load_SSP_SHARED_sel_44 = 1'b0;
    SSP_SHARED_sel_45 = rff_SSP_SHARED_sel_45;
    load_SSP_SHARED_sel_45 = 1'b0;
    SSP_SHARED_sel_46 = rff_SSP_SHARED_sel_46;
    load_SSP_SHARED_sel_46 = 1'b0;
    SSP_SHARED_sel_47 = rff_SSP_SHARED_sel_47;
    load_SSP_SHARED_sel_47 = 1'b0;
    s2b_i2sm_clkdiv_divclk_sel = rff_s2b_i2sm_clkdiv_divclk_sel;
    load_s2b_i2sm_clkdiv_divclk_sel = 1'b0;
    s2b_i2ss0_clkdiv_divclk_sel = rff_s2b_i2ss0_clkdiv_divclk_sel;
    load_s2b_i2ss0_clkdiv_divclk_sel = 1'b0;
    s2b_i2ss1_clkdiv_divclk_sel = rff_s2b_i2ss1_clkdiv_divclk_sel;
    load_s2b_i2ss1_clkdiv_divclk_sel = 1'b0;
    s2b_i2ss2_clkdiv_divclk_sel = rff_s2b_i2ss2_clkdiv_divclk_sel;
    load_s2b_i2ss2_clkdiv_divclk_sel = 1'b0;
    s2b_i2ss3_clkdiv_divclk_sel = rff_s2b_i2ss3_clkdiv_divclk_sel;
    load_s2b_i2ss3_clkdiv_divclk_sel = 1'b0;
    s2b_i2ss4_clkdiv_divclk_sel = rff_s2b_i2ss4_clkdiv_divclk_sel;
    load_s2b_i2ss4_clkdiv_divclk_sel = 1'b0;
    s2b_i2ss5_clkdiv_divclk_sel = rff_s2b_i2ss5_clkdiv_divclk_sel;
    load_s2b_i2ss5_clkdiv_divclk_sel = 1'b0;
    b2s_qspim_ssi_busy = rff_b2s_qspim_ssi_busy;
    load_b2s_qspim_ssi_busy = 1'b0;
    b2s_qspim_ssi_sleep = rff_b2s_qspim_ssi_sleep;
    load_b2s_qspim_ssi_sleep = 1'b0;
    s2b_qspim_ssi_clk_en = rff_s2b_qspim_ssi_clk_en;
    load_s2b_qspim_ssi_clk_en = 1'b0;
    b2s_sspim0_ssi_sleep = rff_b2s_sspim0_ssi_sleep;
    load_b2s_sspim0_ssi_sleep = 1'b0;
    s2b_sspim0_ssi_clk_en = rff_s2b_sspim0_ssi_clk_en;
    load_s2b_sspim0_ssi_clk_en = 1'b0;
    b2s_sspim1_ssi_sleep = rff_b2s_sspim1_ssi_sleep;
    load_b2s_sspim1_ssi_sleep = 1'b0;
    s2b_sspim1_ssi_clk_en = rff_s2b_sspim1_ssi_clk_en;
    load_s2b_sspim1_ssi_clk_en = 1'b0;
    b2s_sspim2_ssi_sleep = rff_b2s_sspim2_ssi_sleep;
    load_b2s_sspim2_ssi_sleep = 1'b0;
    s2b_sspim2_ssi_clk_en = rff_s2b_sspim2_ssi_clk_en;
    load_s2b_sspim2_ssi_clk_en = 1'b0;
    b2s_spis_ssi_sleep = rff_b2s_spis_ssi_sleep;
    load_b2s_spis_ssi_sleep = 1'b0;
    b2s_i2c0_debug_addr = rff_b2s_i2c0_debug_addr;
    load_b2s_i2c0_debug_addr = 1'b0;
    b2s_i2c0_debug_addr_10bit = rff_b2s_i2c0_debug_addr_10bit;
    load_b2s_i2c0_debug_addr_10bit = 1'b0;
    b2s_i2c0_debug_data = rff_b2s_i2c0_debug_data;
    load_b2s_i2c0_debug_data = 1'b0;
    b2s_i2c0_debug_hs = rff_b2s_i2c0_debug_hs;
    load_b2s_i2c0_debug_hs = 1'b0;
    b2s_i2c0_debug_master_act = rff_b2s_i2c0_debug_master_act;
    load_b2s_i2c0_debug_master_act = 1'b0;
    b2s_i2c0_debug_p_gen = rff_b2s_i2c0_debug_p_gen;
    load_b2s_i2c0_debug_p_gen = 1'b0;
    b2s_i2c0_debug_rd = rff_b2s_i2c0_debug_rd;
    load_b2s_i2c0_debug_rd = 1'b0;
    b2s_i2c0_debug_s_gen = rff_b2s_i2c0_debug_s_gen;
    load_b2s_i2c0_debug_s_gen = 1'b0;
    b2s_i2c0_debug_slave_act = rff_b2s_i2c0_debug_slave_act;
    load_b2s_i2c0_debug_slave_act = 1'b0;
    b2s_i2c0_debug_wr = rff_b2s_i2c0_debug_wr;
    load_b2s_i2c0_debug_wr = 1'b0;
    s2b_i2c0_clk_en = rff_s2b_i2c0_clk_en;
    load_s2b_i2c0_clk_en = 1'b0;
    b2s_i2c1_debug_addr = rff_b2s_i2c1_debug_addr;
    load_b2s_i2c1_debug_addr = 1'b0;
    b2s_i2c1_debug_addr_10bit = rff_b2s_i2c1_debug_addr_10bit;
    load_b2s_i2c1_debug_addr_10bit = 1'b0;
    b2s_i2c1_debug_data = rff_b2s_i2c1_debug_data;
    load_b2s_i2c1_debug_data = 1'b0;
    b2s_i2c1_debug_hs = rff_b2s_i2c1_debug_hs;
    load_b2s_i2c1_debug_hs = 1'b0;
    b2s_i2c1_debug_master_act = rff_b2s_i2c1_debug_master_act;
    load_b2s_i2c1_debug_master_act = 1'b0;
    b2s_i2c1_debug_p_gen = rff_b2s_i2c1_debug_p_gen;
    load_b2s_i2c1_debug_p_gen = 1'b0;
    b2s_i2c1_debug_rd = rff_b2s_i2c1_debug_rd;
    load_b2s_i2c1_debug_rd = 1'b0;
    b2s_i2c1_debug_s_gen = rff_b2s_i2c1_debug_s_gen;
    load_b2s_i2c1_debug_s_gen = 1'b0;
    b2s_i2c1_debug_slave_act = rff_b2s_i2c1_debug_slave_act;
    load_b2s_i2c1_debug_slave_act = 1'b0;
    b2s_i2c1_debug_wr = rff_b2s_i2c1_debug_wr;
    load_b2s_i2c1_debug_wr = 1'b0;
    s2b_i2c1_clk_en = rff_s2b_i2c1_clk_en;
    load_s2b_i2c1_clk_en = 1'b0;
    b2s_i2c2_debug_addr = rff_b2s_i2c2_debug_addr;
    load_b2s_i2c2_debug_addr = 1'b0;
    b2s_i2c2_debug_addr_10bit = rff_b2s_i2c2_debug_addr_10bit;
    load_b2s_i2c2_debug_addr_10bit = 1'b0;
    b2s_i2c2_debug_data = rff_b2s_i2c2_debug_data;
    load_b2s_i2c2_debug_data = 1'b0;
    b2s_i2c2_debug_hs = rff_b2s_i2c2_debug_hs;
    load_b2s_i2c2_debug_hs = 1'b0;
    b2s_i2c2_debug_master_act = rff_b2s_i2c2_debug_master_act;
    load_b2s_i2c2_debug_master_act = 1'b0;
    b2s_i2c2_debug_p_gen = rff_b2s_i2c2_debug_p_gen;
    load_b2s_i2c2_debug_p_gen = 1'b0;
    b2s_i2c2_debug_rd = rff_b2s_i2c2_debug_rd;
    load_b2s_i2c2_debug_rd = 1'b0;
    b2s_i2c2_debug_s_gen = rff_b2s_i2c2_debug_s_gen;
    load_b2s_i2c2_debug_s_gen = 1'b0;
    b2s_i2c2_debug_slave_act = rff_b2s_i2c2_debug_slave_act;
    load_b2s_i2c2_debug_slave_act = 1'b0;
    b2s_i2c2_debug_wr = rff_b2s_i2c2_debug_wr;
    load_b2s_i2c2_debug_wr = 1'b0;
    s2b_i2c2_clk_en = rff_s2b_i2c2_clk_en;
    load_s2b_i2c2_clk_en = 1'b0;
    s2b_gpio_clk_en = rff_s2b_gpio_clk_en;
    load_s2b_gpio_clk_en = 1'b0;
    s2b_rtc_clk_en = rff_s2b_rtc_clk_en;
    load_s2b_rtc_clk_en = 1'b0;
    b2s_rtc_en = rff_b2s_rtc_en;
    load_b2s_rtc_en = 1'b0;
    s2b_timers_1_resetn = rff_s2b_timers_1_resetn;
    load_s2b_timers_1_resetn = 1'b0;
    s2b_timers_2_resetn = rff_s2b_timers_2_resetn;
    load_s2b_timers_2_resetn = 1'b0;
    s2b_timers_3_resetn = rff_s2b_timers_3_resetn;
    load_s2b_timers_3_resetn = 1'b0;
    s2b_timers_4_resetn = rff_s2b_timers_4_resetn;
    load_s2b_timers_4_resetn = 1'b0;
    s2b_timers_5_resetn = rff_s2b_timers_5_resetn;
    load_s2b_timers_5_resetn = 1'b0;
    s2b_timers_6_resetn = rff_s2b_timers_6_resetn;
    load_s2b_timers_6_resetn = 1'b0;
    s2b_timers_7_resetn = rff_s2b_timers_7_resetn;
    load_s2b_timers_7_resetn = 1'b0;
    s2b_timers_8_resetn = rff_s2b_timers_8_resetn;
    load_s2b_timers_8_resetn = 1'b0;
    s2b_wdt_clk_en = rff_s2b_wdt_clk_en;
    load_s2b_wdt_clk_en = 1'b0;
    s2b_wdt_pause = rff_s2b_wdt_pause;
    load_s2b_wdt_pause = 1'b0;
    s2b_wdt_speed_up = rff_s2b_wdt_speed_up;
    load_s2b_wdt_speed_up = 1'b0;
    s2b_bootup_ena = rff_s2b_bootup_ena;
    load_s2b_bootup_ena = 1'b0;
    s2b_bootup_ena_sw_ctrl = rff_s2b_bootup_ena_sw_ctrl;
    load_s2b_bootup_ena_sw_ctrl = 1'b0;
    s2b_boot_from_flash_ena = rff_s2b_boot_from_flash_ena;
    load_s2b_boot_from_flash_ena = 1'b0;
    s2b_boot_from_flash_ena_sw_ctrl = rff_s2b_boot_from_flash_ena_sw_ctrl;
    load_s2b_boot_from_flash_ena_sw_ctrl = 1'b0;
    s2icg_qspim_pclk_en = rff_s2icg_qspim_pclk_en;
    load_s2icg_qspim_pclk_en = 1'b0;
    s2icg_sspim0_pclk_en = rff_s2icg_sspim0_pclk_en;
    load_s2icg_sspim0_pclk_en = 1'b0;
    s2icg_sspim1_pclk_en = rff_s2icg_sspim1_pclk_en;
    load_s2icg_sspim1_pclk_en = 1'b0;
    s2icg_sspim2_pclk_en = rff_s2icg_sspim2_pclk_en;
    load_s2icg_sspim2_pclk_en = 1'b0;
    s2icg_spis_pclk_en = rff_s2icg_spis_pclk_en;
    load_s2icg_spis_pclk_en = 1'b0;
    s2icg_uart0_pclk_en = rff_s2icg_uart0_pclk_en;
    load_s2icg_uart0_pclk_en = 1'b0;
    s2icg_uart1_pclk_en = rff_s2icg_uart1_pclk_en;
    load_s2icg_uart1_pclk_en = 1'b0;
    s2icg_uart2_pclk_en = rff_s2icg_uart2_pclk_en;
    load_s2icg_uart2_pclk_en = 1'b0;
    s2icg_uart3_pclk_en = rff_s2icg_uart3_pclk_en;
    load_s2icg_uart3_pclk_en = 1'b0;
    s2icg_i2sm_pclk_en = rff_s2icg_i2sm_pclk_en;
    load_s2icg_i2sm_pclk_en = 1'b0;
    s2icg_i2ss0_pclk_en = rff_s2icg_i2ss0_pclk_en;
    load_s2icg_i2ss0_pclk_en = 1'b0;
    s2icg_i2ss1_pclk_en = rff_s2icg_i2ss1_pclk_en;
    load_s2icg_i2ss1_pclk_en = 1'b0;
    s2icg_i2ss2_pclk_en = rff_s2icg_i2ss2_pclk_en;
    load_s2icg_i2ss2_pclk_en = 1'b0;
    s2icg_i2ss3_pclk_en = rff_s2icg_i2ss3_pclk_en;
    load_s2icg_i2ss3_pclk_en = 1'b0;
    s2icg_i2ss4_pclk_en = rff_s2icg_i2ss4_pclk_en;
    load_s2icg_i2ss4_pclk_en = 1'b0;
    s2icg_i2ss5_pclk_en = rff_s2icg_i2ss5_pclk_en;
    load_s2icg_i2ss5_pclk_en = 1'b0;
    s2icg_i2c0_pclk_en = rff_s2icg_i2c0_pclk_en;
    load_s2icg_i2c0_pclk_en = 1'b0;
    s2icg_i2c1_pclk_en = rff_s2icg_i2c1_pclk_en;
    load_s2icg_i2c1_pclk_en = 1'b0;
    s2icg_i2c2_pclk_en = rff_s2icg_i2c2_pclk_en;
    load_s2icg_i2c2_pclk_en = 1'b0;
    s2icg_gpio_pclk_en = rff_s2icg_gpio_pclk_en;
    load_s2icg_gpio_pclk_en = 1'b0;
    s2icg_rtc_pclk_en = rff_s2icg_rtc_pclk_en;
    load_s2icg_rtc_pclk_en = 1'b0;
    s2icg_timers_pclk_en = rff_s2icg_timers_pclk_en;
    load_s2icg_timers_pclk_en = 1'b0;
    s2icg_wdt_pclk_en = rff_s2icg_wdt_pclk_en;
    load_s2icg_wdt_pclk_en = 1'b0;
    debug_info_enable = rff_debug_info_enable;
    load_debug_info_enable = 1'b0;

    if (station2brb_req_arvalid) begin
      case (1'b1)
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SM_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2sm_clkdiv_half_div_less_1;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS0_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2ss0_clkdiv_half_div_less_1;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS1_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2ss1_clkdiv_half_div_less_1;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS2_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2ss2_clkdiv_half_div_less_1;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS3_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2ss3_clkdiv_half_div_less_1;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS4_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2ss4_clkdiv_half_div_less_1;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS5_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2ss5_clkdiv_half_div_less_1;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_TIMER_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_timer_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_MST_CSTATE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c0_debug_mst_cstate;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_MST_CSTATE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c1_debug_mst_cstate;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_MST_CSTATE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c2_debug_mst_cstate;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_SLV_CSTATE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c0_debug_slv_cstate;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_SLV_CSTATE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c1_debug_slv_cstate;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_SLV_CSTATE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c2_debug_slv_cstate;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_0_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_0;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_1;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_2_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_2;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_3_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_3;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_4_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_4;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_5_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_5;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_6_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_6;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_7_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_7;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_8_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_8;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_9_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_9;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_10_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_10;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_11_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_11;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_12_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_12;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_13_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_13;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_14_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_14;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_15_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_15;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_16_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_16;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_17_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_17;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_18_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_18;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_19_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_19;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_20_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_20;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_21_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_21;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_22_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_22;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_23_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_23;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_24_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_24;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_25_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_25;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_26_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_26;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_27_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_27;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_28_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_28;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_29_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_29;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_30_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_30;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_31_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_31;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_32_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_32;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_33_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_33;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_34_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_34;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_35_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_35;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_36_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_36;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_37_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_37;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_38_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_38;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_39_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_39;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_40_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_40;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_41_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_41;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_42_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_42;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_43_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_43;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_44_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_44;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_45_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_45;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_46_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_46;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_47_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_SSP_SHARED_sel_47;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SM_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2sm_clkdiv_divclk_sel;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS0_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2ss0_clkdiv_divclk_sel;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS1_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2ss1_clkdiv_divclk_sel;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS2_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2ss2_clkdiv_divclk_sel;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS3_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2ss3_clkdiv_divclk_sel;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS4_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2ss4_clkdiv_divclk_sel;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS5_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2ss5_clkdiv_divclk_sel;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_QSPIM_SSI_BUSY_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_qspim_ssi_busy;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_QSPIM_SSI_SLEEP_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_qspim_ssi_sleep;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_QSPIM_SSI_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_qspim_ssi_clk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_SSPIM0_SSI_SLEEP_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_sspim0_ssi_sleep;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_SSPIM0_SSI_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_sspim0_ssi_clk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_SSPIM1_SSI_SLEEP_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_sspim1_ssi_sleep;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_SSPIM1_SSI_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_sspim1_ssi_clk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_SSPIM2_SSI_SLEEP_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_sspim2_ssi_sleep;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_SSPIM2_SSI_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_sspim2_ssi_clk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_SPIS_SSI_SLEEP_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_spis_ssi_sleep;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c0_debug_addr;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_10BIT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c0_debug_addr_10bit;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_DATA_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c0_debug_data;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_HS_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c0_debug_hs;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_MASTER_ACT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c0_debug_master_act;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_P_GEN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c0_debug_p_gen;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_RD_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c0_debug_rd;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_S_GEN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c0_debug_s_gen;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_SLAVE_ACT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c0_debug_slave_act;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_WR_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c0_debug_wr;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2C0_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2c0_clk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c1_debug_addr;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_10BIT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c1_debug_addr_10bit;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_DATA_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c1_debug_data;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_HS_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c1_debug_hs;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_MASTER_ACT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c1_debug_master_act;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_P_GEN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c1_debug_p_gen;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_RD_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c1_debug_rd;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_S_GEN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c1_debug_s_gen;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_SLAVE_ACT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c1_debug_slave_act;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_WR_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c1_debug_wr;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2C1_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2c1_clk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c2_debug_addr;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_10BIT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c2_debug_addr_10bit;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_DATA_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c2_debug_data;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_HS_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c2_debug_hs;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_MASTER_ACT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c2_debug_master_act;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_P_GEN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c2_debug_p_gen;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_RD_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c2_debug_rd;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_S_GEN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c2_debug_s_gen;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_SLAVE_ACT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c2_debug_slave_act;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_WR_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_i2c2_debug_wr;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2C2_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_i2c2_clk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_GPIO_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_gpio_clk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_RTC_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_rtc_clk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_RTC_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_b2s_rtc_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_1_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_timers_1_resetn;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_2_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_timers_2_resetn;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_3_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_timers_3_resetn;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_4_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_timers_4_resetn;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_5_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_timers_5_resetn;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_6_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_timers_6_resetn;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_7_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_timers_7_resetn;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_8_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_timers_8_resetn;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_WDT_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_wdt_clk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_WDT_PAUSE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_wdt_pause;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_WDT_SPEED_UP_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_wdt_speed_up;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_BOOTUP_ENA_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_bootup_ena;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_BOOTUP_ENA_SW_CTRL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_bootup_ena_sw_ctrl;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_boot_from_flash_ena;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_SW_CTRL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2b_boot_from_flash_ena_sw_ctrl;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_QSPIM_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_qspim_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_SSPIM0_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_sspim0_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_SSPIM1_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_sspim1_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_SSPIM2_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_sspim2_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_SPIS_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_spis_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_UART0_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_uart0_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_UART1_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_uart1_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_UART2_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_uart2_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_UART3_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_uart3_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SM_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_i2sm_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SS0_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_i2ss0_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SS1_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_i2ss1_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SS2_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_i2ss2_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SS3_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_i2ss3_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SS4_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_i2ss4_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SS5_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_i2ss5_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2C0_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_i2c0_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2C1_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_i2c1_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2C2_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_i2c2_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_GPIO_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_gpio_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_RTC_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_rtc_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_TIMERS_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_timers_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_WDT_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_s2icg_wdt_pclk_en;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_DEBUG_INFO_ENABLE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          data = rff_debug_info_enable;
          rdec  = 1'b1;
          rresp = AXI_RESP_OKAY;
        end
        default: begin
          rdec  = 1'b0;
          data  = {STATION_SLOW_IO_DATA_WIDTH{1'b0}};
          rresp = AXI_RESP_DECERR;
        end
      endcase
    end
    if (station2brb_req_awvalid & station2brb_req_wvalid) begin
      case (1'b1)
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SM_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2sm_clkdiv_half_div_less_1 = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SM_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0];
          load_s2b_i2sm_clkdiv_half_div_less_1 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS0_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2ss0_clkdiv_half_div_less_1 = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SS0_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0];
          load_s2b_i2ss0_clkdiv_half_div_less_1 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS1_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2ss1_clkdiv_half_div_less_1 = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SS1_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0];
          load_s2b_i2ss1_clkdiv_half_div_less_1 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS2_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2ss2_clkdiv_half_div_less_1 = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SS2_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0];
          load_s2b_i2ss2_clkdiv_half_div_less_1 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS3_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2ss3_clkdiv_half_div_less_1 = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SS3_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0];
          load_s2b_i2ss3_clkdiv_half_div_less_1 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS4_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2ss4_clkdiv_half_div_less_1 = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SS4_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0];
          load_s2b_i2ss4_clkdiv_half_div_less_1 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS5_CLKDIV_HALF_DIV_LESS_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2ss5_clkdiv_half_div_less_1 = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SS5_CLKDIV_HALF_DIV_LESS_1_WIDTH - 1 : 0];
          load_s2b_i2ss5_clkdiv_half_div_less_1 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_TIMER_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_timer_en = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_TIMER_EN_WIDTH - 1 : 0];
          load_b2s_timer_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_MST_CSTATE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c0_debug_mst_cstate = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C0_DEBUG_MST_CSTATE_WIDTH - 1 : 0];
          load_b2s_i2c0_debug_mst_cstate = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_MST_CSTATE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c1_debug_mst_cstate = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C1_DEBUG_MST_CSTATE_WIDTH - 1 : 0];
          load_b2s_i2c1_debug_mst_cstate = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_MST_CSTATE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c2_debug_mst_cstate = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C2_DEBUG_MST_CSTATE_WIDTH - 1 : 0];
          load_b2s_i2c2_debug_mst_cstate = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_SLV_CSTATE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c0_debug_slv_cstate = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C0_DEBUG_SLV_CSTATE_WIDTH - 1 : 0];
          load_b2s_i2c0_debug_slv_cstate = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_SLV_CSTATE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c1_debug_slv_cstate = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C1_DEBUG_SLV_CSTATE_WIDTH - 1 : 0];
          load_b2s_i2c1_debug_slv_cstate = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_SLV_CSTATE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c2_debug_slv_cstate = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C2_DEBUG_SLV_CSTATE_WIDTH - 1 : 0];
          load_b2s_i2c2_debug_slv_cstate = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_0_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_0 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_0_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_0 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_1_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_1 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_1_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_1 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_2_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_2 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_2_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_2 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_3_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_3 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_3_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_3 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_4_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_4 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_4_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_4 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_5_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_5 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_5_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_5 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_6_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_6 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_6_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_6 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_7_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_7 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_7_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_7 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_8_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_8 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_8_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_8 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_9_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_9 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_9_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_9 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_10_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_10 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_10_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_10 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_11_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_11 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_11_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_11 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_12_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_12 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_12_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_12 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_13_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_13 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_13_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_13 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_14_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_14 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_14_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_14 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_15_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_15 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_15_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_15 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_16_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_16 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_16_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_16 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_17_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_17 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_17_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_17 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_18_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_18 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_18_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_18 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_19_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_19 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_19_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_19 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_20_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_20 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_20_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_20 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_21_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_21 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_21_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_21 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_22_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_22 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_22_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_22 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_23_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_23 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_23_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_23 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_24_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_24 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_24_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_24 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_25_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_25 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_25_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_25 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_26_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_26 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_26_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_26 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_27_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_27 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_27_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_27 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_28_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_28 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_28_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_28 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_29_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_29 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_29_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_29 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_30_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_30 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_30_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_30 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_31_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_31 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_31_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_31 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_32_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_32 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_32_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_32 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_33_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_33 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_33_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_33 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_34_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_34 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_34_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_34 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_35_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_35 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_35_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_35 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_36_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_36 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_36_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_36 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_37_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_37 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_37_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_37 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_38_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_38 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_38_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_38 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_39_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_39 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_39_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_39 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_40_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_40 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_40_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_40 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_41_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_41 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_41_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_41 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_42_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_42 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_42_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_42 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_43_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_43 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_43_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_43 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_44_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_44 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_44_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_44 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_45_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_45 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_45_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_45 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_46_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_46 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_46_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_46 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_SSP_SHARED_SEL_47_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          SSP_SHARED_sel_47 = station2brb_req_w.wdata[STATION_SLOW_IO_SSP_SHARED_SEL_47_WIDTH - 1 : 0];
          load_SSP_SHARED_sel_47 = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SM_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2sm_clkdiv_divclk_sel = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SM_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0];
          load_s2b_i2sm_clkdiv_divclk_sel = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS0_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2ss0_clkdiv_divclk_sel = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SS0_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0];
          load_s2b_i2ss0_clkdiv_divclk_sel = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS1_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2ss1_clkdiv_divclk_sel = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SS1_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0];
          load_s2b_i2ss1_clkdiv_divclk_sel = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS2_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2ss2_clkdiv_divclk_sel = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SS2_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0];
          load_s2b_i2ss2_clkdiv_divclk_sel = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS3_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2ss3_clkdiv_divclk_sel = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SS3_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0];
          load_s2b_i2ss3_clkdiv_divclk_sel = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS4_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2ss4_clkdiv_divclk_sel = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SS4_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0];
          load_s2b_i2ss4_clkdiv_divclk_sel = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2SS5_CLKDIV_DIVCLK_SEL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2ss5_clkdiv_divclk_sel = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2SS5_CLKDIV_DIVCLK_SEL_WIDTH - 1 : 0];
          load_s2b_i2ss5_clkdiv_divclk_sel = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_QSPIM_SSI_BUSY_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_qspim_ssi_busy = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_QSPIM_SSI_BUSY_WIDTH - 1 : 0];
          load_b2s_qspim_ssi_busy = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_QSPIM_SSI_SLEEP_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_qspim_ssi_sleep = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_QSPIM_SSI_SLEEP_WIDTH - 1 : 0];
          load_b2s_qspim_ssi_sleep = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_QSPIM_SSI_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_qspim_ssi_clk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_QSPIM_SSI_CLK_EN_WIDTH - 1 : 0];
          load_s2b_qspim_ssi_clk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_SSPIM0_SSI_SLEEP_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_sspim0_ssi_sleep = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_SSPIM0_SSI_SLEEP_WIDTH - 1 : 0];
          load_b2s_sspim0_ssi_sleep = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_SSPIM0_SSI_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_sspim0_ssi_clk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_SSPIM0_SSI_CLK_EN_WIDTH - 1 : 0];
          load_s2b_sspim0_ssi_clk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_SSPIM1_SSI_SLEEP_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_sspim1_ssi_sleep = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_SSPIM1_SSI_SLEEP_WIDTH - 1 : 0];
          load_b2s_sspim1_ssi_sleep = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_SSPIM1_SSI_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_sspim1_ssi_clk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_SSPIM1_SSI_CLK_EN_WIDTH - 1 : 0];
          load_s2b_sspim1_ssi_clk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_SSPIM2_SSI_SLEEP_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_sspim2_ssi_sleep = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_SSPIM2_SSI_SLEEP_WIDTH - 1 : 0];
          load_b2s_sspim2_ssi_sleep = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_SSPIM2_SSI_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_sspim2_ssi_clk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_SSPIM2_SSI_CLK_EN_WIDTH - 1 : 0];
          load_s2b_sspim2_ssi_clk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_SPIS_SSI_SLEEP_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_spis_ssi_sleep = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_SPIS_SSI_SLEEP_WIDTH - 1 : 0];
          load_b2s_spis_ssi_sleep = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c0_debug_addr = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_WIDTH - 1 : 0];
          load_b2s_i2c0_debug_addr = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_10BIT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c0_debug_addr_10bit = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C0_DEBUG_ADDR_10BIT_WIDTH - 1 : 0];
          load_b2s_i2c0_debug_addr_10bit = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_DATA_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c0_debug_data = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C0_DEBUG_DATA_WIDTH - 1 : 0];
          load_b2s_i2c0_debug_data = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_HS_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c0_debug_hs = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C0_DEBUG_HS_WIDTH - 1 : 0];
          load_b2s_i2c0_debug_hs = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_MASTER_ACT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c0_debug_master_act = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C0_DEBUG_MASTER_ACT_WIDTH - 1 : 0];
          load_b2s_i2c0_debug_master_act = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_P_GEN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c0_debug_p_gen = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C0_DEBUG_P_GEN_WIDTH - 1 : 0];
          load_b2s_i2c0_debug_p_gen = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_RD_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c0_debug_rd = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C0_DEBUG_RD_WIDTH - 1 : 0];
          load_b2s_i2c0_debug_rd = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_S_GEN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c0_debug_s_gen = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C0_DEBUG_S_GEN_WIDTH - 1 : 0];
          load_b2s_i2c0_debug_s_gen = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_SLAVE_ACT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c0_debug_slave_act = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C0_DEBUG_SLAVE_ACT_WIDTH - 1 : 0];
          load_b2s_i2c0_debug_slave_act = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C0_DEBUG_WR_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c0_debug_wr = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C0_DEBUG_WR_WIDTH - 1 : 0];
          load_b2s_i2c0_debug_wr = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2C0_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2c0_clk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2C0_CLK_EN_WIDTH - 1 : 0];
          load_s2b_i2c0_clk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c1_debug_addr = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_WIDTH - 1 : 0];
          load_b2s_i2c1_debug_addr = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_10BIT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c1_debug_addr_10bit = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C1_DEBUG_ADDR_10BIT_WIDTH - 1 : 0];
          load_b2s_i2c1_debug_addr_10bit = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_DATA_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c1_debug_data = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C1_DEBUG_DATA_WIDTH - 1 : 0];
          load_b2s_i2c1_debug_data = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_HS_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c1_debug_hs = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C1_DEBUG_HS_WIDTH - 1 : 0];
          load_b2s_i2c1_debug_hs = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_MASTER_ACT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c1_debug_master_act = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C1_DEBUG_MASTER_ACT_WIDTH - 1 : 0];
          load_b2s_i2c1_debug_master_act = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_P_GEN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c1_debug_p_gen = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C1_DEBUG_P_GEN_WIDTH - 1 : 0];
          load_b2s_i2c1_debug_p_gen = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_RD_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c1_debug_rd = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C1_DEBUG_RD_WIDTH - 1 : 0];
          load_b2s_i2c1_debug_rd = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_S_GEN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c1_debug_s_gen = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C1_DEBUG_S_GEN_WIDTH - 1 : 0];
          load_b2s_i2c1_debug_s_gen = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_SLAVE_ACT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c1_debug_slave_act = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C1_DEBUG_SLAVE_ACT_WIDTH - 1 : 0];
          load_b2s_i2c1_debug_slave_act = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C1_DEBUG_WR_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c1_debug_wr = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C1_DEBUG_WR_WIDTH - 1 : 0];
          load_b2s_i2c1_debug_wr = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2C1_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2c1_clk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2C1_CLK_EN_WIDTH - 1 : 0];
          load_s2b_i2c1_clk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c2_debug_addr = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_WIDTH - 1 : 0];
          load_b2s_i2c2_debug_addr = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_10BIT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c2_debug_addr_10bit = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C2_DEBUG_ADDR_10BIT_WIDTH - 1 : 0];
          load_b2s_i2c2_debug_addr_10bit = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_DATA_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c2_debug_data = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C2_DEBUG_DATA_WIDTH - 1 : 0];
          load_b2s_i2c2_debug_data = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_HS_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c2_debug_hs = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C2_DEBUG_HS_WIDTH - 1 : 0];
          load_b2s_i2c2_debug_hs = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_MASTER_ACT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c2_debug_master_act = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C2_DEBUG_MASTER_ACT_WIDTH - 1 : 0];
          load_b2s_i2c2_debug_master_act = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_P_GEN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c2_debug_p_gen = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C2_DEBUG_P_GEN_WIDTH - 1 : 0];
          load_b2s_i2c2_debug_p_gen = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_RD_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c2_debug_rd = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C2_DEBUG_RD_WIDTH - 1 : 0];
          load_b2s_i2c2_debug_rd = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_S_GEN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c2_debug_s_gen = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C2_DEBUG_S_GEN_WIDTH - 1 : 0];
          load_b2s_i2c2_debug_s_gen = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_SLAVE_ACT_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c2_debug_slave_act = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C2_DEBUG_SLAVE_ACT_WIDTH - 1 : 0];
          load_b2s_i2c2_debug_slave_act = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_I2C2_DEBUG_WR_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_i2c2_debug_wr = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_I2C2_DEBUG_WR_WIDTH - 1 : 0];
          load_b2s_i2c2_debug_wr = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_I2C2_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_i2c2_clk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_I2C2_CLK_EN_WIDTH - 1 : 0];
          load_s2b_i2c2_clk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_GPIO_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_gpio_clk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_GPIO_CLK_EN_WIDTH - 1 : 0];
          load_s2b_gpio_clk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_RTC_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_rtc_clk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_RTC_CLK_EN_WIDTH - 1 : 0];
          load_s2b_rtc_clk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_B2S_RTC_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          b2s_rtc_en = station2brb_req_w.wdata[STATION_SLOW_IO_B2S_RTC_EN_WIDTH - 1 : 0];
          load_b2s_rtc_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_1_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_timers_1_resetn = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_TIMERS_1_RESETN_WIDTH - 1 : 0];
          load_s2b_timers_1_resetn = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_2_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_timers_2_resetn = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_TIMERS_2_RESETN_WIDTH - 1 : 0];
          load_s2b_timers_2_resetn = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_3_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_timers_3_resetn = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_TIMERS_3_RESETN_WIDTH - 1 : 0];
          load_s2b_timers_3_resetn = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_4_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_timers_4_resetn = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_TIMERS_4_RESETN_WIDTH - 1 : 0];
          load_s2b_timers_4_resetn = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_5_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_timers_5_resetn = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_TIMERS_5_RESETN_WIDTH - 1 : 0];
          load_s2b_timers_5_resetn = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_6_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_timers_6_resetn = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_TIMERS_6_RESETN_WIDTH - 1 : 0];
          load_s2b_timers_6_resetn = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_7_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_timers_7_resetn = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_TIMERS_7_RESETN_WIDTH - 1 : 0];
          load_s2b_timers_7_resetn = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_TIMERS_8_RESETN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_timers_8_resetn = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_TIMERS_8_RESETN_WIDTH - 1 : 0];
          load_s2b_timers_8_resetn = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_WDT_CLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_wdt_clk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_WDT_CLK_EN_WIDTH - 1 : 0];
          load_s2b_wdt_clk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_WDT_PAUSE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_wdt_pause = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_WDT_PAUSE_WIDTH - 1 : 0];
          load_s2b_wdt_pause = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_WDT_SPEED_UP_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_wdt_speed_up = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_WDT_SPEED_UP_WIDTH - 1 : 0];
          load_s2b_wdt_speed_up = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_BOOTUP_ENA_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_bootup_ena = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_BOOTUP_ENA_WIDTH - 1 : 0];
          load_s2b_bootup_ena = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_BOOTUP_ENA_SW_CTRL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_bootup_ena_sw_ctrl = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_BOOTUP_ENA_SW_CTRL_WIDTH - 1 : 0];
          load_s2b_bootup_ena_sw_ctrl = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_boot_from_flash_ena = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_WIDTH - 1 : 0];
          load_s2b_boot_from_flash_ena = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_SW_CTRL_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2b_boot_from_flash_ena_sw_ctrl = station2brb_req_w.wdata[STATION_SLOW_IO_S2B_BOOT_FROM_FLASH_ENA_SW_CTRL_WIDTH - 1 : 0];
          load_s2b_boot_from_flash_ena_sw_ctrl = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_QSPIM_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_qspim_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_QSPIM_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_qspim_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_SSPIM0_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_sspim0_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_SSPIM0_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_sspim0_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_SSPIM1_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_sspim1_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_SSPIM1_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_sspim1_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_SSPIM2_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_sspim2_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_SSPIM2_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_sspim2_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_SPIS_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_spis_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_SPIS_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_spis_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_UART0_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_uart0_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_UART0_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_uart0_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_UART1_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_uart1_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_UART1_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_uart1_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_UART2_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_uart2_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_UART2_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_uart2_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_UART3_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_uart3_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_UART3_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_uart3_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SM_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_i2sm_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_I2SM_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_i2sm_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SS0_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_i2ss0_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_I2SS0_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_i2ss0_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SS1_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_i2ss1_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_I2SS1_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_i2ss1_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SS2_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_i2ss2_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_I2SS2_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_i2ss2_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SS3_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_i2ss3_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_I2SS3_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_i2ss3_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SS4_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_i2ss4_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_I2SS4_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_i2ss4_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2SS5_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_i2ss5_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_I2SS5_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_i2ss5_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2C0_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_i2c0_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_I2C0_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_i2c0_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2C1_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_i2c1_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_I2C1_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_i2c1_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_I2C2_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_i2c2_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_I2C2_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_i2c2_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_GPIO_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_gpio_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_GPIO_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_gpio_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_RTC_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_rtc_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_RTC_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_rtc_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_TIMERS_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_timers_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_TIMERS_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_timers_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_S2ICG_WDT_PCLK_EN_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          s2icg_wdt_pclk_en = station2brb_req_w.wdata[STATION_SLOW_IO_S2ICG_WDT_PCLK_EN_WIDTH - 1 : 0];
          load_s2icg_wdt_pclk_en = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        ((station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-1 -: STATION_ID_WIDTH_0] == LOCAL_STATION_ID_0) && ({{(STATION_ID_WIDTH_0+$clog2(STATION_SLOW_IO_DATA_WIDTH/8)){1'b0}}, station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH-STATION_ID_WIDTH_0-1:$clog2(STATION_SLOW_IO_DATA_WIDTH/8)]} == (STATION_SLOW_IO_DEBUG_INFO_ENABLE_OFFSET >> $clog2(STATION_SLOW_IO_DATA_WIDTH/8)))): begin
          debug_info_enable = station2brb_req_w.wdata[STATION_SLOW_IO_DEBUG_INFO_ENABLE_WIDTH - 1 : 0];
          load_debug_info_enable = station2brb_req_awready & station2brb_req_wready;
          bdec  = 1'b1;
          bresp = AXI_RESP_OKAY;
        end
        default: begin
          bdec  = 1'b0;
          bresp = AXI_RESP_DECERR;
        end
      endcase
    end
  end

  // Response Muxing
  oursring_resp_if_b_t  i_resp_if_b[2];
  oursring_resp_if_r_t  i_resp_if_r[2];
  logic                 i_resp_if_rvalid[2];
  logic                 i_resp_if_rready[2];
  logic                 i_resp_if_bvalid[2];
  logic                 i_resp_if_bready[2];
  oursring_resp_if_b_t  o_resp_ppln_if_b[1];
  oursring_resp_if_r_t  o_resp_ppln_if_r[1];
  logic                 o_resp_ppln_if_rvalid[1];
  logic                 o_resp_ppln_if_rready[1];
  logic                 o_resp_ppln_if_bvalid[1];
  logic                 o_resp_ppln_if_bready[1];

  logic                 rff_awrdy, rff_wrdy, next_awrdy, next_wrdy;
  // Request Bypassing
  assign o_req_local_if_awvalid  = (station2brb_req_awvalid & ~bdec) & ~rff_awrdy;
  assign o_req_local_if_wvalid   = (station2brb_req_wvalid & ~bdec) & ~rff_wrdy;
  assign o_req_local_if_arvalid  = (station2brb_req_arvalid & ~rdec);
  always_comb begin
    o_req_local_if_ar         = station2brb_req_ar;
    o_req_local_if_ar.araddr  = station2brb_req_ar.araddr[STATION_SLOW_IO_RING_ADDR_WIDTH - STATION_SLOW_IO_BLKID_WIDTH - 1 : 0];
    o_req_local_if_aw         = station2brb_req_aw;
    o_req_local_if_aw.awaddr  = station2brb_req_aw.awaddr[STATION_SLOW_IO_RING_ADDR_WIDTH - STATION_SLOW_IO_BLKID_WIDTH - 1 : 0];
  end
  assign o_req_local_if_w        = station2brb_req_w;

  // Request Readys
  always_ff @(posedge clk) begin
    if (rstn == 1'b0) begin
      rff_awrdy <= 1'b0;
      rff_wrdy  <= 1'b0;
    end else begin
      rff_awrdy <= next_awrdy;
      rff_wrdy  <= next_wrdy;
    end
  end
  always_comb begin
    next_awrdy = rff_awrdy;
    next_wrdy  = rff_wrdy;
    if ((~bdec & o_req_local_if_awready & o_req_local_if_awvalid) | (bdec & i_resp_if_bready[0])) begin
      next_awrdy = 1'b1;
    end else if (rff_awrdy & rff_wrdy) begin
      next_awrdy = 1'b0;
    end
    if ((~bdec & o_req_local_if_wready & o_req_local_if_wvalid)  | (bdec & i_resp_if_bready[0])) begin
      next_wrdy = 1'b1;
    end else if (rff_awrdy & rff_wrdy) begin
      next_wrdy = 1'b0;
    end
  end
  assign station2brb_req_awready  = rff_awrdy & rff_wrdy;
  assign station2brb_req_wready   = rff_awrdy & rff_wrdy;

  assign station2brb_req_arready  = (~rdec & o_req_local_if_arready) | (rdec & i_resp_if_rready[0]);

  // if 1, means input port i's destination station id matches output j's station id
  logic [1:0][0:0]      is_r_dst_match;
  logic [1:0][0:0]      is_b_dst_match;

  oursring_resp_if_b_t  brb_b;
  oursring_resp_if_r_t  brb_r;

  assign brb_b.bid   = station2brb_req_aw.awid;
  assign brb_b.bresp = bresp;

  assign brb_r.rid   = station2brb_req_ar.arid;
  assign brb_r.rresp = rresp;
  assign brb_r.rdata = data;
  assign brb_r.rlast = 1'b1;

  assign i_resp_if_b[0] = brb_b;
  assign i_resp_if_b[1] = i_resp_local_if_b;

  assign i_resp_if_r[0] = brb_r;
  assign i_resp_if_r[1] = i_resp_local_if_r;

  assign i_resp_if_rvalid[0] = station2brb_req_arvalid & rdec;
  assign i_resp_if_rvalid[1] = i_resp_local_if_rvalid;

  assign i_resp_local_if_rready = i_resp_if_rready[1];

  assign i_resp_if_bvalid[0] = station2brb_req_awvalid & station2brb_req_wvalid & bdec & ~rff_awrdy & ~rff_wrdy;
  assign i_resp_if_bvalid[1] = i_resp_local_if_bvalid;

  assign i_resp_local_if_bready = i_resp_if_bready[1];

  assign station2brb_rsp_b        = o_resp_ppln_if_b[0];
  assign station2brb_rsp_r        = o_resp_ppln_if_r[0];
  assign station2brb_rsp_rvalid   = o_resp_ppln_if_rvalid[0];
  assign o_resp_ppln_if_rready[0] = station2brb_rsp_rready;
  assign station2brb_rsp_bvalid   = o_resp_ppln_if_bvalid[0];
  assign o_resp_ppln_if_bready[0] = station2brb_rsp_bready;
  
  assign is_r_dst_match = 2'b11;
  assign is_b_dst_match = 2'b11;

  oursring_resp #(.N_IN_PORT(2), .N_OUT_PORT(1)) resp_u (
    .i_resp_if_b            (i_resp_if_b),
    .i_resp_if_r            (i_resp_if_r),
    .i_resp_if_rvalid       (i_resp_if_rvalid),
    .i_resp_if_rready       (i_resp_if_rready),
    .i_resp_if_bvalid       (i_resp_if_bvalid),
    .i_resp_if_bready       (i_resp_if_bready),
    .o_resp_ppln_if_b       (o_resp_ppln_if_b),
    .o_resp_ppln_if_r       (o_resp_ppln_if_r),
    .o_resp_ppln_if_rvalid  (o_resp_ppln_if_rvalid),
    .o_resp_ppln_if_rready  (o_resp_ppln_if_rready),
    .o_resp_ppln_if_bvalid  (o_resp_ppln_if_bvalid),
    .o_resp_ppln_if_bready  (o_resp_ppln_if_bready),
    .is_r_dst_match         (is_r_dst_match),
    .is_b_dst_match         (is_b_dst_match),
    .rstn                   (rstn),
    .clk                    (clk)
    );
  
endmodule
`endif
`endif
