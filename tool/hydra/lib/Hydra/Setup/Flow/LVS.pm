#------------------------------------------------------
# Module Name: LVS
# Date:        Fri Feb 22 16:41:04 2019
# Author:      kvu
# Type:        lvs
#------------------------------------------------------
package Hydra::Setup::Flow::LVS;

use strict;
use warnings;
use Carp;
use Exporter;

our $VERSION = 1.00;
our @ISA     = qw(Exporter);

#------------------------------------------------------
# Global Variables
#------------------------------------------------------

#------------------------------------------------------
# Subroutines
#------------------------------------------------------

#++
# Tool: icv
# Flow: LVS
#--
sub icv_LVS {
  my ($Paramref, $KickoffFile, $subtype) = @_;
  my $design_name = $Paramref->get_param_value("GLOBAL_design", "strict");

  #my $KickoffFile       = new Hydra::Setup::File("HYDRA.run", "lvs");
  my $KickoffFile_v2lvs = new Hydra::Setup::File("HYDRA.v2lvs.run", "lvs", $subtype);
  my $KickoffFile_lvs   = new Hydra::Setup::File("HYDRA.lvs.run", "lvs", $subtype);
  my $line = "";

  # ICV Setup script
  my $home_dir = $Paramref->get_param_value("PV_home_dir", "strict");

  my $time = localtime;
  # $KickoffFile->add_line("#!/usr/bin/bash");
  # $KickoffFile->add_line("# Generated by Hydra on $time");
  # $KickoffFile->add_line("export HYDRA_HOME=$ENV{HYDRA_HOME}");
  $KickoffFile->add_line("source ${home_dir}/setup/icv_setup.sh");
  $KickoffFile->add_linebreak;
  $KickoffFile_v2lvs->add_line("#!/usr/bin/bash");
  $KickoffFile_v2lvs->add_line("# Generated by Hydra on $time");
  $KickoffFile_v2lvs->add_line("export HYDRA_HOME=$ENV{HYDRA_HOME}");
  $KickoffFile_v2lvs->add_line("source ${home_dir}/setup/icv_setup.sh");
  $KickoffFile_v2lvs->add_linebreak;
  $KickoffFile_lvs->add_line("#!/usr/bin/bash");
  $KickoffFile_lvs->add_line("# Generated by Hydra on $time");
  $KickoffFile_lvs->add_line("export HYDRA_HOME=$ENV{HYDRA_HOME}");
  $KickoffFile_lvs->add_line("source ${home_dir}/setup/icv_setup.sh");
  $KickoffFile_lvs->add_linebreak;

  # V2LVS
  my $v2lvs_bin      = $Paramref->get_param_value("LVS_v2lvs_bin", "strict");
  my $cdl_std_list   = $Paramref->get_param_value("SPI_std_list", "relaxed");
  my $cdl_macro_list = $Paramref->get_param_value("SPI_macro_list", "relaxed");
  my $cdl_block_list = $Paramref->get_param_value("SPI_block_list", "relaxed");
  my $vdd_net        = $Paramref->get_param_value("LVS_vdd_net", "relaxed");
  my $gnd_net        = $Paramref->get_param_value("LVS_gnd_net", "relaxed");
  my $verilog;
  if (defined $subtype && $subtype eq "fullchip") {
    $verilog = $Paramref->get_param_value("LVS_FULLCHIP_verilog", "strict");
  }
  else {
    $verilog = $Paramref->get_param_value("LVS_verilog", "strict");
  }
  $line .= "# V2LVS\n";
  $line .= "$v2lvs_bin \\\n";
  if (&Hydra::Setup::Param::has_value($cdl_std_list)) {
    $cdl_std_list = &Hydra::Setup::Param::remove_param_value_linebreak($cdl_std_list);
    foreach my $cdl_file (split(/\s+/, $cdl_std_list)) {
      $line .= "  -sp $cdl_file \\\n";
    }
  }
  if (&Hydra::Setup::Param::has_value($cdl_macro_list)) {
    $cdl_macro_list = &Hydra::Setup::Param::remove_param_value_linebreak($cdl_macro_list);
    foreach my $cdl_file (split(/\s+/, $cdl_macro_list)) {
      $line .= "  -sp $cdl_file \\\n";
    }
  }
  if (defined $subtype && $subtype eq "fullchip" && &Hydra::Setup::Param::has_value($cdl_block_list)) {
    $cdl_block_list = &Hydra::Setup::Param::remove_param_value_linebreak($cdl_block_list);
    foreach my $cdl_file (split(/\s+/, $cdl_block_list)) {
      $line .= "  -sp $cdl_file \\\n";
    }
  }
  if (&Hydra::Setup::Param::has_value($gnd_net)) {
    $line .= "  -verilog-b0 $gnd_net \\\n";
  }
  if (&Hydra::Setup::Param::has_value($vdd_net)) {
    $line .= "  -verilog-b1 $vdd_net \\\n";
  }
  $line .= sprintf <<EOF;
  -sp-dollarPins \\
  -sp-chopXPrefix \\
  -wireLog wirelog \\
  -verilog $verilog \\
  -outType spice \\
  -outName ./output/${design_name}.nettran.sp

EOF

  $KickoffFile->add_line($line);
  $KickoffFile_v2lvs->add_line($line);

  # LVS
  $line = "";
  my $gds;
  my $deck;
  if (defined $subtype && $subtype eq "fullchip") {
    $gds  = $Paramref->get_param_value("PV_FULLCHIP_gds", "strict");
    $deck = $Paramref->get_param_value("LVS_FULLCHIP_deck", "strict");
  }
  else {
    $gds  = $Paramref->get_param_value("PV_gds", "strict");
    $deck = $Paramref->get_param_value("LVS_deck", "strict");
  }
  my $lvs_bin = &Hydra::Setup::Tool::get_tool_binary($Paramref, "lvs");
  $line .= sprintf <<EOF;
# LVS
$lvs_bin -vue -dp8 \\
  -c   $design_name \\
  -i   $gds \\
  -stc $design_name \\
  -s   ./output/${design_name}.nettran.sp \\
  -sf  SPICE \\
  -vueshortALL \\
  $deck \\
|& tee log/lvs.log

EOF

  $KickoffFile->add_line($line);
  $KickoffFile_lvs->add_line($line);

  $KickoffFile->make_executable;
  $KickoffFile_v2lvs->make_executable;
  $KickoffFile_lvs->make_executable;

  return ($KickoffFile, $KickoffFile_v2lvs, $KickoffFile_lvs);
}

#++
# Tool: icv
# Flow: LVS_FULLCHIP
# Subtype: fullchip
#--
sub icv_LVS_FULLCHIP {
  my ($Paramref, $KickoffFile) = @_;
  return &icv_LVS($Paramref, $KickoffFile, "fullchip");
}

#++
# Tool: calibre
# Flow: LVS
#--
sub calibre_LVS {
  my ($Paramref, $KickoffFile, $subtype) = @_;
  my $design_name = $Paramref->get_param_value("GLOBAL_design", "strict");

  my $ScriptFile        = new Hydra::Setup::File("script/lvs.rules.svrf", "lvs", $subtype);
  my $KickoffFile_v2lvs = new Hydra::Setup::File("HYDRA.v2lvs.run", "lvs", $subtype);
  my $KickoffFile_lvs   = new Hydra::Setup::File("HYDRA.lvs.run", "lvs", $subtype);
  my $line = "";

  my $time = localtime;
  $KickoffFile_v2lvs->add_line("#!/usr/bin/bash");
  $KickoffFile_v2lvs->add_line("# Generated by Hydra on $time");
  $KickoffFile_v2lvs->add_line("export HYDRA_HOME=$ENV{HYDRA_HOME}");
  $KickoffFile_v2lvs->add_linebreak;
  $KickoffFile_lvs->add_line("#!/usr/bin/bash");
  $KickoffFile_lvs->add_line("# Generated by Hydra on $time");
  $KickoffFile_lvs->add_line("export HYDRA_HOME=$ENV{HYDRA_HOME}");
  $KickoffFile_lvs->add_linebreak;

  # V2LVS
  my $v2lvs_bin      = $Paramref->get_param_value("LVS_v2lvs_bin", "strict");
  my $cdl_std_list   = $Paramref->get_param_value("SPI_std_list", "relaxed");
  my $cdl_macro_list = $Paramref->get_param_value("SPI_macro_list", "relaxed");
  my $cdl_block_list = $Paramref->get_param_value("SPI_block_list", "relaxed");
  my $verilog;
  if (defined $subtype && $subtype eq "fullchip") {
    $verilog = $Paramref->get_param_value("LVS_FULLCHIP_verilog", "strict");
  }
  else {
    $verilog = $Paramref->get_param_value("LVS_verilog", "strict");
  }
  $line .= "# V2LVS\n";
  $line .= "$v2lvs_bin \\\n";
  if (&Hydra::Setup::Param::has_value($cdl_std_list)) {
    $cdl_std_list = &Hydra::Setup::Param::remove_param_value_linebreak($cdl_std_list);
    foreach my $cdl_file (split(/\s+/, $cdl_std_list)) {
      $line .= "  -s $cdl_file \\\n";
    }
  }
  if (&Hydra::Setup::Param::has_value($cdl_macro_list)) {
    $cdl_macro_list = &Hydra::Setup::Param::remove_param_value_linebreak($cdl_macro_list);
    foreach my $cdl_file (split(/\s+/, $cdl_macro_list)) {
      $line .= "  -s $cdl_file \\\n";
    }
  }
  if (defined $subtype && $subtype eq "fullchip" && &Hydra::Setup::Param::has_value($cdl_block_list)) {
    $cdl_block_list = &Hydra::Setup::Param::remove_param_value_linebreak($cdl_block_list);
    foreach my $cdl_file (split(/\s+/, $cdl_block_list)) {
      $line .= "  -s $cdl_file \\\n";
    }
  }
  $line .= "  -v $verilog \\\n";
  $line .= "  -o output/${design_name}.lvs.spi\n";

  $KickoffFile->add_line($line);
  $KickoffFile_v2lvs->add_line($line);

  # LVS svrf
  $line = "";
  my $gds;
  my $deck;
  if (defined $subtype && $subtype eq "fullchip") {
    $gds  = $Paramref->get_param_value("PV_FULLCHIP_gds", "strict");
    $deck = $Paramref->get_param_value("LVS_FULLCHIP_deck", "strict");
  }
  else {
    $gds  = $Paramref->get_param_value("PV_gds", "strict");
    $deck = $Paramref->get_param_value("LVS_deck", "strict");
  }
  $line .= sprintf <<EOF;
INCLUDE $deck

LAYOUT SYSTEM  GDSII
LAYOUT PATH    "$gds"
LAYOUT PRIMARY $design_name

SOURCE SYSTEM  SPICE
SOURCE PATH    "./output/${design_name}.lvs.spi"
SOURCE PRIMARY $design_name

LVS REPORT "./rpt/${design_name}.lvs.rpt"

EOF

  $ScriptFile->add_line($line);

  # LVS kickoff
  $line = "";
  my $lvs_bin = &Hydra::Setup::Tool::get_tool_binary($Paramref, "lvs");
  $line .= "$lvs_bin -lvs -64 script/lvs.rules.svrf | tee log/lvs.rules.log\n";
  $line .= "\n";
  $KickoffFile->add_line($line);
  $KickoffFile_lvs->add_line($line);

  $KickoffFile->make_executable;
  $KickoffFile_v2lvs->make_executable;
  $KickoffFile_lvs->make_executable;

  return ($KickoffFile, $KickoffFile_v2lvs, $KickoffFile_lvs, $ScriptFile);
}

#++
# Tool: calibre
# Flow: LVS_FULLCHIP
# Subtype: fullchip
#--
sub calibre_LVS_FULLCHIP {
  my ($Paramref, $KickoffFile) = @_;
  return &calibre_LVS($Paramref, $KickoffFile, "fullchip");
}


=pod

=head1 icv LVS

=over

=item PV_home_dir

The home directory of ICV. This is used to set necessary environment variables for ICV.

=item PV_gds

The gds to perform LVS on.

=item LVS_deck

The deck to perform LVS with.

=item LVS_v2lvs_bin

The binary path to the tool for performing the verilog to spice conversion.

=item LVS_verilog

The verilog netlist.

=item LVS_vdd_net

The name of the power net.

=item LVS_gnd_net

The name of the ground net.

=item SPI_std_list

A space-delimited list of spice library files for standard cells.

=item SPI_macro_list

A space-delimited list of spice library files for macro cells.

=back

=head1 icv LVS_FULLCHIP

LVS_FULLCHIP uses all the same params as LVS, along with the following:

=over

=item PV_FULLCHIP_gds

The gds to perform LVS on.

=item LVS_FULLCHIP_deck

The deck to perform LVS with.

=item LVS_FULLCHIP_verilog

The verilog netlist.

=back

=head1 calibre LVS

=over

=item PV_gds

The gds to perform LVS on.

=item LVS_deck

The deck to perform LVS with.

=item LVS_v2lvs_bin

The binary path to the tool for performing the verilog to spice conversion.

=item LVS_verilog

The verilog netlist.

=item SPI_std_list

A space-delimited list of spice library files for standard cells.

=item SPI_macro_list

A space-delimited list of spice library files for macro cells.

=back

=head1 calibre LVS_FULLCHIP

LVS_FULLCHIP uses all the same params as LVS, along with the following:

=over

=item PV_FULLCHIP_gds

The gds to perform LVS on.

=item LVS_FULLCHIP_deck

The deck to perform LVS with.

=item LVS_FULLCHIP_verilog

The verilog netlist.

=back

=cut

1;
