=head1 NAME

VTSwap - swap LVT/SVT cells to HVT based on timing report

=head1 SYNOPSIS

hydra.pl vtswap B<-rpt> I<FILE> B<-margin> I<NUM>

=head1 DESCRIPTION

This function attempts to find candidate instances for swapping to HVT. This is done by examining the provided timing report for instances that appear to have enough timing margin to safely swap.

The intended workflow for this function is as follows:

=over

=item B<Generate the initial timing report>

The initial timing report should primarily contain paths with positive slack, although violating paths are ok too. This function will gather all instances (if it is a VT Cell) in the timing report and assign each a "slack", which is the worst slack across all timing paths that particular instance appears in. If that slack is greater than the provided margin, then the instance goes to the next step.

Ideally, this report would contain every possible path, which would allow the script to accurately find good candidate instances. However, generating this report would take forever and end up being huge, so it is recommended to only report paths with a slack greater than your target margin. Each instance will later undergo a second margin check in PT, which will weed out instances that are within violating paths.

Here is a recommended report_timing command for example:

 report_timing -path_type full -delay_type max -slack_greater_than I<margin> -max_paths 200000

=item B<Run this function>

Run Hydra vtswap function with the timing report and your target margin to generate a PT script.

A couple things are hard-coded for now:

The mode of operation is always LVT/SVT swapping to HVT.

Cell patterns are hard-coded. Since SVT appears to have no indicating suffix on the cell name, some special scripting is required to handle this. A pattern for clock cells is also used to skip instances of this type, since it appears that there are no HVT type clock cells. The patterns (in Perl regex) are as follows:

 HVT: ^.*BWP.*HVT$
 LVT: ^.*BWP.*LVT$
 SVT: ^.*BWP.*$
 Clock: ^CKL

=item B<Source the generated script into PT>

Restore your PT session, then source the script generated by Hydra vtswap. This script contains two things per candidate instance: 1. A query for paths that run through the instance with a slack lesser than your target margin, and 2. A size_cell command for the instance. The idea is that the query should result in 0 paths found if the instance has enough timing margin for swapping.

All queries are done first to avoid implicit update_timing refreshes, which would slow down the script considerably. This means that the queries are technically not quite accurate, because past swaps might impact future queries, but the run time is not worth the accuracy.

Messages are placed every 10000 actions to help keep track of script progress.

This script includes a write_changes at the end, which will generate the ECO script.

=item B<Source the ECO script into ICC2>

Restore your nlib in ICC2 and source the ECO script to finish the flow.

=back

=head1 OPTIONS

=over

=item B<-rpt>

Timing report from icc2 or pt. 

=item B<-margin>

The amount of timing margin (in ns) to require an instance to have before attempting to swap.

=back

=head1 EXAMPLE

=head1 SEE ALSO
